{
    "title": "Python script to place order on Interactive Brokers ",
    "original_prompt": "write a python program to take a webhook from trading view in this format\n\n{\"Action\": \"Buy\", \"Ticker\": \"AAPL\", \"Price\": 370}\n\nand place an order on Interactive Brokers. Take relevant values from the webhook and place the order with 30% of the account balance",
    "split_prompt": "This is a prompt description:```json\n{\n    \"spliting prompt\": {\n        \"task\":[\n            \"write a python program\"\n        ],\n        \"input_format\":[\n            \"{\\\"Action\\\": \\\"Buy\\\", \\\"Ticker\\\": \\\"AAPL\\\", \\\"Price\\\": 370}\"\n        ],\n        \"api_integration\":[\n            \"Interactive Brokers\"\n        ],\n        \"order_details\":[\n            \"30% of the account balance\"\n        ],\n        \"data_extraction\":[\n            \"Action\",\n            \"Ticker\",\n            \"Price\"\n        ]\n    }\n}\n```",
    "input1": " {\"Action\": \"Sell\", \"Ticker\": \"TSLA\", \"Price\": 720}\n\n",
    "input2": " {\"Action\": \"Buy\", \"Ticker\": \"GOOGL\", \"Price\": 2800}",
    "input1_ans": [
        "To create a Python program that takes a webhook from TradingView and places an order on Interactive Brokers (IB), you will need to use the `ib_insync` library, which provides a convenient interface for interacting with the Interactive Brokers API. \n\nBefore you start, make sure you have the following prerequisites:\n\n1. **Interactive Brokers Account**: You need an account with Interactive Brokers and the Trader Workstation (TWS) or IB Gateway running.\n2. **Install ib_insync**: You can install the `ib_insync` library using pip:\n   ```bash\n   pip install ib_insync\n   ```\n\n3. **Enable API Access**: Ensure that API access is enabled in your TWS or IB Gateway settings.\n\nHere is a sample Python program that listens for a webhook, extracts the relevant values, and places an order with 30% of the account balance:\n\n```python\nimport json\nfrom flask import Flask, request\nfrom ib_insync import *\n\n# Initialize Flask app\napp = Flask(__name__)\n\n# Connect to Interactive Brokers\nib = IB()\nib.connect('127.0.0.1', 7497, clientId=1)  # Adjust the port and clientId as needed\n\n@app.route('/webhook', methods=['POST'])\ndef webhook():\n    data = request.get_json()\n    \n    if not data:\n        return \"Invalid data\", 400\n\n    action = data.get(\"Action\")\n    ticker = data.get(\"Ticker\")\n    price = data.get(\"Price\")\n\n    if action not in [\"Buy\", \"Sell\"]:\n        return \"Invalid action\", 400\n\n    # Get account balance\n    account_summary = ib.accountSummary()\n    account_balance = float(next(item.value for item in account_summary if item.tag == 'CashBalance'))\n\n    # Calculate the amount to invest (30% of account balance)\n    amount_to_invest = account_balance * 0.30\n\n    # Get the current market price for the ticker\n    contract = Stock(ticker, 'SMART', 'USD')\n    ib.qualifyContracts(contract)\n    market_data = ib.reqMktData(contract)\n    ib.sleep(1)  # Wait for market data to be received\n    current_price = market_data.last if market_data.last else price  # Use provided price if market data is not available\n\n    # Calculate the number of shares to buy/sell\n    shares = int(amount_to_invest / current_price)\n\n    # Place the order\n    if action == \"Buy\":\n        order = MarketOrder('BUY', shares)\n    else:  # action == \"Sell\"\n        order = MarketOrder('SELL', shares)\n\n    trade = ib.placeOrder(contract, order)\n    ib.sleep(1)  # Wait for the order to be processed\n\n    return f\"Order placed: {action} {shares} shares of {ticker} at {current_price}\", 200\n\nif __name__ == '__main__':\n    app.run(port=5000)\n```\n\n### Explanation:\n1. **Flask App**: The program uses Flask to create a simple web server that listens for POST requests at the `/webhook` endpoint.\n2. **Webhook Handling**: When a webhook is received, it extracts the action, ticker, and price from the JSON payload.\n3. **Account Balance**: It retrieves the account balance from Interactive Brokers and calculates 30% of it to determine how much to invest.\n4. **Market Data**: It requests the current market price for the specified ticker. If the market data is not available, it uses the price provided in the webhook.\n5. **Order Placement**: It calculates the number of shares to buy or sell based on the amount to invest and places a market order accordingly.\n6. **Run the Server**: The Flask app runs on port 5000, and you can send POST requests to `http://localhost:5000/webhook` with the appropriate JSON payload.\n\n### Note:\n- Make sure to test this code in a safe environment (like a paper trading account) before using it with real money.\n- Adjust the connection parameters (`host`, `port`, `clientId`) as necessary for your setup.\n- Ensure that your TWS or IB Gateway is configured to allow API connections.",
        "Based on the provided input, here is a Python program that integrates with Interactive Brokers to execute a sell order for the specified stock. The program will extract the necessary details from the input and place an order for 30% of the account balance.\n\n```python\nimport ib_insync as ib\n\ndef place_order(action, ticker, price, account_balance):\n    # Calculate the quantity to buy/sell (30% of account balance)\n    quantity = int(account_balance * 0.3 / price)\n\n    # Connect to Interactive Brokers\n    ib.connect('127.0.0.1', 7497, clientId=1)\n\n    # Create a contract for the stock\n    contract = ib.Stock(ticker, 'SMART', 'USD')\n\n    # Create the order based on the action\n    if action == \"Buy\":\n        order = ib.MarketOrder('BUY', quantity)\n    elif action == \"Sell\":\n        order = ib.MarketOrder('SELL', quantity)\n    else:\n        print(\"Invalid action. Please use 'Buy' or 'Sell'.\")\n        return\n\n    # Place the order\n    trade = ib.placeOrder(contract, order)\n\n    # Wait for the order to be filled\n    ib.sleep(1)\n    print(f\"Order Status: {trade.orderStatus}\")\n\n    # Disconnect from Interactive Brokers\n    ib.disconnect()\n\n# Example input\ninput_data = '{\"Action\": \"Sell\", \"Ticker\": \"TSLA\", \"Price\": 720}'\nimport json\n\n# Parse the input data\ndata = json.loads(input_data)\naction = data[\"Action\"]\nticker = data[\"Ticker\"]\nprice = data[\"Price\"]\n\n# Assume a hypothetical account balance\naccount_balance = 10000  # Example account balance\n\n# Place the order\nplace_order(action, ticker, price, account_balance)\n```\n\n### Explanation:\n1. **Imports**: The program uses the `ib_insync` library to interact with Interactive Brokers.\n2. **Function `place_order`**: This function takes the action (buy/sell), ticker symbol, price, and account balance as inputs.\n3. **Quantity Calculation**: It calculates the quantity to buy/sell based on 30% of the account balance divided by the price.\n4. **Connection**: It connects to the Interactive Brokers API.\n5. **Order Creation**: It creates a market order based on the action specified.\n6. **Order Placement**: The order is placed, and the status is printed.\n7. **Input Handling**: The program parses the input JSON string to extract the action, ticker, and price.\n8. **Account Balance**: A hypothetical account balance is used for demonstration.\n\nMake sure to have the `ib_insync` library installed and the Interactive Brokers API running to execute this program successfully."
    ],
    "input2_ans": [
        "To create a Python program that takes a webhook from TradingView and places an order on Interactive Brokers (IB), you will need to use the `ib_insync` library, which provides a convenient interface for the Interactive Brokers API. \n\nBefore you start, make sure you have the following prerequisites:\n\n1. **Interactive Brokers Account**: You need an account with Interactive Brokers and the Trader Workstation (TWS) or IB Gateway running.\n2. **Install ib_insync**: You can install the `ib_insync` library using pip:\n   ```bash\n   pip install ib_insync\n   ```\n\n3. **Enable API Access**: Ensure that API access is enabled in your TWS or IB Gateway settings.\n\nHere is a sample Python program that listens for a webhook, extracts the relevant values, and places an order with 30% of the account balance:\n\n```python\nimport json\nfrom flask import Flask, request\nfrom ib_insync import *\n\n# Initialize Flask app\napp = Flask(__name__)\n\n# Connect to Interactive Brokers\nib = IB()\nib.connect('127.0.0.1', 7497, clientId=1)  # Adjust the port and clientId as needed\n\n@app.route('/webhook', methods=['POST'])\ndef webhook():\n    data = request.get_json()\n    \n    # Extract values from the webhook\n    action = data.get(\"Action\")\n    ticker = data.get(\"Ticker\")\n    price = data.get(\"Price\")\n    \n    if action and ticker and price:\n        # Get account balance\n        account_summary = ib.accountSummary()\n        account_balance = float([item.value for item in account_summary if item.tag == 'CashBalance'][0])\n        \n        # Calculate the amount to invest (30% of account balance)\n        amount_to_invest = account_balance * 0.30\n        \n        # Calculate the number of shares to buy\n        shares_to_buy = int(amount_to_invest / price)\n        \n        if shares_to_buy > 0:\n            # Place the order\n            if action.lower() == \"buy\":\n                order = MarketOrder('BUY', shares_to_buy)\n            elif action.lower() == \"sell\":\n                order = MarketOrder('SELL', shares_to_buy)\n            else:\n                return \"Invalid action\", 400\n            \n            # Create a contract for the stock\n            contract = Stock(ticker, 'SMART', 'USD')\n            ib.qualifyContracts(contract)\n            \n            # Place the order\n            trade = ib.placeOrder(contract, order)\n            return f\"Order placed: {trade}\", 200\n        else:\n            return \"Not enough funds to buy shares\", 400\n    else:\n        return \"Invalid data\", 400\n\nif __name__ == '__main__':\n    app.run(port=5000)\n```\n\n### Explanation:\n1. **Flask App**: The program uses Flask to create a simple web server that listens for POST requests at the `/webhook` endpoint.\n2. **Webhook Handling**: When a webhook is received, it extracts the action, ticker, and price from the JSON payload.\n3. **Account Balance**: It retrieves the account balance from Interactive Brokers and calculates 30% of it.\n4. **Shares Calculation**: It calculates how many shares can be bought with the available funds.\n5. **Order Placement**: Depending on the action (Buy/Sell), it creates a market order and places it through the IB API.\n6. **Error Handling**: The program includes basic error handling for invalid data and insufficient funds.\n\n### Running the Program:\n1. Make sure your TWS or IB Gateway is running and API access is enabled.\n2. Run the Python script.\n3. Send a POST request to `http://localhost:5000/webhook` with the JSON payload.\n\n### Example POST Request:\nYou can use `curl` or Postman to send a request:\n```bash\ncurl -X POST http://localhost:5000/webhook -H \"Content-Type: application/json\" -d '{\"Action\": \"Buy\", \"Ticker\": \"GOOGL\", \"Price\": 2800}'\n```\n\n### Note:\n- Make sure to test this in a safe environment (like a paper trading account) before using it with real money.\n- Adjust the connection parameters (`host`, `port`, `clientId`) as necessary for your setup.",
        "Based on the provided input, here is a Python program that integrates with Interactive Brokers to place a buy order for the specified stock. The program will use 30% of the account balance to execute the order.\n\n```python\nimport ib_insync\nimport json\n\n# Function to place an order\ndef place_order(order_details):\n    # Connect to Interactive Brokers\n    ib = ib_insync.IB()\n    ib.connect('127.0.0.1', 7497, clientId=1)\n\n    # Extract order details from the input\n    action = order_details[\"Action\"]\n    ticker = order_details[\"Ticker\"]\n    price = order_details[\"Price\"]\n\n    # Get account balance\n    account_info = ib.accountSummary()\n    account_balance = float(account_info[0][1])  # Assuming the first entry is the total account value\n\n    # Calculate the order amount (30% of account balance)\n    order_amount = account_balance * 0.30\n\n    # Create the stock contract\n    contract = ib_insync.Stock(ticker, 'SMART', 'USD')\n\n    # Create the order\n    if action == \"Buy\":\n        order = ib_insync.MarketOrder('BUY', order_amount / price)  # Calculate the number of shares to buy\n    else:\n        print(\"Unsupported action\")\n        return\n\n    # Place the order\n    trade = ib.placeOrder(contract, order)\n\n    # Wait for the order to be filled\n    ib.sleep(1)\n    print(f\"Order Status: {trade.orderStatus}\")\n\n    # Disconnect from IB\n    ib.disconnect()\n\n# Input JSON string\ninput_json = '{\"Action\": \"Buy\", \"Ticker\": \"GOOGL\", \"Price\": 2800}'\norder_details = json.loads(input_json)\n\n# Place the order\nplace_order(order_details)\n```\n\n### Explanation:\n1. **IB Connection**: The program connects to the Interactive Brokers API using the `ib_insync` library.\n2. **Input Parsing**: It parses the input JSON to extract the action, ticker, and price.\n3. **Account Balance**: It retrieves the account balance and calculates 30% of it to determine how much to invest.\n4. **Order Creation**: It creates a market order to buy the stock based on the calculated amount.\n5. **Order Execution**: The order is placed, and the program waits for the order status to be updated.\n6. **Disconnection**: Finally, it disconnects from the Interactive Brokers API.\n\n### Note:\n- Ensure that you have the `ib_insync` library installed and that your Interactive Brokers API is set up correctly.\n- Adjust the connection parameters as needed for your specific setup."
    ]
}