{
    "title": "Python Expert code generator",
    "original_prompt": "Act as Python Programmer Expert name PyExpert. \nPyExpert can write Python code with full error handling logical like 10 years experience experts. PyExpert DO NOT write the explanation. \nPyExpert will ask for user to more detail.\nPyExpert write Python code,  error handling and unit-test\nWhen user ask PyExpert with format\nFunction: [The name of function]\nPurpose: [The description of function should do]\nExisted functions: [The existed functions PyExpert can use in new function]\nPyExpert will answer \nFunction\n```python\n[this is function code, comment, error handler]\n```\nUnit test\n```python\n[this is unit test]\n```",
    "split_prompt": "This is a prompt description:```json\n{\n    \"spliting prompt\": {\n        \"role\": [\n            \"Python Programmer Expert\",\n            \"PyExpert\"\n        ],\n        \"capabilities\": [\n            \"write Python code\",\n            \"full error handling\",\n            \"logical like 10 years experience\",\n            \"do not write explanations\",\n            \"ask for more details\",\n            \"write unit tests\"\n        ],\n        \"input_format\": [\n            \"Function: [The name of function]\",\n            \"Purpose: [The description of function should do]\",\n            \"Existed functions: [The existed functions PyExpert can use in new function]\"\n        ],\n        \"response_format\": [\n            \"Function\",\n            \"Unit test\"\n        ]\n    }\n}\n```",
    "input1": " Function: calculate_average  \nPurpose: Calculate the average of a list of numbers, handling empty lists and non-numeric values.  \nExisted functions: sum, len  \n\n",
    "input2": " Function: fetch_data  \nPurpose: Fetch data from a given URL and handle network errors, timeouts, and invalid URLs.  \nExisted functions: requests.get, json.loads  ",
    "input1_ans": [
        "Function\n```python\ndef calculate_average(numbers):\n    \"\"\"Calculate the average of a list of numbers.\"\"\"\n    try:\n        if not numbers:\n            raise ValueError(\"The list is empty. Cannot calculate average.\")\n        \n        total = sum(numbers)\n        count = len(numbers)\n        \n        if count == 0:\n            raise ValueError(\"The list must contain numeric values.\")\n        \n        average = total / count\n        return average\n    \n    except TypeError:\n        raise TypeError(\"All elements in the list must be numeric.\")\n    except Exception as e:\n        raise Exception(f\"An error occurred: {e}\")\n```\n\nUnit test\n```python\nimport unittest\n\nclass TestCalculateAverage(unittest.TestCase):\n    \n    def test_average_with_numbers(self):\n        self.assertEqual(calculate_average([1, 2, 3, 4, 5]), 3.0)\n    \n    def test_average_empty_list(self):\n        with self.assertRaises(ValueError) as context:\n            calculate_average([])\n        self.assertEqual(str(context.exception), \"The list is empty. Cannot calculate average.\")\n    \n    def test_average_with_non_numeric(self):\n        with self.assertRaises(TypeError):\n            calculate_average([1, 2, 'three', 4])\n    \n    def test_average_single_value(self):\n        self.assertEqual(calculate_average([10]), 10.0)\n\nif __name__ == '__main__':\n    unittest.main()\n```",
        "```python\ndef calculate_average(numbers):\n    if not numbers:\n        return 0  # Handle empty list\n    try:\n        total = sum(numbers)\n        count = len(numbers)\n        return total / count\n    except TypeError:\n        raise ValueError(\"List must contain only numeric values.\")\n\n# Unit test\nimport unittest\n\nclass TestCalculateAverage(unittest.TestCase):\n    def test_average_with_numbers(self):\n        self.assertEqual(calculate_average([1, 2, 3, 4, 5]), 3.0)\n\n    def test_average_with_empty_list(self):\n        self.assertEqual(calculate_average([]), 0)\n\n    def test_average_with_non_numeric_values(self):\n        with self.assertRaises(ValueError):\n            calculate_average([1, 2, 'three', 4])\n\n    def test_average_with_floats(self):\n        self.assertEqual(calculate_average([1.5, 2.5, 3.5]), 2.5)\n\nif __name__ == '__main__':\n    unittest.main()\n```"
    ],
    "input2_ans": [
        "Function\n```python\nimport requests\nimport json\n\ndef fetch_data(url):\n    \"\"\"\n    Fetch data from a given URL and handle network errors, timeouts, and invalid URLs.\n    \"\"\"\n    try:\n        response = requests.get(url, timeout=10)  # Set a timeout for the request\n        response.raise_for_status()  # Raise an error for bad responses (4xx and 5xx)\n        return json.loads(response.text)  # Parse JSON response\n    except requests.exceptions.Timeout:\n        return {\"error\": \"Request timed out.\"}\n    except requests.exceptions.RequestException as e:\n        return {\"error\": f\"Network error occurred: {str(e)}\"}\n    except json.JSONDecodeError:\n        return {\"error\": \"Failed to decode JSON from response.\"}\n    except Exception as e:\n        return {\"error\": f\"An unexpected error occurred: {str(e)}\"}\n```\n\nUnit test\n```python\nimport unittest\nfrom unittest.mock import patch\nimport requests\n\nclass TestFetchData(unittest.TestCase):\n    \n    @patch('requests.get')\n    def test_fetch_data_success(self, mock_get):\n        mock_get.return_value.status_code = 200\n        mock_get.return_value.text = '{\"key\": \"value\"}'\n        result = fetch_data(\"http://valid.url\")\n        self.assertEqual(result, {\"key\": \"value\"})\n    \n    @patch('requests.get')\n    def test_fetch_data_timeout(self, mock_get):\n        mock_get.side_effect = requests.exceptions.Timeout\n        result = fetch_data(\"http://valid.url\")\n        self.assertEqual(result, {\"error\": \"Request timed out.\"})\n    \n    @patch('requests.get')\n    def test_fetch_data_network_error(self, mock_get):\n        mock_get.side_effect = requests.exceptions.RequestException(\"Network error\")\n        result = fetch_data(\"http://valid.url\")\n        self.assertEqual(result, {\"error\": \"Network error occurred: Network error\"})\n    \n    @patch('requests.get')\n    def test_fetch_data_json_decode_error(self, mock_get):\n        mock_get.return_value.status_code = 200\n        mock_get.return_value.text = 'Invalid JSON'\n        result = fetch_data(\"http://valid.url\")\n        self.assertEqual(result, {\"error\": \"Failed to decode JSON from response.\"})\n    \n    @patch('requests.get')\n    def test_fetch_data_unexpected_error(self, mock_get):\n        mock_get.side_effect = Exception(\"Unexpected error\")\n        result = fetch_data(\"http://valid.url\")\n        self.assertEqual(result, {\"error\": \"An unexpected error occurred: Unexpected error\"})\n\nif __name__ == '__main__':\n    unittest.main()\n```",
        "```python\nimport requests\nimport json\n\ndef fetch_data(url):\n    try:\n        response = requests.get(url, timeout=10)\n        response.raise_for_status()  # Raise an error for bad responses\n        return json.loads(response.text)\n    except requests.exceptions.Timeout:\n        return {\"error\": \"Request timed out\"}\n    except requests.exceptions.RequestException as e:\n        return {\"error\": str(e)}\n    except json.JSONDecodeError:\n        return {\"error\": \"Invalid JSON response\"}\n\n# Unit test\nimport unittest\n\nclass TestFetchData(unittest.TestCase):\n    def test_valid_url(self):\n        result = fetch_data(\"https://api.github.com\")\n        self.assertIsInstance(result, dict)\n\n    def test_invalid_url(self):\n        result = fetch_data(\"invalid_url\")\n        self.assertIn(\"error\", result)\n\n    def test_timeout(self):\n        # This test may need to be adjusted based on the environment\n        result = fetch_data(\"https://httpbin.org/delay/10\")  # Delays for 10 seconds\n        self.assertIn(\"error\", result)\n\n    def test_invalid_json(self):\n        result = fetch_data(\"https://httpbin.org/status/200\")  # Returns a valid response but not JSON\n        self.assertIn(\"error\", result)\n\nif __name__ == '__main__':\n    unittest.main()\n```"
    ]
}