{
    "title": "GPT Webex teams bot",
    "original_prompt": "You are assigned to build virtual assistant bot for Webex. This virtual assistant bot will be a GPT AI powered bot that can be used in Webex Teams rooms. In this assignment, you will:\n1. Give the bot a name, username, and idea for icon. \n2. Provide the framework code for GPT AI API to connect to Webex REST API's\n3. When a user @\"botname\", they should be able to type the prompt that will then be processed by GPT AI and provide a response in Webex channel the bot is assigned to. \n4. Provide detailed instructions on how to deploy the bot. ",
    "split_prompt": "This is a prompt description:```json\n{\n    \"spliting prompt\": {\n        \"bot_details\": [\n            \"Give the bot a name\",\n            \"Give the bot a username\",\n            \"Provide an idea for the icon\"\n        ],\n        \"code_framework\": [\n            \"Provide the framework code for GPT AI API\",\n            \"Connect to Webex REST APIs\"\n        ],\n        \"user_interaction\": [\n            \"When a user @'botname', they should be able to type a prompt\",\n            \"The prompt should be processed by GPT AI\",\n            \"Provide a response in the Webex channel the bot is assigned to\"\n        ],\n        \"deployment_instructions\": [\n            \"Provide detailed instructions on how to deploy the bot\"\n        ]\n    }\n}\n```",
    "input1": " \n{\n  \"bot_name\": \"WebexGenie\",\n  \"username\": \"webex_genie_bot\",\n  \"icon_idea\": \"A friendly genie lamp with a glowing blue light\",\n  \"gpt_api_code\": \"const axios = require('axios');\\n\\nconst gptApiKey = 'YOUR_GPT_API_KEY';\\nconst webexAccessToken = 'YOUR_WEBEX_ACCESS_TOKEN';\\n\\nasync function handleUserMessage(message) {\\n    const response = await axios.post('https://api.openai.com/v1/engines/davinci-codex/completions', {\\n        prompt: message,\\n        max_tokens: 150\\n    }, {\\n        headers: {\\n            'Authorization': `Bearer ${gptApiKey}`\\n        }\\n    });\\n    return response.data.choices[0].text;\\n}\\n\\nasync function sendMessageToWebex(roomId, message) {\\n    await axios.post('https://webexapis.com/v1/messages', {\\n        roomId: roomId,\\n        text: message\\n    }, {\\n        headers: {\\n            'Authorization': `Bearer ${webexAccessToken}`\\n        }\\n    });\\n}\\n\\n// Example usage: handleUserMessage('What is the weather today?').then(response => sendMessageToWebex('ROOM_ID', response));\",\n  \"deployment_instructions\": \"1. Create a new bot in Webex Developer Portal and obtain the access token.\\n2. Set up a Node.js environment and install axios using 'npm install axios'.\\n3. Replace 'YOUR_GPT_API_KEY' and 'YOUR_WEBEX_ACCESS_TOKEN' in the code with your actual keys.\\n4. Deploy the bot on a cloud service like Heroku or AWS Lambda.\\n5. Set up a webhook in Webex to listen for messages directed to the bot.\"\n}\n\n",
    "input2": " \n{\n  \"bot_name\": \"TeamTalker\",\n  \"username\": \"team_talker_bot\",\n  \"icon_idea\": \"A speech bubble with a headset, symbolizing communication\",\n  \"gpt_api_code\": \"const express = require('express');\\nconst bodyParser = require('body-parser');\\nconst axios = require('axios');\\n\\nconst app = express();\\napp.use(bodyParser.json());\\n\\nconst gptApiKey = 'YOUR_GPT_API_KEY';\\nconst webexAccessToken = 'YOUR_WEBEX_ACCESS_TOKEN';\\n\\napp.post('/webex', async (req, res) => {\\n    const message = req.body.data.text;\\n    const roomId = req.body.data.roomId;\\n    const gptResponse = await axios.post('https://api.openai.com/v1/engines/davinci-codex/completions', {\\n        prompt: message,\\n        max_tokens: 150\\n    }, {\\n        headers: {\\n            'Authorization': `Bearer ${gptApiKey}`\\n        }\\n    });\\n    await axios.post('https://webexapis.com/v1/messages', {\\n        roomId: roomId,\\n        text: gptResponse.data.choices[0].text\\n    }, {\\n        headers: {\\n            'Authorization': `Bearer ${webexAccessToken}`\\n        }\\n    });\\n    res.sendStatus(200);\\n});\\n\\napp.listen(3000, () => {\\n    console.log('Bot is running on port 3000');\\n});\",\n  \"deployment_instructions\": \"1. Register your bot on the Webex Developer Portal and get the access token.\\n2. Install Node.js and set up a new project with 'npm init'.\\n3. Install required packages: 'npm install express body-parser axios'.\\n4. Update the bot code with your GPT API key and Webex access token.\\n5. Deploy the application on a platform like Heroku or DigitalOcean and set the webhook URL in Webex.\"\n}",
    "input1_ans": [
        "### Bot Details\n- **Bot Name**: WebexGenie\n- **Username**: webex_genie_bot\n- **Icon Idea**: A friendly genie lamp with a glowing blue light\n\n### GPT API Code\nHere\u2019s the framework code to connect the GPT AI API to the Webex REST API:\n\n```javascript\nconst axios = require('axios');\n\nconst gptApiKey = 'YOUR_GPT_API_KEY';\nconst webexAccessToken = 'YOUR_WEBEX_ACCESS_TOKEN';\n\nasync function handleUserMessage(message) {\n    const response = await axios.post('https://api.openai.com/v1/engines/davinci-codex/completions', {\n        prompt: message,\n        max_tokens: 150\n    }, {\n        headers: {\n            'Authorization': `Bearer ${gptApiKey}`\n        }\n    });\n    return response.data.choices[0].text.trim();\n}\n\nasync function sendMessageToWebex(roomId, message) {\n    await axios.post('https://webexapis.com/v1/messages', {\n        roomId: roomId,\n        text: message\n    }, {\n        headers: {\n            'Authorization': `Bearer ${webexAccessToken}`\n        }\n    });\n}\n\n// Example usage: handleUserMessage('What is the weather today?').then(response => sendMessageToWebex('ROOM_ID', response));\n```\n\n### Detailed Instructions on How to Deploy the Bot\n\n1. **Create a Webex Bot**:\n   - Go to the [Webex Developer Portal](https://developer.webex.com/).\n   - Sign in or create an account.\n   - Navigate to \"My Apps\" and click on \"Create a New App\".\n   - Choose \"Bot\" and fill in the required details (name, icon, etc.).\n   - After creating the bot, note down the **Bot Access Token** provided.\n\n2. **Set Up Node.js Environment**:\n   - Ensure you have Node.js installed on your machine. You can download it from [Node.js official website](https://nodejs.org/).\n   - Create a new directory for your bot project and navigate into it:\n     ```bash\n     mkdir webex-genie-bot\n     cd webex-genie-bot\n     ```\n   - Initialize a new Node.js project:\n     ```bash\n     npm init -y\n     ```\n   - Install the `axios` library:\n     ```bash\n     npm install axios\n     ```\n\n3. **Replace API Keys**:\n   - Open your project in a code editor and create a new file named `bot.js`.\n   - Copy the provided code into `bot.js`.\n   - Replace `YOUR_GPT_API_KEY` with your actual OpenAI GPT API key.\n   - Replace `YOUR_WEBEX_ACCESS_TOKEN` with the Bot Access Token you obtained from the Webex Developer Portal.\n\n4. **Deploy the Bot**:\n   - You can deploy your bot on a cloud service like Heroku or AWS Lambda. Here\u2019s a brief overview of deploying on Heroku:\n     - Create a Heroku account and install the Heroku CLI.\n     - Log in to Heroku using the CLI:\n       ```bash\n       heroku login\n       ```\n     - Create a new Heroku app:\n       ```bash\n       heroku create webex-genie-bot\n       ```\n     - Push your code to Heroku:\n       ```bash\n       git init\n       heroku git:remote -a webex-genie-bot\n       git add .\n       git commit -m \"Initial commit\"\n       git push heroku master\n       ```\n\n5. **Set Up Webhook in Webex**:\n   - In the Webex Developer Portal, navigate to your bot settings.\n   - Set up a webhook to listen for messages directed to your bot:\n     - Use the following endpoint for the webhook: `https://<your-heroku-app-name>.herokuapp.com/webhook`.\n     - Make sure to handle incoming messages in your bot code to call `handleUserMessage` and `sendMessageToWebex`.\n\n6. **Testing the Bot**:\n   - Go to a Webex Teams room where your bot is added.\n   - Type `@webex_genie_bot` followed by your question or prompt.\n   - The bot should respond with the generated answer from the GPT API.\n\n### Note\nMake sure to handle errors and edge cases in your bot code for a better user experience. You may also want to implement logging to track interactions and issues.",
        "```json\n{\n    \"bot_details\": {\n        \"bot_name\": \"WebexGenie\",\n        \"username\": \"webex_genie_bot\",\n        \"icon_idea\": \"A friendly genie lamp with a glowing blue light\"\n    },\n    \"code_framework\": {\n        \"gpt_api_code\": \"const axios = require('axios');\\n\\nconst gptApiKey = 'YOUR_GPT_API_KEY';\\nconst webexAccessToken = 'YOUR_WEBEX_ACCESS_TOKEN';\\n\\nasync function handleUserMessage(message) {\\n    const response = await axios.post('https://api.openai.com/v1/engines/davinci-codex/completions', {\\n        prompt: message,\\n        max_tokens: 150\\n    }, {\\n        headers: {\\n            'Authorization': `Bearer ${gptApiKey}`\\n        }\\n    });\\n    return response.data.choices[0].text;\\n}\\n\\nasync function sendMessageToWebex(roomId, message) {\\n    await axios.post('https://webexapis.com/v1/messages', {\\n        roomId: roomId,\\n        text: message\\n    }, {\\n        headers: {\\n            'Authorization': `Bearer ${webexAccessToken}`\\n        }\\n    });\\n}\\n\\n// Example usage: handleUserMessage('What is the weather today?').then(response => sendMessageToWebex('ROOM_ID', response));\"\n    },\n    \"user_interaction\": {\n        \"interaction_flow\": [\n            \"When a user @'WebexGenie', they should be able to type a prompt.\",\n            \"The prompt should be processed by GPT AI.\",\n            \"Provide a response in the Webex channel the bot is assigned to.\"\n        ]\n    },\n    \"deployment_instructions\": \"1. Create a new bot in Webex Developer Portal and obtain the access token.\\n2. Set up a Node.js environment and install axios using 'npm install axios'.\\n3. Replace 'YOUR_GPT_API_KEY' and 'YOUR_WEBEX_ACCESS_TOKEN' in the code with your actual keys.\\n4. Deploy the bot on a cloud service like Heroku or AWS Lambda.\\n5. Set up a webhook in Webex to listen for messages directed to the bot.\"\n}\n```"
    ],
    "input2_ans": [
        "### Bot Details\n- **Bot Name**: TeamTalker\n- **Username**: team_talker_bot\n- **Icon Idea**: A speech bubble with a headset, symbolizing communication.\n\n### Framework Code for GPT AI API to Connect to Webex REST API\n\n```javascript\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst axios = require('axios');\n\nconst app = express();\napp.use(bodyParser.json());\n\nconst gptApiKey = 'YOUR_GPT_API_KEY'; // Replace with your GPT API key\nconst webexAccessToken = 'YOUR_WEBEX_ACCESS_TOKEN'; // Replace with your Webex access token\n\napp.post('/webex', async (req, res) => {\n    const message = req.body.data.text;\n    const roomId = req.body.data.roomId;\n\n    // Check if the message mentions the bot\n    if (message.includes('@team_talker_bot')) {\n        const prompt = message.replace('@team_talker_bot', '').trim();\n\n        try {\n            const gptResponse = await axios.post('https://api.openai.com/v1/engines/davinci-codex/completions', {\n                prompt: prompt,\n                max_tokens: 150\n            }, {\n                headers: {\n                    'Authorization': `Bearer ${gptApiKey}`\n                }\n            });\n\n            await axios.post('https://webexapis.com/v1/messages', {\n                roomId: roomId,\n                text: gptResponse.data.choices[0].text\n            }, {\n                headers: {\n                    'Authorization': `Bearer ${webexAccessToken}`\n                }\n            });\n        } catch (error) {\n            console.error('Error communicating with APIs:', error);\n        }\n    }\n    \n    res.sendStatus(200);\n});\n\napp.listen(3000, () => {\n    console.log('Bot is running on port 3000');\n});\n```\n\n### Detailed Instructions on How to Deploy the Bot\n\n1. **Register Your Bot**:\n   - Go to the [Webex Developer Portal](https://developer.webex.com/).\n   - Create a new bot and obtain the access token. This token will be used to authenticate your bot with the Webex API.\n\n2. **Set Up Your Development Environment**:\n   - Install [Node.js](https://nodejs.org/) if you haven't already.\n   - Create a new directory for your project and navigate into it:\n     ```bash\n     mkdir team_talker_bot\n     cd team_talker_bot\n     ```\n   - Initialize a new Node.js project:\n     ```bash\n     npm init -y\n     ```\n\n3. **Install Required Packages**:\n   - Install the necessary packages using npm:\n     ```bash\n     npm install express body-parser axios\n     ```\n\n4. **Update the Bot Code**:\n   - Create a new file named `bot.js` and copy the provided code into it.\n   - Replace `YOUR_GPT_API_KEY` with your actual GPT API key.\n   - Replace `YOUR_WEBEX_ACCESS_TOKEN` with your actual Webex access token.\n\n5. **Deploy the Application**:\n   - You can deploy your bot on platforms like [Heroku](https://www.heroku.com/) or [DigitalOcean](https://www.digitalocean.com/). Below are the steps for deploying on Heroku:\n     - Install the [Heroku CLI](https://devcenter.heroku.com/articles/heroku-cli).\n     - Log in to your Heroku account:\n       ```bash\n       heroku login\n       ```\n     - Create a new Heroku app:\n       ```bash\n       heroku create team-talker-bot\n       ```\n     - Push your code to Heroku:\n       ```bash\n       git init\n       git add .\n       git commit -m \"Initial commit\"\n       git push heroku master\n       ```\n     - Set the webhook URL in Webex to point to your Heroku app:\n       ```bash\n       heroku open\n       ```\n     - Use the URL provided by Heroku (e.g., `https://your-app-name.herokuapp.com/webex`) as the webhook URL in the Webex Developer Portal.\n\n6. **Test Your Bot**:\n   - Go to a Webex Teams room where your bot is added.\n   - Type a message mentioning the bot (e.g., `@team_talker_bot Hello!`).\n   - The bot should respond with a generated message from the GPT API.\n\n### Note\nMake sure to handle any errors and edge cases in your code for a more robust bot experience. You may also want to implement logging for better debugging and monitoring of your bot's performance.",
        "Here\u2019s a structured overview of the bot you are creating, \"TeamTalker\":\n\n### Bot Details\n- **Name**: TeamTalker\n- **Username**: team_talker_bot\n- **Icon Idea**: A speech bubble with a headset, symbolizing communication.\n\n### Code Framework\n```javascript\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst axios = require('axios');\n\nconst app = express();\napp.use(bodyParser.json());\n\nconst gptApiKey = 'YOUR_GPT_API_KEY';\nconst webexAccessToken = 'YOUR_WEBEX_ACCESS_TOKEN';\n\napp.post('/webex', async (req, res) => {\n    const message = req.body.data.text;\n    const roomId = req.body.data.roomId;\n    \n    const gptResponse = await axios.post('https://api.openai.com/v1/engines/davinci-codex/completions', {\n        prompt: message,\n        max_tokens: 150\n    }, {\n        headers: {\n            'Authorization': `Bearer ${gptApiKey}`\n        }\n    });\n    \n    await axios.post('https://webexapis.com/v1/messages', {\n        roomId: roomId,\n        text: gptResponse.data.choices[0].text\n    }, {\n        headers: {\n            'Authorization': `Bearer ${webexAccessToken}`\n        }\n    });\n    \n    res.sendStatus(200);\n});\n\napp.listen(3000, () => {\n    console.log('Bot is running on port 3000');\n});\n```\n\n### User Interaction\n1. When a user @'TeamTalker', they can type a prompt.\n2. The prompt will be processed by the GPT AI.\n3. The bot will provide a response in the Webex channel it is assigned to.\n\n### Deployment Instructions\n1. Register your bot on the Webex Developer Portal and obtain the access token.\n2. Install Node.js and set up a new project with `npm init`.\n3. Install required packages: `npm install express body-parser axios`.\n4. Update the bot code with your GPT API key and Webex access token.\n5. Deploy the application on a platform like Heroku or DigitalOcean and set the webhook URL in Webex.\n\nThis setup will allow your bot to interact with users in Webex, processing their messages through the GPT API and responding accordingly."
    ]
}