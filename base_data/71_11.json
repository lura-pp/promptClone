{
    "title": "Break down all the prompts into task definitions.",
    "original_prompt": "Hi ChatGPT, I would like you to act as my helpful, witty and entertaining Wiki Technical Writer.  \nYou are specialized in Azure Devops Wikis, and able to format the wiki appropriately for Azure Devops by using references such https://learn.microsoft.com/en-us/azure/devops/project/wiki/markdown-guidance?view=azure-devops and any other relevant documentation.\nI will provide you with information and facts that should be part of the Azure Devops Wiki. \nDo not generate any Wiki content until I provide the information.\nBreak down all the prompt into task definitions. \n\n\n",
    "split_prompt": "This is a prompt description:```json\n{\n    \"spliting prompt\": {\n        \"role\": [\n            \"helpful Wiki Technical Writer\",\n            \"witty Wiki Technical Writer\",\n            \"entertaining Wiki Technical Writer\"\n        ],\n        \"specialization\": [\n            \"Azure DevOps Wikis\"\n        ],\n        \"task\": [\n            \"format the wiki appropriately for Azure DevOps\",\n            \"use references such as https://learn.microsoft.com/en-us/azure/devops/project/wiki/markdown-guidance?view=azure-devops\",\n            \"use any other relevant documentation\"\n        ],\n        \"input\": [\n            \"information and facts provided by the user\"\n        ],\n        \"output\": [\n            \"do not generate any Wiki content until information is provided\"\n        ]\n    }\n}\n```",
    "input1": " \"I need to document the process of setting up CI/CD pipelines in Azure DevOps. This includes creating a new project, configuring build and release pipelines, and integrating with GitHub for source control. Additionally, I want to include best practices for managing secrets and environment variables, as well as troubleshooting common issues that may arise during the setup.\"\n\n",
    "input2": " \"I'm looking to create a comprehensive guide on using Azure DevOps Boards for agile project management. This should cover creating and managing work items, setting up sprints, utilizing backlogs, and generating reports. I also want to highlight the integration with Azure Repos and how to effectively use tags and queries to enhance team collaboration and visibility.\"",
    "input1_ans": [
        "Great! Let's break down your request into specific tasks to ensure we cover all aspects of documenting the CI/CD pipeline setup in Azure DevOps effectively. Here are the tasks:\n\n### Task Definitions\n\n1. **Introduction Section**\n   - Write an introductory paragraph explaining the purpose of the document and the importance of CI/CD pipelines in Azure DevOps.\n\n2. **Creating a New Project**\n   - Document the steps to create a new project in Azure DevOps.\n   - Include screenshots or code snippets if applicable.\n\n3. **Configuring Build Pipelines**\n   - Outline the steps to configure build pipelines.\n   - Include details on selecting the appropriate build agent, defining build triggers, and adding tasks to the pipeline.\n\n4. **Configuring Release Pipelines**\n   - Describe the process of setting up release pipelines.\n   - Explain how to link build artifacts to release pipelines and configure deployment stages.\n\n5. **Integrating with GitHub**\n   - Provide instructions on how to integrate Azure DevOps with GitHub for source control.\n   - Include steps for setting up a service connection and configuring webhooks if necessary.\n\n6. **Managing Secrets and Environment Variables**\n   - Document best practices for managing secrets and environment variables in Azure DevOps.\n   - Include information on using Azure Key Vault and pipeline variables.\n\n7. **Troubleshooting Common Issues**\n   - List common issues that may arise during the setup of CI/CD pipelines.\n   - Provide troubleshooting tips and solutions for each issue.\n\n8. **Conclusion Section**\n   - Write a concluding paragraph summarizing the key points and encouraging best practices in CI/CD pipeline management.\n\n9. **References and Further Reading**\n   - Include links to relevant Azure DevOps documentation and resources for further reading.\n\nOnce you provide the specific information or details for each of these tasks, I can help you format and compile them into a well-structured Azure DevOps Wiki page!",
        "Great! Let's break down the information you've provided into a structured format suitable for an Azure DevOps Wiki. Here\u2019s how we can organize the content:\n\n### Setting Up CI/CD Pipelines in Azure DevOps\n\n#### 1. Introduction\nProvide a brief overview of CI/CD and its importance in modern software development.\n\n#### 2. Creating a New Project\n- **Step 1:** Navigate to Azure DevOps.\n- **Step 2:** Click on \"New Project.\"\n- **Step 3:** Fill in the project details (name, description, visibility).\n- **Step 4:** Click \"Create.\"\n\n#### 3. Configuring Build Pipelines\n- **Step 1:** Go to the \"Pipelines\" section.\n- **Step 2:** Click on \"New Pipeline.\"\n- **Step 3:** Select the source where your code is hosted (e.g., GitHub).\n- **Step 4:** Choose a template or configure your pipeline using YAML.\n- **Step 5:** Define the build steps (install dependencies, run tests, etc.).\n- **Step 6:** Save and run the pipeline.\n\n#### 4. Configuring Release Pipelines\n- **Step 1:** Navigate to the \"Releases\" section under Pipelines.\n- **Step 2:** Click on \"New Release Pipeline.\"\n- **Step 3:** Select the build artifact from the previous step.\n- **Step 4:** Define the stages (e.g., Development, Staging, Production).\n- **Step 5:** Configure deployment tasks for each stage.\n- **Step 6:** Save and create a release.\n\n#### 5. Integrating with GitHub\n- **Step 1:** Go to Project Settings.\n- **Step 2:** Under \"Repositories,\" select \"GitHub Connections.\"\n- **Step 3:** Authorize Azure DevOps to access your GitHub account.\n- **Step 4:** Link your GitHub repository to the Azure DevOps project.\n\n#### 6. Best Practices for Managing Secrets and Environment Variables\n- Use Azure Key Vault to store sensitive information.\n- Define environment variables in the pipeline settings.\n- Avoid hardcoding secrets in your code or pipeline files.\n\n#### 7. Troubleshooting Common Issues\n- **Issue 1:** Build fails due to missing dependencies.\n  - **Solution:** Ensure all dependencies are defined in your pipeline.\n- **Issue 2:** Deployment fails due to incorrect permissions.\n  - **Solution:** Check the service connection and permissions for the target environment.\n- **Issue 3:** Pipeline not triggering on GitHub commits.\n  - **Solution:** Verify the webhook settings in GitHub.\n\n#### 8. References\n- [Azure DevOps Markdown Guidance](https://learn.microsoft.com/en-us/azure/devops/project/wiki/markdown-guidance?view=azure-devops)\n- [Azure DevOps CI/CD Documentation](https://learn.microsoft.com/en-us/azure/devops/pipelines/?view=azure-devops)\n\n---\n\nThis structure provides a comprehensive guide for setting up CI/CD pipelines in Azure DevOps. If you have any specific details or additional information you'd like to include, please share, and I can help refine the content further!"
    ],
    "input2_ans": [
        "Great! Let's break down your request into specific tasks to create a comprehensive guide on using Azure DevOps Boards for agile project management. Here are the tasks we'll need to complete:\n\n### Task Definitions:\n\n1. **Introduction Section**:\n   - Write an engaging introduction that outlines the purpose of the guide and the importance of Azure DevOps Boards in agile project management.\n\n2. **Creating and Managing Work Items**:\n   - Detail the steps for creating different types of work items (e.g., user stories, tasks, bugs).\n   - Explain how to manage work items, including editing, assigning, and updating statuses.\n\n3. **Setting Up Sprints**:\n   - Provide instructions on how to create and manage sprints within Azure DevOps.\n   - Include tips on sprint planning and how to effectively allocate work items to sprints.\n\n4. **Utilizing Backlogs**:\n   - Explain how to set up and manage backlogs, including product backlogs and sprint backlogs.\n   - Discuss prioritization techniques and how to groom the backlog.\n\n5. **Generating Reports**:\n   - Outline the different types of reports available in Azure DevOps Boards.\n   - Provide guidance on how to generate and interpret these reports for project tracking and decision-making.\n\n6. **Integration with Azure Repos**:\n   - Highlight how Azure DevOps Boards integrates with Azure Repos.\n   - Discuss the benefits of linking work items to code changes and pull requests.\n\n7. **Using Tags and Queries**:\n   - Explain how to create and manage tags for work items to enhance organization and visibility.\n   - Provide instructions on how to create and use queries to filter and find work items effectively.\n\n8. **Conclusion Section**:\n   - Summarize the key points covered in the guide.\n   - Encourage readers to explore Azure DevOps Boards further and provide links to additional resources.\n\n9. **Formatting and Markdown**:\n   - Ensure that all sections are formatted appropriately using Markdown for Azure DevOps, including headings, lists, code snippets, and links.\n\nOnce you provide the specific information and facts for each section, I can help you craft the content for your Azure DevOps Wiki!",
        "Great! I can help you format a comprehensive guide on using Azure DevOps Boards for agile project management. Here\u2019s a structured outline based on the information you provided. Once you confirm or provide additional details, I can help you fill in the sections.\n\n### Comprehensive Guide to Azure DevOps Boards for Agile Project Management\n\n#### Introduction\n- Brief overview of Azure DevOps Boards\n- Importance of agile project management\n\n#### 1. Creating and Managing Work Items\n- **What are Work Items?**\n  - Definition and types (User Stories, Tasks, Bugs, etc.)\n- **Creating Work Items**\n  - Step-by-step guide on creating work items\n  - Best practices for writing effective work items\n- **Managing Work Items**\n  - Editing, assigning, and prioritizing work items\n  - Linking work items for better traceability\n\n#### 2. Setting Up Sprints\n- **Understanding Sprints**\n  - Definition and purpose of sprints in agile methodology\n- **Creating Sprints**\n  - How to create and configure sprints in Azure DevOps\n- **Managing Sprint Backlogs**\n  - Adding work items to the sprint backlog\n  - Monitoring sprint progress\n\n#### 3. Utilizing Backlogs\n- **What is a Backlog?**\n  - Explanation of product and sprint backlogs\n- **Managing Backlogs**\n  - How to prioritize and organize backlogs\n  - Using the backlog view for better visibility\n\n#### 4. Generating Reports\n- **Importance of Reporting**\n  - Why reports are crucial for agile teams\n- **Types of Reports Available**\n  - Overview of built-in reports in Azure DevOps\n- **Creating Custom Reports**\n  - Step-by-step guide to creating custom reports\n\n#### 5. Integration with Azure Repos\n- **What is Azure Repos?**\n  - Overview of Azure Repos and its features\n- **Integrating Boards with Repos**\n  - How to link work items to code changes\n  - Benefits of integration for team collaboration\n\n#### 6. Using Tags and Queries\n- **What are Tags?**\n  - Explanation of tags and their purpose\n- **Creating and Managing Tags**\n  - How to create and apply tags to work items\n- **Using Queries for Enhanced Visibility**\n  - How to create and use queries to filter work items\n  - Examples of useful queries for teams\n\n#### Conclusion\n- Recap of the benefits of using Azure DevOps Boards for agile project management\n- Encouragement to explore and utilize the features discussed\n\n### References\n- [Azure DevOps Markdown Guidance](https://learn.microsoft.com/en-us/azure/devops/project/wiki/markdown-guidance?view=azure-devops)\n- Additional relevant documentation links\n\n---\n\nPlease let me know if you would like to add more details to any section or if you have specific information you'd like to include!"
    ]
}