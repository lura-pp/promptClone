{
    "title": "Super Actionable Study Plan",
    "original_prompt": "Act as a coding tutor that creates actionable study plans to help people learn to code. You will be given the learning goals, time commitment of the students, and resources preferences. You will create a study plan with timelines and links to resources. Only include relevant and popular resources. My first question:\" I want to become a data scientist but I do not know how to code in Python. I can spend 10 hours a week learning and prefers video resources.  Create a study plan for me to learn Python for data science. ",
    "split_prompt": "This is a prompt description:```json\n{\n    \"spliting prompt\": {\n        \"learning_goal\": [\n            \"Become a data scientist\",\n            \"Learn Python for data science\"\n        ],\n        \"time_commitment\": [\n            \"10 hours a week\"\n        ],\n        \"resources_preferences\": [\n            \"Video resources\"\n        ]\n    }\n}\n```",
    "input1": " I want to become a web developer but I have no prior coding experience. I can dedicate 15 hours a week to learning and I prefer interactive coding platforms. Create a study plan for me to learn HTML, CSS, and JavaScript for web development.\n\n",
    "input2": " I aim to become a mobile app developer but I only know basic programming concepts. I can invest 8 hours a week in learning and I prefer reading books and articles. Create a study plan for me to learn Swift for iOS app development.",
    "input1_ans": [
        "Great! Here\u2019s a structured study plan to help you learn HTML, CSS, and JavaScript for web development. This plan spans over 8 weeks, with a commitment of 15 hours per week. The resources are interactive coding platforms that will help you learn effectively.\n\n### Week 1: Introduction to HTML\n- **Goal**: Understand the basics of HTML and create simple web pages.\n- **Time Commitment**: 15 hours\n- **Resources**:\n  - [freeCodeCamp - Responsive Web Design Certification](https://www.freecodecamp.org/learn/responsive-web-design/)\n    - Complete the first 5 lessons on HTML.\n  - [Codecademy - Learn HTML](https://www.codecademy.com/learn/learn-html)\n    - Complete the HTML course (approx. 10 hours).\n\n### Week 2: Advanced HTML & Introduction to CSS\n- **Goal**: Learn advanced HTML elements and start with CSS.\n- **Time Commitment**: 15 hours\n- **Resources**:\n  - Continue with [freeCodeCamp - Responsive Web Design Certification](https://www.freecodecamp.org/learn/responsive-web-design/)\n    - Complete the next 5 lessons on HTML and start CSS.\n  - [Codecademy - Learn CSS](https://www.codecademy.com/learn/learn-css)\n    - Complete the CSS course (approx. 10 hours).\n\n### Week 3: Advanced CSS\n- **Goal**: Master CSS for styling web pages.\n- **Time Commitment**: 15 hours\n- **Resources**:\n  - Continue with [freeCodeCamp - Responsive Web Design Certification](https://www.freecodecamp.org/learn/responsive-web-design/)\n    - Complete the remaining lessons on CSS.\n  - [CSS Tricks - A Complete Guide to Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)\n    - Read and practice Flexbox (approx. 2 hours).\n\n### Week 4: Introduction to JavaScript\n- **Goal**: Understand the basics of JavaScript and how it interacts with HTML/CSS.\n- **Time Commitment**: 15 hours\n- **Resources**:\n  - [freeCodeCamp - JavaScript Algorithms and Data Structures Certification](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/)\n    - Complete the first 5 lessons on JavaScript.\n  - [Codecademy - Learn JavaScript](https://www.codecademy.com/learn/introduction-to-javascript)\n    - Complete the JavaScript course (approx. 10 hours).\n\n### Week 5: Advanced JavaScript\n- **Goal**: Dive deeper into JavaScript concepts.\n- **Time Commitment**: 15 hours\n- **Resources**:\n  - Continue with [freeCodeCamp - JavaScript Algorithms and Data Structures Certification](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/)\n    - Complete the next 5 lessons on JavaScript.\n  - [JavaScript.info - The Modern JavaScript Tutorial](https://javascript.info/)\n    - Read and practice the first few chapters (approx. 5 hours).\n\n### Week 6: DOM Manipulation and Events\n- **Goal**: Learn how to manipulate the DOM and handle events.\n- **Time Commitment**: 15 hours\n- **Resources**:\n  - [freeCodeCamp - JavaScript Algorithms and Data Structures Certification](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/)\n    - Complete lessons on DOM manipulation.\n  - [Codecademy - Learn the DOM](https://www.codecademy.com/courses/learn-the-dom)\n    - Complete the course (approx. 5 hours).\n\n### Week 7: Building Projects\n- **Goal**: Apply your knowledge by building small projects.\n- **Time Commitment**: 15 hours\n- **Resources**:\n  - [freeCodeCamp - Build a Tribute Page](https://www.freecodecamp.org/learn/responsive-web-design/responsive-web-design-projects/build-a-tribute-page)\n  - [freeCodeCamp - Build a Survey Form](https://www.freecodecamp.org/learn/responsive-web-design/responsive-web-design-projects/build-a-survey-form)\n  - [freeCodeCamp - Build a Product Landing Page](https://www.freecodecamp.org/learn/responsive-web-design/responsive-web-design-projects/build-a-product-landing-page)\n\n### Week 8: Final Project and Review\n- **Goal**: Create a final project that incorporates HTML, CSS, and JavaScript.\n- **Time Commitment**: 15 hours\n- **Resources**:\n  - Choose a project idea (e.g., personal portfolio, simple game, or interactive web app).\n  - Use [freeCodeCamp - Build a Personal Portfolio](https://www.freecodecamp.org/learn/responsive-web-design/responsive-web-design-projects/build-a-personal-portfolio-webpage) as a guide.\n  - Review all concepts learned and refine your projects.\n\n### Additional Resources:\n- [W3Schools](https://www.w3schools.com/) for quick references and examples.\n- [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web) for in-depth documentation.\n\n### Tips:\n- Dedicate specific hours each week to learning and practicing.\n- Join online communities (like Stack Overflow or Reddit) to ask questions and share your progress.\n- Build a portfolio of your projects to showcase your skills.\n\nGood luck on your journey to becoming a web developer!",
        "Here's a structured study plan to help you become a web developer, focusing on HTML, CSS, and JavaScript. This plan is designed for 15 hours a week and emphasizes interactive coding platforms.\n\n### Study Plan Overview\n\n**Duration:** 12 weeks  \n**Weekly Commitment:** 15 hours  \n**Total Hours:** 180 hours  \n\n### Week 1-3: HTML Basics\n\n**Goal:** Understand the structure of web pages and how to create them using HTML.\n\n- **Week 1: Introduction to HTML (15 hours)**\n  - **Interactive Platform:** Codecademy - HTML Course\n  - **Topics to Cover:**\n    - Basic HTML structure\n    - Elements and tags\n    - Headings, paragraphs, links, and images\n    - Lists and tables\n  - **Practice:** Build a simple personal webpage.\n\n- **Week 2: Advanced HTML (15 hours)**\n  - **Interactive Platform:** freeCodeCamp - Responsive Web Design Certification\n  - **Topics to Cover:**\n    - Forms and input elements\n    - Semantic HTML\n    - Accessibility best practices\n  - **Practice:** Create a contact form and a blog post layout.\n\n- **Week 3: Project Week (15 hours)**\n  - **Project:** Build a multi-page website using HTML.\n  - **Focus:** Implement what you've learned, including navigation and links between pages.\n\n### Week 4-6: CSS Basics\n\n**Goal:** Learn how to style web pages using CSS.\n\n- **Week 4: Introduction to CSS (15 hours)**\n  - **Interactive Platform:** Codecademy - CSS Course\n  - **Topics to Cover:**\n    - CSS syntax and selectors\n    - Colors, fonts, and text styling\n    - Box model and layout basics\n  - **Practice:** Style the personal webpage created in Week 1.\n\n- **Week 5: Advanced CSS (15 hours)**\n  - **Interactive Platform:** freeCodeCamp - Responsive Web Design Certification\n  - **Topics to Cover:**\n    - Flexbox and Grid layout\n    - Responsive design principles\n    - Media queries\n  - **Practice:** Make the multi-page website responsive.\n\n- **Week 6: Project Week (15 hours)**\n  - **Project:** Create a styled landing page for a fictional product.\n  - **Focus:** Use advanced CSS techniques and ensure responsiveness.\n\n### Week 7-9: JavaScript Basics\n\n**Goal:** Understand the fundamentals of JavaScript and how to make web pages interactive.\n\n- **Week 7: Introduction to JavaScript (15 hours)**\n  - **Interactive Platform:** Codecademy - JavaScript Course\n  - **Topics to Cover:**\n    - Variables, data types, and operators\n    - Control structures (if statements, loops)\n    - Functions and scope\n  - **Practice:** Write simple scripts to manipulate HTML elements.\n\n- **Week 8: Advanced JavaScript (15 hours)**\n  - **Interactive Platform:** freeCodeCamp - JavaScript Algorithms and Data Structures Certification\n  - **Topics to Cover:**\n    - Arrays and objects\n    - DOM manipulation\n    - Event handling\n  - **Practice:** Create interactive features for the landing page.\n\n- **Week 9: Project Week (15 hours)**\n  - **Project:** Build a simple interactive web application (e.g., a to-do list).\n  - **Focus:** Implement JavaScript functionality and DOM manipulation.\n\n### Week 10-12: Final Projects and Review\n\n**Goal:** Consolidate your knowledge and build a portfolio.\n\n- **Week 10: Final Project Planning (15 hours)**\n  - **Project:** Plan a comprehensive web application (e.g., a personal portfolio site).\n  - **Focus:** Outline features, design, and technologies to use.\n\n- **Week 11: Build Final Project (15 hours)**\n  - **Implementation:** Start building the portfolio site using HTML, CSS, and JavaScript.\n  - **Focus:** Ensure responsiveness and interactivity.\n\n- **Week 12: Final Project Completion and Review (15 hours)**\n  - **Complete the project:** Polish the portfolio site, add content, and test functionality.\n  - **Review:** Go over all topics learned, revisit challenging areas, and prepare for future learning.\n\n### Additional Resources\n- **Interactive Platforms:** \n  - Codecademy\n  - freeCodeCamp\n  - Scrimba\n- **Documentation:** \n  - MDN Web Docs (for HTML, CSS, and JavaScript reference)\n- **Community:** \n  - Join forums like Stack Overflow or Reddit\u2019s webdev community for support and networking.\n\n### Conclusion\nBy following this study plan, you will build a solid foundation in web development. Remember to practice consistently, seek help when needed, and continuously work on projects to enhance your skills. Good luck on your journey to becoming a web developer!"
    ],
    "input2_ans": [
        "Great! Here\u2019s a structured study plan to help you learn Swift for iOS app development, considering your background in basic programming concepts, your time commitment of 8 hours a week, and your preference for reading books and articles.\n\n### Study Plan for Learning Swift for iOS App Development\n\n#### **Week 1-2: Introduction to Swift**\n- **Goal:** Understand the basics of Swift programming language.\n- **Time Commitment:** 8 hours/week\n\n1. **Read:**\n   - **Book:** \"Swift Programming: The Big Nerd Ranch Guide\" (Chapters 1-3)\n     - Focus on basic syntax, variables, constants, and data types.\n   - **Article:** [Swift.org - The Swift Programming Language](https://docs.swift.org/swift-book/)\n\n2. **Practice:**\n   - Use [Swift Playgrounds](https://www.apple.com/swift/playgrounds/) to practice basic concepts interactively.\n\n#### **Week 3-4: Intermediate Swift Concepts**\n- **Goal:** Learn about control flow, functions, and collections.\n- **Time Commitment:** 8 hours/week\n\n1. **Read:**\n   - **Book:** \"Swift Programming: The Big Nerd Ranch Guide\" (Chapters 4-6)\n     - Focus on control flow (if, switch), functions, and arrays/dictionaries.\n   - **Article:** [Hacking with Swift - Swift Basics](https://www.hackingwithswift.com/100/swift-basics)\n\n2. **Practice:**\n   - Solve problems on [LeetCode](https://leetcode.com/) or [HackerRank](https://www.hackerrank.com/domains/tutorials/10-days-of-swift) using Swift.\n\n#### **Week 5-6: Object-Oriented Programming in Swift**\n- **Goal:** Understand classes, structures, and protocols.\n- **Time Commitment:** 8 hours/week\n\n1. **Read:**\n   - **Book:** \"Swift Programming: The Big Nerd Ranch Guide\" (Chapters 7-9)\n     - Focus on classes, structures, inheritance, and protocols.\n   - **Article:** [Ray Wenderlich - Swift Object-Oriented Programming](https://www.raywenderlich.com/2020-swift-object-oriented-programming)\n\n2. **Practice:**\n   - Create simple classes and structures in Swift Playgrounds.\n\n#### **Week 7-8: Introduction to iOS Development**\n- **Goal:** Get familiar with Xcode and the basics of iOS app development.\n- **Time Commitment:** 8 hours/week\n\n1. **Read:**\n   - **Book:** \"iOS Programming: The Big Nerd Ranch Guide\" (Chapters 1-3)\n     - Focus on setting up Xcode, creating a simple app, and understanding the app lifecycle.\n   - **Article:** [Apple Developer Documentation - Getting Started with iOS](https://developer.apple.com/documentation/uikit/getting_started_with_ios)\n\n2. **Practice:**\n   - Build a simple \"Hello World\" app in Xcode.\n\n#### **Week 9-10: Building Your First App**\n- **Goal:** Create a simple iOS app using Swift.\n- **Time Commitment:** 8 hours/week\n\n1. **Read:**\n   - **Book:** \"iOS Programming: The Big Nerd Ranch Guide\" (Chapters 4-6)\n     - Focus on UI elements, layout, and user interaction.\n   - **Article:** [Hacking with Swift - Building Your First iOS App](https://www.hackingwithswift.com/read/whats-new-in-swiftui)\n\n2. **Practice:**\n   - Build a simple app (e.g., a to-do list or a weather app) using the concepts learned.\n\n#### **Week 11-12: Advanced iOS Concepts**\n- **Goal:** Learn about networking, data persistence, and app design patterns.\n- **Time Commitment:** 8 hours/week\n\n1. **Read:**\n   - **Book:** \"iOS Programming: The Big Nerd Ranch Guide\" (Chapters 7-9)\n     - Focus on networking, Core Data, and MVC design pattern.\n   - **Article:** [Ray Wenderlich - Networking in Swift](https://www.raywenderlich.com/2020-ios-networking)\n\n2. **Practice:**\n   - Enhance your previous app by adding networking capabilities (e.g., fetching data from an API).\n\n### Additional Resources\n- **Online Articles:**\n  - [Swift by Sundell](https://www.swiftbysundell.com/)\n  - [NSHipster](https://nshipster.com/)\n\n- **Communities:**\n  - Join forums like [Stack Overflow](https://stackoverflow.com/) and [iOS Developer Slack](https://ios-developers.io/) for support and networking.\n\n### Conclusion\nThis study plan spans approximately 12 weeks, allowing you to build a solid foundation in Swift and iOS app development. Adjust the pace as needed, and don\u2019t hesitate to revisit concepts that you find challenging. Happy coding!",
        "Here's a structured study plan to help you become a mobile app developer focusing on Swift for iOS app development. This plan is designed for an 8-hour weekly commitment and emphasizes reading books and articles.\n\n### Study Plan for Learning Swift and iOS App Development\n\n#### Week 1-2: Introduction to Swift\n- **Goal**: Understand the basics of Swift programming language.\n- **Resources**:\n  - Book: \"Swift Programming: The Big Nerd Ranch Guide\" (Chapters 1-3)\n  - Online Articles: \n    - \"The Basics of Swift\" (search for reputable blogs or websites)\n    - Swift.org documentation for basic syntax and concepts.\n- **Activities**:\n  - Read and take notes on key concepts (variables, constants, data types, control flow).\n  - Complete exercises at the end of each chapter.\n\n#### Week 3-4: Intermediate Swift Concepts\n- **Goal**: Learn about functions, closures, and object-oriented programming in Swift.\n- **Resources**:\n  - Continue with \"Swift Programming: The Big Nerd Ranch Guide\" (Chapters 4-6)\n  - Online Articles: \n    - \"Understanding Closures in Swift\"\n    - \"Object-Oriented Programming in Swift\"\n- **Activities**:\n  - Implement small projects or exercises focusing on functions and classes.\n  - Write simple programs to practice closures and object-oriented principles.\n\n#### Week 5-6: Introduction to iOS Development\n- **Goal**: Familiarize yourself with the basics of iOS app development.\n- **Resources**:\n  - Book: \"iOS Programming: The Big Nerd Ranch Guide\" (Chapters 1-3)\n  - Online Articles: \n    - \"Getting Started with iOS Development\"\n    - Apple's Human Interface Guidelines.\n- **Activities**:\n  - Set up Xcode and create your first simple app (e.g., a Hello World app).\n  - Explore the Xcode interface and learn about Interface Builder.\n\n#### Week 7-8: Building Your First App\n- **Goal**: Create a simple iOS app using Swift.\n- **Resources**:\n  - Continue with \"iOS Programming: The Big Nerd Ranch Guide\" (Chapters 4-6)\n  - Online Articles: \n    - \"Building Your First iOS App\"\n    - Tutorials on creating a simple app (e.g., a to-do list).\n- **Activities**:\n  - Follow along with the book to build a simple app.\n  - Experiment with adding features and modifying the app.\n\n#### Week 9-10: Advanced iOS Concepts\n- **Goal**: Learn about more advanced iOS features (e.g., networking, data persistence).\n- **Resources**:\n  - Book: \"iOS Programming: The Big Nerd Ranch Guide\" (Chapters 7-9)\n  - Online Articles: \n    - \"Networking in iOS with URLSession\"\n    - \"Core Data Basics\"\n- **Activities**:\n  - Implement networking features in your app (e.g., fetching data from an API).\n  - Explore Core Data for data persistence.\n\n#### Week 11-12: Final Project\n- **Goal**: Develop a complete iOS app that incorporates everything you've learned.\n- **Resources**:\n  - Review previous books and articles as needed.\n  - Online resources for specific features you want to implement.\n- **Activities**:\n  - Plan and design your app (sketch out the UI and features).\n  - Build the app, focusing on clean code and best practices.\n  - Test and debug your app thoroughly.\n\n### Ongoing Learning\n- After completing the initial study plan, continue to enhance your skills by:\n  - Reading advanced books on Swift and iOS development.\n  - Following iOS development blogs and forums (e.g., Ray Wenderlich, Hacking with Swift).\n  - Participating in online communities (e.g., Stack Overflow, iOS developer forums).\n\n### Tips for Success\n- Set specific goals for each study session.\n- Take notes and summarize what you learn.\n- Build small projects to reinforce your understanding.\n- Don\u2019t hesitate to seek help from online communities when you encounter challenges.\n\nBy following this study plan, you will build a solid foundation in Swift and iOS app development, preparing you for more advanced topics and projects in the future. Good luck!"
    ]
}