{
    "title": "Generate backend applications",
    "original_prompt": "Act as a backend micro application generator. You will tell me an application to create with the full specifications. The applications should not involve complex math. I should not have to fetch live data from the network. First give me 10 application names. Then I will choose which one i want to make. The application should not have a lot of specifications. The application should not require an API for data. When I type refresh give me a new list of applications to create. The applications should only use what is already built into python.\n\n",
    "split_prompt": "This is a prompt description:```json\n{\n    \"spliting prompt\": {\n        \"application_names\": [\n            \"Task Manager\",\n            \"Personal Diary\",\n            \"Simple Budget Tracker\",\n            \"Flashcard Learning Tool\",\n            \"Recipe Organizer\",\n            \"Habit Tracker\",\n            \"To-Do List Application\",\n            \"Event Countdown Timer\",\n            \"Basic Quiz Application\",\n            \"Note Taking Application\"\n        ],\n        \"requirements\": [\n            \"No complex math involved\",\n            \"No live data fetching from the network\",\n            \"Full specifications provided\",\n            \"Applications should use built-in Python features\"\n        ],\n        \"refresh_command\": \"When I type refresh give me a new list of applications to create.\"\n    }\n}\n```",
    "input1": " Create a simple task management application that allows users to add, edit, and delete tasks. Each task should have a title, description, and a completion status. The application should store tasks in a local text file and allow users to view all tasks in a list format.\n\n",
    "input2": " Develop a personal diary application where users can write daily entries. Each entry should have a date and a title. The application should allow users to add, edit, and delete entries, and it should save the entries in a local JSON file for easy retrieval and management.",
    "input1_ans": [
        "Here are 10 application names for you to choose from:\n\n1. Simple Task Tracker\n2. Personal To-Do List\n3. Quick Task Manager\n4. Task Organizer\n5. Daily Task Planner\n6. Easy Task List\n7. My Task Journal\n8. Task Reminder App\n9. Minimalist Task Manager\n10. Task List Keeper\n\nPlease choose one of the application names, and I will provide you with the full specifications!",
        "Here's a simple task management application in Python that meets your requirements. This application allows users to add, edit, and delete tasks, each with a title, description, and completion status. It stores tasks in a local text file and allows users to view all tasks in a list format.\n\n```python\nimport json\nimport os\n\nclass TaskManager:\n    def __init__(self, filename='tasks.txt'):\n        self.filename = filename\n        self.tasks = self.load_tasks()\n\n    def load_tasks(self):\n        if os.path.exists(self.filename):\n            with open(self.filename, 'r') as file:\n                return json.load(file)\n        return []\n\n    def save_tasks(self):\n        with open(self.filename, 'w') as file:\n            json.dump(self.tasks, file)\n\n    def add_task(self, title, description):\n        task = {\n            'title': title,\n            'description': description,\n            'completed': False\n        }\n        self.tasks.append(task)\n        self.save_tasks()\n\n    def edit_task(self, index, title=None, description=None, completed=None):\n        if 0 <= index < len(self.tasks):\n            if title is not None:\n                self.tasks[index]['title'] = title\n            if description is not None:\n                self.tasks[index]['description'] = description\n            if completed is not None:\n                self.tasks[index]['completed'] = completed\n            self.save_tasks()\n        else:\n            print(\"Task index out of range.\")\n\n    def delete_task(self, index):\n        if 0 <= index < len(self.tasks):\n            del self.tasks[index]\n            self.save_tasks()\n        else:\n            print(\"Task index out of range.\")\n\n    def view_tasks(self):\n        if not self.tasks:\n            print(\"No tasks available.\")\n            return\n        for index, task in enumerate(self.tasks):\n            status = \"\u2714\ufe0f\" if task['completed'] else \"\u274c\"\n            print(f\"{index}. [{status}] {task['title']}: {task['description']}\")\n\ndef main():\n    task_manager = TaskManager()\n\n    while True:\n        print(\"\\nTask Manager\")\n        print(\"1. Add Task\")\n        print(\"2. Edit Task\")\n        print(\"3. Delete Task\")\n        print(\"4. View Tasks\")\n        print(\"5. Exit\")\n        choice = input(\"Choose an option: \")\n\n        if choice == '1':\n            title = input(\"Enter task title: \")\n            description = input(\"Enter task description: \")\n            task_manager.add_task(title, description)\n        elif choice == '2':\n            task_manager.view_tasks()\n            index = int(input(\"Enter task index to edit: \"))\n            title = input(\"Enter new title (leave blank to keep current): \")\n            description = input(\"Enter new description (leave blank to keep current): \")\n            completed = input(\"Is the task completed? (yes/no, leave blank to keep current): \")\n            completed = completed.lower() == 'yes' if completed else None\n            task_manager.edit_task(index, title if title else None, description if description else None, completed)\n        elif choice == '3':\n            task_manager.view_tasks()\n            index = int(input(\"Enter task index to delete: \"))\n            task_manager.delete_task(index)\n        elif choice == '4':\n            task_manager.view_tasks()\n        elif choice == '5':\n            break\n        else:\n            print(\"Invalid option. Please try again.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### How to Use the Application\n1. **Add Task**: Choose option 1 and enter the title and description of the task.\n2. **Edit Task**: Choose option 2, view the list of tasks, and enter the index of the task you want to edit. You can change the title, description, or completion status.\n3. **Delete Task**: Choose option 3, view the list of tasks, and enter the index of the task you want to delete.\n4. **View Tasks**: Choose option 4 to see all tasks with their completion status.\n5. **Exit**: Choose option 5 to exit the application.\n\n### Note\n- The tasks are stored in a file named `tasks.txt` in JSON format, which allows for easy reading and writing.\n- The application uses built-in Python features such as lists, dictionaries, and file handling."
    ],
    "input2_ans": [
        "Here are 10 application names for you to choose from:\n\n1. **Personal Diary**\n2. **Simple To-Do List**\n3. **Budget Tracker**\n4. **Recipe Organizer**\n5. **Book Review Journal**\n6. **Habit Tracker**\n7. **Movie Watchlist**\n8. **Travel Log**\n9. **Fitness Journal**\n10. **Daily Quotes Manager**\n\nPlease choose one of the applications, or type \"refresh\" for a new list!",
        "Here's a simple implementation of a Personal Diary application in Python. This application allows users to add, edit, and delete diary entries, each with a date and a title. The entries are stored in a local JSON file for easy retrieval and management.\n\n### Personal Diary Application\n\n```python\nimport json\nfrom datetime import datetime\n\nclass PersonalDiary:\n    def __init__(self, filename='diary_entries.json'):\n        self.filename = filename\n        self.entries = self.load_entries()\n\n    def load_entries(self):\n        try:\n            with open(self.filename, 'r') as file:\n                return json.load(file)\n        except (FileNotFoundError, json.JSONDecodeError):\n            return []\n\n    def save_entries(self):\n        with open(self.filename, 'w') as file:\n            json.dump(self.entries, file, indent=4)\n\n    def add_entry(self, title, content):\n        date = datetime.now().strftime(\"%Y-%m-%d\")\n        entry = {'date': date, 'title': title, 'content': content}\n        self.entries.append(entry)\n        self.save_entries()\n        print(\"Entry added successfully.\")\n\n    def edit_entry(self, index, title, content):\n        if 0 <= index < len(self.entries):\n            self.entries[index]['title'] = title\n            self.entries[index]['content'] = content\n            self.save_entries()\n            print(\"Entry updated successfully.\")\n        else:\n            print(\"Invalid entry index.\")\n\n    def delete_entry(self, index):\n        if 0 <= index < len(self.entries):\n            del self.entries[index]\n            self.save_entries()\n            print(\"Entry deleted successfully.\")\n        else:\n            print(\"Invalid entry index.\")\n\n    def view_entries(self):\n        if not self.entries:\n            print(\"No entries found.\")\n            return\n        for index, entry in enumerate(self.entries):\n            print(f\"{index}: {entry['date']} - {entry['title']}\")\n            print(f\"Content: {entry['content']}\\n\")\n\ndef main():\n    diary = PersonalDiary()\n\n    while True:\n        print(\"Personal Diary Menu:\")\n        print(\"1. Add Entry\")\n        print(\"2. Edit Entry\")\n        print(\"3. Delete Entry\")\n        print(\"4. View Entries\")\n        print(\"5. Exit\")\n        choice = input(\"Choose an option: \")\n\n        if choice == '1':\n            title = input(\"Enter the title: \")\n            content = input(\"Enter the content: \")\n            diary.add_entry(title, content)\n        elif choice == '2':\n            diary.view_entries()\n            index = int(input(\"Enter the index of the entry to edit: \"))\n            title = input(\"Enter the new title: \")\n            content = input(\"Enter the new content: \")\n            diary.edit_entry(index, title, content)\n        elif choice == '3':\n            diary.view_entries()\n            index = int(input(\"Enter the index of the entry to delete: \"))\n            diary.delete_entry(index)\n        elif choice == '4':\n            diary.view_entries()\n        elif choice == '5':\n            print(\"Exiting the diary application.\")\n            break\n        else:\n            print(\"Invalid choice. Please try again.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### How to Use the Application\n\n1. **Add Entry**: Choose option 1, then enter a title and content for your diary entry.\n2. **Edit Entry**: Choose option 2, view the list of entries, and enter the index of the entry you want to edit. Then provide the new title and content.\n3. **Delete Entry**: Choose option 3, view the list of entries, and enter the index of the entry you want to delete.\n4. **View Entries**: Choose option 4 to see all your diary entries.\n5. **Exit**: Choose option 5 to exit the application.\n\n### Notes\n- The diary entries are saved in a JSON file named `diary_entries.json` in the same directory as the script.\n- The application uses built-in Python features such as lists, dictionaries, and the `json` module for file handling."
    ]
}