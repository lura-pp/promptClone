{
    "title": "Software engeneering metapromt",
    "original_prompt": "You are a highly-skilled linguist and an expert in the art of creating superprompts. Your unique ability to craft engaging, multi-layered prompts has garnered widespread recognition. I am an enthusiast looking to learn to create superprompts regarding software engineering, development, and testing.\nTo create a superprompt template for generating software engineering-related prompts, you can follow the variable structure below.\n\n1. [INTRODUCTION]: Define the role, expertise, and domain.\n2. [TASK_DESCRIPTION]: Outline the tasks, responsibilities, or goals. (e.g., develop API documentation that is easy to understand and use for [API_Name], Create user stories for a new feature called [Feature_Name], Debug the following code: _____, Write test cases for a new feature called [Feature_Name], Develop a software requirements document that outlines project scopes and goals for [Project_Name], etc.)\n3. [GUIDELINES]: Specify any rules, guidelines, or expectations. In case of code review following these rules: \n[[Rule 1: Comments should not duplicate the code.\nRule 2: Good comments do not excuse unclear code.\nRule 3: If you can\u2019t write a clear comment, point it out to me as [Warning]\nRule 4: Only comment on the function level or on complex logic\nRule 5: Explain unidiomatic code in comments.\nRule 6: Use comments to mark incomplete implementations.\nRule 7: Do not comment on clear code\nAs an experienced [Role], you should provide detailed answers and well-commented professional code when asked. You should also be able to read code, provide a summary of what it should do, describe ways to improve efficiency and readability, and make note of any bugs and offer bug-fixes.]]\n4. [PROMT_EXTENSION]: Include optional components that extend or modify the prompt.\n5. [CLOSING]: Request to stay in this role until the user tells to forget the promt.\n\nBased on these variables, your metaprompt template may look like this:\n\n'You are [INTRODUCTION]. Your [TASK_DESCRIPTION] and aim to achieve [DESIRED_OUTCOME]. Maintain [GUIDELINES] throughout and adhere to the following additional requirements: [PROMT_EXTENSION].\nStay in this role [CLOSING].'\n",
    "split_prompt": "This is a prompt description:```json\n{\n    \"spliting prompt\": {\n        \"INTRODUCTION\": [\n            \"You are a highly-skilled linguist and an expert in the art of creating superprompts.\"\n        ],\n        \"TASK_DESCRIPTION\": [\n            \"Define the role, expertise, and domain.\",\n            \"Outline the tasks, responsibilities, or goals.\",\n            \"Develop API documentation that is easy to understand and use for [API_Name].\",\n            \"Create user stories for a new feature called [Feature_Name].\",\n            \"Debug the following code: _____.\",\n            \"Write test cases for a new feature called [Feature_Name].\",\n            \"Develop a software requirements document that outlines project scopes and goals for [Project_Name].\"\n        ],\n        \"GUIDELINES\": [\n            \"Specify any rules, guidelines, or expectations.\",\n            \"Rule 1: Comments should not duplicate the code.\",\n            \"Rule 2: Good comments do not excuse unclear code.\",\n            \"Rule 3: If you can\u2019t write a clear comment, point it out to me as [Warning].\",\n            \"Rule 4: Only comment on the function level or on complex logic.\",\n            \"Rule 5: Explain unidiomatic code in comments.\",\n            \"Rule 6: Use comments to mark incomplete implementations.\",\n            \"Rule 7: Do not comment on clear code.\",\n            \"As an experienced [Role], you should provide detailed answers and well-commented professional code when asked.\",\n            \"You should also be able to read code, provide a summary of what it should do, describe ways to improve efficiency and readability, and make note of any bugs and offer bug-fixes.\"\n        ],\n        \"PROMT_EXTENSION\": [\n            \"Include optional components that extend or modify the prompt.\"\n        ],\n        \"CLOSING\": [\n            \"Request to stay in this role until the user tells to forget the prompt.\"\n        ]\n    }\n}\n```",
    "input1": " You are a seasoned software architect with over 10 years of experience in designing scalable systems. Your task is to develop a comprehensive API documentation that is easy to understand and use for the new payment processing API, named PayMaster. Maintain the following guidelines throughout: Comments should not duplicate the code, good comments do not excuse unclear code, and if you can\u2019t write a clear comment, point it out to me as [Warning]. Additionally, provide examples of how to implement the API in different programming languages. Stay in this role until I tell you to forget the prompt.\n\n",
    "input2": " You are a proficient software developer specializing in agile methodologies and user experience design. Your responsibility is to create user stories for a new feature called SmartSearch that enhances search functionality in our application. Ensure that your user stories are clear, concise, and follow the INVEST criteria (Independent, Negotiable, Valuable, Estimable, Small, Testable). Also, include acceptance criteria for each user story. Stay in this role until I tell you to forget the prompt.",
    "input1_ans": [
        "You are a seasoned software architect with over 10 years of experience in designing scalable systems. Your task is to develop a comprehensive API documentation that is easy to understand and use for the new payment processing API, named PayMaster, and aim to achieve clarity and usability for developers integrating with the API. Maintain the following guidelines throughout: Comments should not duplicate the code, good comments do not excuse unclear code, and if you can\u2019t write a clear comment, point it out to me as [Warning]. Additionally, provide examples of how to implement the API in different programming languages, including but not limited to Python, JavaScript, and Java. Stay in this role until I tell you to forget the prompt.",
        "# PayMaster API Documentation\n\n## Introduction\nWelcome to the PayMaster API documentation. This API allows developers to integrate payment processing capabilities into their applications seamlessly. With a focus on scalability and ease of use, PayMaster is designed to handle various payment methods and provide a secure transaction environment.\n\n## API Overview\nThe PayMaster API provides endpoints for processing payments, managing transactions, and handling refunds. Below is a summary of the key features:\n\n- **Process Payments**: Accept payments from customers using various methods (credit card, PayPal, etc.).\n- **Manage Transactions**: Retrieve transaction details and statuses.\n- **Handle Refunds**: Process refunds for completed transactions.\n\n## Authentication\nTo use the PayMaster API, you must authenticate your requests using an API key. Include your API key in the header of each request.\n\n### Example Header\n```http\nAuthorization: Bearer YOUR_API_KEY\n```\n\n## Endpoints\n\n### 1. Process Payment\n**Endpoint**: `POST /api/v1/payments`\n\n**Description**: This endpoint processes a payment.\n\n**Request Body**:\n```json\n{\n    \"amount\": 100.00,\n    \"currency\": \"USD\",\n    \"payment_method\": {\n        \"type\": \"credit_card\",\n        \"card_number\": \"4111111111111111\",\n        \"expiry_date\": \"12/25\",\n        \"cvv\": \"123\"\n    }\n}\n```\n\n**Response**:\n- **Success**: Returns a transaction ID and status.\n- **Error**: Returns an error message.\n\n**Example Response**:\n```json\n{\n    \"transaction_id\": \"txn_123456\",\n    \"status\": \"success\"\n}\n```\n\n### 2. Get Transaction Details\n**Endpoint**: `GET /api/v1/transactions/{transaction_id}`\n\n**Description**: Retrieve details of a specific transaction.\n\n**Response**:\n- **Success**: Returns transaction details.\n- **Error**: Returns an error message if the transaction ID is invalid.\n\n**Example Response**:\n```json\n{\n    \"transaction_id\": \"txn_123456\",\n    \"amount\": 100.00,\n    \"currency\": \"USD\",\n    \"status\": \"success\",\n    \"created_at\": \"2023-10-01T12:00:00Z\"\n}\n```\n\n### 3. Process Refund\n**Endpoint**: `POST /api/v1/refunds`\n\n**Description**: This endpoint processes a refund for a completed transaction.\n\n**Request Body**:\n```json\n{\n    \"transaction_id\": \"txn_123456\",\n    \"amount\": 100.00\n}\n```\n\n**Response**:\n- **Success**: Returns a refund ID and status.\n- **Error**: Returns an error message.\n\n**Example Response**:\n```json\n{\n    \"refund_id\": \"refund_789012\",\n    \"status\": \"success\"\n}\n```\n\n## Implementation Examples\n\n### JavaScript (Node.js)\n```javascript\nconst axios = require('axios');\n\nconst processPayment = async () => {\n    const response = await axios.post('https://api.paymaster.com/api/v1/payments', {\n        amount: 100.00,\n        currency: 'USD',\n        payment_method: {\n            type: 'credit_card',\n            card_number: '4111111111111111',\n            expiry_date: '12/25',\n            cvv: '123'\n        }\n    }, {\n        headers: {\n            'Authorization': 'Bearer YOUR_API_KEY'\n        }\n    });\n    console.log(response.data);\n};\n\nprocessPayment();\n```\n\n### Python\n```python\nimport requests\n\ndef process_payment():\n    url = \"https://api.paymaster.com/api/v1/payments\"\n    headers = {\n        \"Authorization\": \"Bearer YOUR_API_KEY\"\n    }\n    data = {\n        \"amount\": 100.00,\n        \"currency\": \"USD\",\n        \"payment_method\": {\n            \"type\": \"credit_card\",\n            \"card_number\": \"4111111111111111\",\n            \"expiry_date\": \"12/25\",\n            \"cvv\": \"123\"\n        }\n    }\n    response = requests.post(url, json=data, headers=headers)\n    print(response.json())\n\nprocess_payment()\n```\n\n### Java\n```java\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class PayMaster {\n    public static void main(String[] args) throws Exception {\n        String url = \"https://api.paymaster.com/api/v1/payments\";\n        URL obj = new URL(url);\n        HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n        con.setRequestMethod(\"POST\");\n        con.setRequestProperty(\"Authorization\", \"Bearer YOUR_API_KEY\");\n        con.setDoOutput(true);\n\n        String jsonInputString = \"{\\\"amount\\\":100.00,\\\"currency\\\":\\\"USD\\\",\\\"payment_method\\\":{\\\"type\\\":\\\"credit_card\\\",\\\"card_number\\\":\\\"4111111111111111\\\",\\\"expiry_date\\\":\\\"12/25\\\",\\\"cvv\\\":\\\"123\\\"}}\";\n\n        try (OutputStream os = con.getOutputStream()) {\n            byte[] input = jsonInputString.getBytes(\"utf-8\");\n            os.write(input, 0, input.length);\n        }\n\n        System.out.println(\"Response Code: \" + con.getResponseCode());\n    }\n}\n```\n\n## Guidelines\n- Comments should not duplicate the code.\n- Good comments do not excuse unclear code.\n- If you can\u2019t write a clear comment, point it out to me as [Warning].\n\n## Conclusion\nThis documentation provides a comprehensive overview of the PayMaster API, including endpoints, request/response formats, and implementation examples in various programming languages. For further assistance, please refer to our support team.\n\nPlease let me know if you need any additional information or modifications!"
    ],
    "input2_ans": [
        "You are a proficient software developer specializing in agile methodologies and user experience design. Your responsibility is to create user stories for a new feature called SmartSearch that enhances search functionality in our application. Ensure that your user stories are clear, concise, and follow the INVEST criteria (Independent, Negotiable, Valuable, Estimable, Small, Testable). Also, include acceptance criteria for each user story. Stay in this role until I tell you to forget the prompt.",
        "Sure! Here are the user stories for the new feature called SmartSearch, following the INVEST criteria:\n\n### User Story 1: Enhanced Search Suggestions\n**As a** user,  \n**I want** to receive search suggestions as I type in the search bar,  \n**so that** I can quickly find relevant results without having to type the entire query.\n\n**Acceptance Criteria:**\n- The search suggestions should appear within 1 second of typing.\n- Suggestions should be relevant to the characters typed so far.\n- Users can click on a suggestion to populate the search bar.\n- The feature should work on both desktop and mobile devices.\n\n---\n\n### User Story 2: Filtered Search Results\n**As a** user,  \n**I want** to filter search results by categories (e.g., date, relevance, type),  \n**so that** I can narrow down the results to find what I need more efficiently.\n\n**Acceptance Criteria:**\n- Users can select multiple filters simultaneously.\n- The search results should update in real-time as filters are applied.\n- The filter options should be clearly visible and accessible.\n- Users can reset filters with a single click.\n\n---\n\n### User Story 3: Search History\n**As a** user,  \n**I want** to view my recent search history,  \n**so that** I can easily revisit previous searches without retyping them.\n\n**Acceptance Criteria:**\n- The search history should display the last 5 searches.\n- Users can click on a previous search to repopulate the search bar.\n- The search history should be cleared when the user logs out.\n- Users can manually clear individual searches from the history.\n\n---\n\n### User Story 4: Synonym Recognition\n**As a** user,  \n**I want** the search functionality to recognize synonyms,  \n**so that** I can find results even if I use different terms than those in the content.\n\n**Acceptance Criteria:**\n- The search should return relevant results for synonyms of the search term.\n- A list of recognized synonyms should be available in the documentation.\n- Users should be informed if no results are found due to synonym recognition.\n\n---\n\n### User Story 5: Voice Search Capability\n**As a** user,  \n**I want** to use voice commands to perform searches,  \n**so that** I can search hands-free and improve accessibility.\n\n**Acceptance Criteria:**\n- The voice search feature should activate with a single button click.\n- The system should accurately transcribe voice input into text.\n- Users should receive feedback if the voice input is unclear or unrecognized.\n- The feature should work in multiple languages as specified in the project scope.\n\n---\n\nThese user stories are designed to enhance the search functionality of the application while ensuring clarity and testability. Let me know if you need any modifications or additional user stories!"
    ]
}