{
    "title": "'''Python Script'''\n\nA Python script is a file containing a sequence of instructions written in the Python programming language. These instructions are executed one by one, from top to bottom, when the script is run. Python scripts are used to automate tasks, perform calculations, manipulate data, and create applications.\n\nPython scripts are typically saved with a .py extension and can be executed using a Python interpreter or an integrated development environment (IDE). They can be run on various platforms, including Windows, macOS, and Linux.\n\nPython scripts can be written using any text editor, such as Notepad, Sublime Text, or Visual Studio Code. The code is written in plain text and follows the syntax and rules of the Python language.\n\nTo run a Python script, you need to have Python installed on your computer. Once Python is installed, you can open a command prompt or terminal, navigate to the directory where the script is saved, and use the command \"python script_name.py\" to execute the script.\n\nPython scripts can be simple or complex, depending on the task they are designed to accomplish. They can include variables, functions, loops, conditionals, and other programming constructs to perform specific operations.\n\nOverall, Python scripts are a powerful tool for automating tasks and building applications, making Python a popular choice among programmers and developers.",
    "original_prompt": "Yes, I can help you with that. Here's the translation:\n\n\"Can you write a python script to save a Google Slides link to image files?\"",
    "split_prompt": "This is a prompt description:```json\n{\n    \"spliting prompt\": {\n        \"task\":[\n            \"write a python script\"\n        ],\n        \"subject\":[\n            \"Google Slides link\"\n        ],\n        \"output_format\":[\n            \"image files\"\n        ]\n    }\n}\n```",
    "input1": " \"Can you create a Python script that takes a Google Slides presentation link, downloads each slide as an image, and saves them in a specified local directory, while also handling potential errors such as invalid links or network issues?\"\n\n",
    "input2": " \"Could you develop a Python program that accepts a Google Slides URL, converts each slide into high-resolution image files, and organizes them into folders based on the slide titles, ensuring that the script includes logging for successful downloads and any encountered exceptions?\"",
    "input1_ans": [
        "Certainly! Below is a Python script that uses the Google Slides API to download each slide from a Google Slides presentation as an image and saves them in a specified local directory. This script also includes error handling for invalid links and network issues.\n\n### Prerequisites\n1. **Google Cloud Project**: You need to create a Google Cloud project and enable the Google Slides API.\n2. **Service Account**: Create a service account and download the JSON key file.\n3. **Share the Presentation**: Share the Google Slides presentation with the service account email.\n\n### Required Libraries\nYou will need the following libraries:\n- `google-auth`\n- `google-auth-oauthlib`\n- `google-auth-httplib2`\n- `google-api-python-client`\n- `requests`\n- `Pillow` (for image processing)\n\nYou can install these libraries using pip:\n```bash\npip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client requests Pillow\n```\n\n### Python Script\nHere's the script:\n\n```python\nimport os\nimport requests\nfrom google.oauth2 import service_account\nfrom googleapiclient.discovery import build\nfrom googleapiclient.errors import HttpError\n\n# Function to download slides as images\ndef download_slides_as_images(presentation_id, output_dir, credentials_file):\n    # Authenticate using the service account\n    credentials = service_account.Credentials.from_service_account_file(credentials_file)\n    service = build('slides', 'v1', credentials=credentials)\n\n    try:\n        # Get the presentation\n        presentation = service.presentations().get(presentationId=presentation_id).execute()\n        slides = presentation.get('slides')\n\n        # Create output directory if it doesn't exist\n        os.makedirs(output_dir, exist_ok=True)\n\n        for i, slide in enumerate(slides):\n            slide_id = slide.get('objectId')\n            image_url = f\"https://slides.googleapis.com/v1/presentations/{presentation_id}/pages/{slide_id}/thumbnail\"\n\n            # Request the slide image\n            response = requests.get(image_url, headers={'Authorization': f'Bearer {credentials.token}'})\n\n            if response.status_code == 200:\n                # Save the image\n                image_path = os.path.join(output_dir, f'slide_{i + 1}.png')\n                with open(image_path, 'wb') as f:\n                    f.write(response.content)\n                print(f\"Downloaded: {image_path}\")\n            else:\n                print(f\"Failed to download slide {i + 1}: {response.status_code} - {response.text}\")\n\n    except HttpError as error:\n        print(f\"An error occurred: {error}\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n\n# Main function\nif __name__ == \"__main__\":\n    # Replace with your presentation ID and output directory\n    presentation_link = input(\"Enter the Google Slides presentation link: \")\n    output_directory = input(\"Enter the output directory: \")\n    credentials_file = input(\"Enter the path to your service account credentials JSON file: \")\n\n    # Extract presentation ID from the link\n    try:\n        presentation_id = presentation_link.split('/d/')[1].split('/')[0]\n        download_slides_as_images(presentation_id, output_directory, credentials_file)\n    except IndexError:\n        print(\"Invalid Google Slides link. Please ensure the link is correct.\")\n```\n\n### How to Use the Script\n1. Save the script to a file, e.g., `download_slides.py`.\n2. Run the script using Python:\n   ```bash\n   python download_slides.py\n   ```\n3. Enter the Google Slides presentation link, the output directory where you want to save the images, and the path to your service account credentials JSON file when prompted.\n\n### Notes\n- Ensure that the Google Slides presentation is shared with the service account email.\n- The script handles errors such as invalid links and network issues, providing appropriate messages.\n\nFeel free to modify the script as needed!",
        "Certainly! Below is a Python script that takes a Google Slides presentation link, downloads each slide as an image, and saves them in a specified local directory. The script also includes error handling for invalid links and network issues.\n\nTo run this script, you will need to install the `requests` and `Pillow` libraries if you haven't already. You can install them using pip:\n\n```bash\npip install requests Pillow\n```\n\nHere's the script:\n\n```python\nimport os\nimport requests\nfrom urllib.parse import urlparse, parse_qs\nfrom PIL import Image\nfrom io import BytesIO\n\ndef download_slide_as_image(slide_url, slide_number, output_dir):\n    try:\n        # Construct the image URL for the slide\n        image_url = f\"{slide_url}/export/png?id={slide_number}&pageid={slide_number}\"\n        \n        # Send a GET request to download the image\n        response = requests.get(image_url)\n        response.raise_for_status()  # Raise an error for bad responses\n\n        # Open the image and save it\n        image = Image.open(BytesIO(response.content))\n        image.save(os.path.join(output_dir, f\"slide_{slide_number}.png\"))\n        print(f\"Downloaded slide {slide_number} as image.\")\n    except requests.exceptions.RequestException as e:\n        print(f\"Error downloading slide {slide_number}: {e}\")\n    except Exception as e:\n        print(f\"An error occurred while processing slide {slide_number}: {e}\")\n\ndef get_slide_ids(presentation_url):\n    # Parse the Google Slides URL to extract the presentation ID\n    parsed_url = urlparse(presentation_url)\n    query_params = parse_qs(parsed_url.query)\n    \n    # Check if the presentation ID is present in the URL\n    if 'id' in query_params:\n        return query_params['id'][0]\n    else:\n        raise ValueError(\"Invalid Google Slides link. Please provide a valid link.\")\n\ndef download_slides(presentation_url, output_dir):\n    try:\n        presentation_id = get_slide_ids(presentation_url)\n        \n        # Create the output directory if it doesn't exist\n        os.makedirs(output_dir, exist_ok=True)\n\n        # Get the number of slides (this is a placeholder; you may need to implement a way to get the actual number of slides)\n        # For demonstration, let's assume there are 10 slides\n        number_of_slides = 10  # Replace with actual logic to get the number of slides\n\n        for slide_number in range(1, number_of_slides + 1):\n            download_slide_as_image(presentation_url, slide_number, output_dir)\n\n    except ValueError as ve:\n        print(ve)\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\nif __name__ == \"__main__\":\n    # Example usage\n    google_slides_link = input(\"Enter the Google Slides link: \")\n    output_directory = input(\"Enter the output directory: \")\n    download_slides(google_slides_link, output_directory)\n```\n\n### How to Use the Script:\n1. Copy the script into a Python file, e.g., `download_slides.py`.\n2. Run the script using Python:\n   ```bash\n   python download_slides.py\n   ```\n3. When prompted, enter the Google Slides link and the output directory where you want to save the images.\n\n### Note:\n- The script currently assumes there are 10 slides. You will need to implement a way to dynamically get the number of slides in the presentation, as this can vary.\n- Make sure the Google Slides presentation is publicly accessible or that you have the necessary permissions to access it."
    ],
    "input2_ans": [
        "Certainly! Below is a Python script that uses the Google Slides API to convert each slide of a Google Slides presentation into high-resolution image files. The script organizes the images into folders based on the slide titles and includes logging for successful downloads and exceptions.\n\n### Prerequisites\n1. **Google Cloud Project**: You need to create a Google Cloud project and enable the Google Slides API.\n2. **Service Account**: Create a service account and download the JSON key file.\n3. **Install Required Libraries**: You need to install the `google-auth`, `google-auth-oauthlib`, `google-auth-httplib2`, and `google-api-python-client` libraries. You can install them using pip:\n\n   ```bash\n   pip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client\n   ```\n\n### Python Script\n\n```python\nimport os\nimport logging\nimport requests\nfrom google.oauth2 import service_account\nfrom googleapiclient.discovery import build\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n# Constants\nSCOPES = ['https://www.googleapis.com/auth/presentations.readonly']\nSERVICE_ACCOUNT_FILE = 'path/to/your/service-account-file.json'  # Update with your service account file path\n\ndef authenticate_google_slides():\n    \"\"\"Authenticate and return the Google Slides service.\"\"\"\n    credentials = service_account.Credentials.from_service_account_file(\n        SERVICE_ACCOUNT_FILE, scopes=SCOPES)\n    service = build('slides', 'v1', credentials=credentials)\n    return service\n\ndef get_presentation(service, presentation_id):\n    \"\"\"Get the presentation details.\"\"\"\n    presentation = service.presentations().get(presentationId=presentation_id).execute()\n    return presentation\n\ndef download_slide_image(slide_id, slide_title, output_dir):\n    \"\"\"Download the slide image and save it to the specified directory.\"\"\"\n    image_url = f\"https://slides.googleapis.com/v1/presentations/{presentation_id}/pages/{slide_id}/thumbnail\"\n    response = requests.get(image_url, headers={'Authorization': f'Bearer {credentials.token}'})\n\n    if response.status_code == 200:\n        # Create directory for the slide title if it doesn't exist\n        slide_dir = os.path.join(output_dir, slide_title)\n        os.makedirs(slide_dir, exist_ok=True)\n\n        # Save the image\n        image_path = os.path.join(slide_dir, f\"{slide_title}.png\")\n        with open(image_path, 'wb') as f:\n            f.write(response.content)\n        logging.info(f\"Downloaded: {image_path}\")\n    else:\n        logging.error(f\"Failed to download slide {slide_id}: {response.status_code} - {response.text}\")\n\ndef main(presentation_url):\n    \"\"\"Main function to process the Google Slides presentation.\"\"\"\n    # Extract presentation ID from the URL\n    presentation_id = presentation_url.split('/')[-2]\n\n    # Authenticate and get the service\n    service = authenticate_google_slides()\n\n    # Get the presentation\n    presentation = get_presentation(service, presentation_id)\n\n    # Output directory\n    output_dir = 'slides_images'\n    os.makedirs(output_dir, exist_ok=True)\n\n    # Process each slide\n    for slide in presentation.get('slides', []):\n        slide_id = slide.get('objectId')\n        slide_title = slide.get('pageProperties', {}).get('title', f\"Slide_{slide_id}\")\n        download_slide_image(slide_id, slide_title, output_dir)\n\nif __name__ == '__main__':\n    # Example Google Slides URL\n    google_slides_url = 'https://docs.google.com/presentation/d/your_presentation_id/edit'  # Update with your Google Slides URL\n    main(google_slides_url)\n```\n\n### Instructions\n1. Replace `path/to/your/service-account-file.json` with the path to your service account JSON key file.\n2. Update the `google_slides_url` variable with the URL of your Google Slides presentation.\n3. Run the script. It will create a folder named `slides_images` and save each slide as a PNG image in a subfolder named after the slide title.\n\n### Notes\n- Ensure that the service account has access to the Google Slides presentation.\n- The script uses the Google Slides API to fetch slide thumbnails, which are high-resolution images.\n- Logging is included to track successful downloads and any errors encountered during the process.",
        "Certainly! Below is a Python script that accomplishes the task of converting Google Slides into high-resolution image files, organizing them into folders based on slide titles, and includes logging for successful downloads and exceptions.\n\nTo run this script, you will need to install the `gdown`, `Pillow`, and `requests` libraries. You can install them using pip:\n\n```bash\npip install gdown Pillow requests\n```\n\nHere's the script:\n\n```python\nimport os\nimport logging\nimport requests\nfrom PIL import Image\nfrom io import BytesIO\nimport gdown\n\n# Set up logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\ndef download_slide_images(slides_url):\n    try:\n        # Get the file ID from the Google Slides URL\n        file_id = slides_url.split('/d/')[1].split('/')[0]\n        export_url = f\"https://docs.google.com/presentation/d/{file_id}/export/png\"\n\n        # Download the presentation as PNG images\n        gdown.download(export_url, 'slides.zip', quiet=False)\n\n        # Unzip the downloaded file\n        import zipfile\n        with zipfile.ZipFile('slides.zip', 'r') as zip_ref:\n            zip_ref.extractall('slides')\n\n        # Process each slide image\n        for slide_file in os.listdir('slides'):\n            if slide_file.endswith('.png'):\n                slide_title = slide_file.split('.')[0]  # Use the file name as the title\n                slide_folder = os.path.join('slides', slide_title)\n\n                # Create a folder for the slide title\n                os.makedirs(slide_folder, exist_ok=True)\n\n                # Move the slide image to the corresponding folder\n                os.rename(os.path.join('slides', slide_file), os.path.join(slide_folder, slide_file))\n                logging.info(f\"Downloaded and organized slide: {slide_title}\")\n\n    except Exception as e:\n        logging.error(f\"An error occurred: {e}\")\n\nif __name__ == \"__main__\":\n    google_slides_url = input(\"Enter the Google Slides URL: \")\n    download_slide_images(google_slides_url)\n```\n\n### How to Use the Script\n\n1. **Input the Google Slides URL**: When you run the script, it will prompt you to enter the Google Slides URL.\n2. **Download and Organize**: The script will download the slides as PNG images, create folders based on the slide titles, and move the images into their respective folders.\n3. **Logging**: The script logs successful downloads and any errors encountered during the process.\n\n### Important Notes\n\n- Ensure that the Google Slides presentation is publicly accessible or that you have the necessary permissions to access it.\n- The script assumes that the slides can be exported as PNG images. If the format changes or if there are restrictions, the script may need adjustments.\n- The script uses `gdown` to download the slides, which may require the Google Drive file to be shared publicly.\n\nFeel free to modify the script as needed for your specific requirements!"
    ]
}