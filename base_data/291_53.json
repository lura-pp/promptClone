{
    "title": "GUI GPT API prompt generator",
    "original_prompt": "You are an experienced python developer. Your task is to develop a visual (GUI) desktop prompt editor with the following features:\n\nSelection of a role for ChatGPT to use from a list of most popular roles (e.g. Lawyer, Software Developer, Marketing Specialist, etc.).\n\nA slider to regulate Top P of the model\n\nA slider to regulate Temperature of the model\n\nA checkbox to include markdown (results in prompt addendum that requests to include headings, formatting, etc.)\n\nA checkbox to include questions from the model (results in prompt addendum that requests to include the text \"If you have any clarifying questions about the task, ask now before answering\")\n\nA text field to input the base prompt\n\nA button to generate the resulting prompt\n\nA text field that is editable and displays the resulting prompt (separate from the chat)\n\nA widget to select a GPT model from a list of all available models\n\nA button to call the selected GPT API to fetch the answer to the prompt from field 8.\n\nA chat log to display the result of queries, with new queries getting added to the bottom like in ChatGPT.\n\n\nThe Right panel containing the chat should take 80% width and the left panel with the prompts and buttons should be 20% width.\n\nThe chat should support text with markup.\n\nDevelop python code for the requested program.",
    "split_prompt": "This is a prompt description:```json\n{\n    \"spliting prompt\": {\n        \"dimensions\": [\n            {\n                \"dimension1\": [\n                    \"role selection\",\n                    \"list of popular roles (e.g. Lawyer, Software Developer, Marketing Specialist)\"\n                ]\n            },\n            {\n                \"dimension2\": [\n                    \"Top P slider\",\n                    \"Temperature slider\"\n                ]\n            },\n            {\n                \"dimension3\": [\n                    \"checkbox for markdown inclusion\",\n                    \"checkbox for questions inclusion\"\n                ]\n            },\n            {\n                \"dimension4\": [\n                    \"text field for base prompt\",\n                    \"button to generate resulting prompt\",\n                    \"editable text field for resulting prompt\"\n                ]\n            },\n            {\n                \"dimension5\": [\n                    \"widget to select GPT model\",\n                    \"button to call selected GPT API\"\n                ]\n            },\n            {\n                \"dimension6\": [\n                    \"chat log to display results\",\n                    \"new queries added to the bottom\"\n                ]\n            },\n            {\n                \"dimension7\": [\n                    \"layout with left panel (20% width) and right panel (80% width)\",\n                    \"chat supports text with markup\"\n                ]\n            }\n        ]\n    }\n}\n```",
    "input1": " \n{\n    \"role_selection\": \"Marketing Specialist\",\n    \"top_p_slider\": 0.85,\n    \"temperature_slider\": 0.7,\n    \"include_markdown\": true,\n    \"include_questions\": true,\n    \"base_prompt\": \"Create a marketing strategy for a new eco-friendly product targeting millennials.\",\n    \"gpt_model_selection\": \"gpt-3.5-turbo\",\n    \"chat_log\": []\n}\n\n",
    "input2": " \n{\n    \"role_selection\": \"Software Developer\",\n    \"top_p_slider\": 0.9,\n    \"temperature_slider\": 0.5,\n    \"include_markdown\": false,\n    \"include_questions\": true,\n    \"base_prompt\": \"Design a RESTful API for a library management system.\",\n    \"gpt_model_selection\": \"gpt-4\",\n    \"chat_log\": []\n}",
    "input1_ans": [
        "To create a visual desktop prompt editor with the specified features, we can use the `tkinter` library for the GUI and `openai` library to interact with the GPT API. Below is a Python code snippet that implements the requested program.\n\nMake sure you have the `openai` library installed. You can install it using pip:\n\n```bash\npip install openai\n```\n\nHere's the complete code for the GUI application:\n\n```python\nimport tkinter as tk\nfrom tkinter import ttk, scrolledtext\nimport openai\n\n# Set your OpenAI API key here\nopenai.api_key = 'YOUR_API_KEY'\n\nclass PromptEditorApp:\n    def __init__(self, root):\n        self.root = root\n        self.root.title(\"ChatGPT Prompt Editor\")\n        self.root.geometry(\"800x600\")\n\n        # Left panel for prompt settings\n        self.left_frame = tk.Frame(self.root, width=160)\n        self.left_frame.pack(side=tk.LEFT, fill=tk.Y)\n\n        # Role selection\n        self.role_label = tk.Label(self.left_frame, text=\"Select Role:\")\n        self.role_label.pack(pady=5)\n        self.role_selection = ttk.Combobox(self.left_frame, values=[\"Lawyer\", \"Software Developer\", \"Marketing Specialist\"])\n        self.role_selection.set(\"Marketing Specialist\")\n        self.role_selection.pack(pady=5)\n\n        # Top P slider\n        self.top_p_label = tk.Label(self.left_frame, text=\"Top P:\")\n        self.top_p_label.pack(pady=5)\n        self.top_p_slider = tk.Scale(self.left_frame, from_=0, to=1, resolution=0.01, orient=tk.HORIZONTAL)\n        self.top_p_slider.set(0.85)\n        self.top_p_slider.pack(pady=5)\n\n        # Temperature slider\n        self.temp_label = tk.Label(self.left_frame, text=\"Temperature:\")\n        self.temp_label.pack(pady=5)\n        self.temperature_slider = tk.Scale(self.left_frame, from_=0, to=1, resolution=0.01, orient=tk.HORIZONTAL)\n        self.temperature_slider.set(0.7)\n        self.temperature_slider.pack(pady=5)\n\n        # Include markdown checkbox\n        self.include_markdown_var = tk.BooleanVar()\n        self.include_markdown_checkbox = tk.Checkbutton(self.left_frame, text=\"Include Markdown\", variable=self.include_markdown_var)\n        self.include_markdown_checkbox.pack(pady=5)\n\n        # Include questions checkbox\n        self.include_questions_var = tk.BooleanVar()\n        self.include_questions_checkbox = tk.Checkbutton(self.left_frame, text=\"Include Questions\", variable=self.include_questions_var)\n        self.include_questions_checkbox.pack(pady=5)\n\n        # Base prompt input\n        self.prompt_label = tk.Label(self.left_frame, text=\"Base Prompt:\")\n        self.prompt_label.pack(pady=5)\n        self.base_prompt_entry = tk.Entry(self.left_frame, width=40)\n        self.base_prompt_entry.insert(0, \"Create a marketing strategy for a new eco-friendly product targeting millennials.\")\n        self.base_prompt_entry.pack(pady=5)\n\n        # GPT model selection\n        self.model_label = tk.Label(self.left_frame, text=\"Select GPT Model:\")\n        self.model_label.pack(pady=5)\n        self.gpt_model_selection = ttk.Combobox(self.left_frame, values=[\"gpt-3.5-turbo\", \"gpt-4\"])\n        self.gpt_model_selection.set(\"gpt-3.5-turbo\")\n        self.gpt_model_selection.pack(pady=5)\n\n        # Generate prompt button\n        self.generate_button = tk.Button(self.left_frame, text=\"Generate Prompt\", command=self.generate_prompt)\n        self.generate_button.pack(pady=10)\n\n        # Resulting prompt display\n        self.resulting_prompt_label = tk.Label(self.left_frame, text=\"Resulting Prompt:\")\n        self.resulting_prompt_label.pack(pady=5)\n        self.resulting_prompt_display = scrolledtext.ScrolledText(self.left_frame, width=40, height=10)\n        self.resulting_prompt_display.pack(pady=5)\n\n        # Call GPT button\n        self.call_gpt_button = tk.Button(self.left_frame, text=\"Call GPT\", command=self.call_gpt)\n        self.call_gpt_button.pack(pady=10)\n\n        # Chat log display\n        self.chat_log_display = scrolledtext.ScrolledText(self.root, width=60, height=30)\n        self.chat_log_display.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)\n\n    def generate_prompt(self):\n        role = self.role_selection.get()\n        top_p = self.top_p_slider.get()\n        temperature = self.temperature_slider.get()\n        include_markdown = self.include_markdown_var.get()\n        include_questions = self.include_questions_var.get()\n        base_prompt = self.base_prompt_entry.get()\n\n        prompt = f\"Role: {role}\\n\"\n        prompt += f\"Base Prompt: {base_prompt}\\n\"\n        if include_markdown:\n            prompt += \"Include headings and formatting.\\n\"\n        if include_questions:\n            prompt += \"If you have any clarifying questions about the task, ask now before answering.\\n\"\n        prompt += f\"Top P: {top_p}\\nTemperature: {temperature}\\n\"\n\n        self.resulting_prompt_display.delete(1.0, tk.END)\n        self.resulting_prompt_display.insert(tk.END, prompt)\n\n    def call_gpt(self):\n        prompt = self.resulting_prompt_display.get(1.0, tk.END).strip()\n        model = self.gpt_model_selection.get()\n\n        if prompt:\n            response = openai.ChatCompletion.create(\n                model=model,\n                messages=[{\"role\": \"user\", \"content\": prompt}],\n                temperature=self.temperature_slider.get(),\n                top_p=self.top_p_slider.get()\n            )\n            answer = response.choices[0].message['content']\n            self.chat_log_display.insert(tk.END, f\"User: {prompt}\\n\")\n            self.chat_log_display.insert(tk.END, f\"GPT: {answer}\\n\\n\")\n            self.chat_log_display.see(tk.END)\n\nif __name__ == \"__main__\":\n    root = tk.Tk()\n    app = PromptEditorApp(root)\n    root.mainloop()\n```\n\n### Instructions to Run the Code:\n1. Replace `'YOUR_API_KEY'` with your actual OpenAI API key.\n2. Save the code in a Python file, for example, `prompt_editor.py`.\n3. Run the script using Python 3.\n\n### Features:\n- The left panel contains all the controls for selecting roles, adjusting sliders, and entering prompts.\n- The right panel displays the chat log, showing the conversation with the GPT model.\n- The application allows you to generate a prompt based on the selected options and call the GPT API to get a response.\n\n### Note:\n- Ensure you have a valid OpenAI API key and that your account has access to the models you are trying to use.\n- The chat log supports basic text display; for advanced markup support, you may need to implement additional formatting features.",
        "```json\n{\n    \"resulting_prompt\": \"As a Marketing Specialist, create a marketing strategy for a new eco-friendly product targeting millennials. Please include the following elements:\\n\\n1. **Target Audience Analysis**: Describe the characteristics and preferences of millennials that make them suitable for this product.\\n2. **Marketing Channels**: Identify the most effective channels to reach this audience (e.g., social media, influencer marketing, email campaigns).\\n3. **Content Strategy**: Suggest types of content that would resonate with millennials (e.g., blog posts, videos, social media posts).\\n4. **Sustainability Messaging**: Outline how to communicate the eco-friendly aspects of the product effectively.\\n5. **Engagement Tactics**: Propose ways to engage millennials and encourage them to share their experiences with the product.\\n6. **Measurement of Success**: Define key performance indicators (KPIs) to measure the effectiveness of the marketing strategy.\\n\\n### Questions to Consider:\\n- What specific eco-friendly features should be highlighted?\\n- How can partnerships with eco-conscious brands enhance the strategy?\\n- What budget considerations should be taken into account for this campaign?\",\n    \"chat_log\": [\n        {\n            \"user\": \"Create a marketing strategy for a new eco-friendly product targeting millennials.\",\n            \"assistant\": \"As a Marketing Specialist, create a marketing strategy for a new eco-friendly product targeting millennials. Please include the following elements:\\n\\n1. **Target Audience Analysis**: Describe the characteristics and preferences of millennials that make them suitable for this product.\\n2. **Marketing Channels**: Identify the most effective channels to reach this audience (e.g., social media, influencer marketing, email campaigns).\\n3. **Content Strategy**: Suggest types of content that would resonate with millennials (e.g., blog posts, videos, social media posts).\\n4. **Sustainability Messaging**: Outline how to communicate the eco-friendly aspects of the product effectively.\\n5. **Engagement Tactics**: Propose ways to engage millennials and encourage them to share their experiences with the product.\\n6. **Measurement of Success**: Define key performance indicators (KPIs) to measure the effectiveness of the marketing strategy.\\n\\n### Questions to Consider:\\n- What specific eco-friendly features should be highlighted?\\n- How can partnerships with eco-conscious brands enhance the strategy?\\n- What budget considerations should be taken into account for this campaign?\"\n        }\n    ]\n}\n```"
    ],
    "input2_ans": [
        "To create a visual desktop prompt editor with the specified features, we can use the `tkinter` library for the GUI and `openai` library to interact with the GPT API. Below is a Python code example that implements the requested functionality.\n\nMake sure you have the `openai` library installed. You can install it using pip:\n\n```bash\npip install openai\n```\n\nHere's the complete code for the GUI application:\n\n```python\nimport tkinter as tk\nfrom tkinter import ttk, scrolledtext\nimport openai\n\n# Set your OpenAI API key here\nopenai.api_key = 'YOUR_API_KEY'\n\nclass PromptEditorApp:\n    def __init__(self, root):\n        self.root = root\n        self.root.title(\"ChatGPT Prompt Editor\")\n        self.root.geometry(\"800x600\")\n\n        # Left panel for prompt settings\n        self.left_panel = tk.Frame(self.root, width=160, bg='lightgrey')\n        self.left_panel.pack(side=tk.LEFT, fill=tk.Y)\n\n        # Right panel for chat log\n        self.right_panel = tk.Frame(self.root, bg='white')\n        self.right_panel.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)\n\n        # Role selection\n        self.role_label = tk.Label(self.left_panel, text=\"Select Role:\")\n        self.role_label.pack(pady=5)\n        self.role_selection = ttk.Combobox(self.left_panel, values=[\"Lawyer\", \"Software Developer\", \"Marketing Specialist\"])\n        self.role_selection.set(\"Software Developer\")\n        self.role_selection.pack(pady=5)\n\n        # Top P slider\n        self.top_p_label = tk.Label(self.left_panel, text=\"Top P:\")\n        self.top_p_label.pack(pady=5)\n        self.top_p_slider = tk.Scale(self.left_panel, from_=0, to=1, resolution=0.01, orient=tk.HORIZONTAL)\n        self.top_p_slider.set(0.9)\n        self.top_p_slider.pack(pady=5)\n\n        # Temperature slider\n        self.temp_label = tk.Label(self.left_panel, text=\"Temperature:\")\n        self.temp_label.pack(pady=5)\n        self.temperature_slider = tk.Scale(self.left_panel, from_=0, to=1, resolution=0.01, orient=tk.HORIZONTAL)\n        self.temperature_slider.set(0.5)\n        self.temperature_slider.pack(pady=5)\n\n        # Include markdown checkbox\n        self.include_markdown_var = tk.BooleanVar()\n        self.include_markdown_checkbox = tk.Checkbutton(self.left_panel, text=\"Include Markdown\", variable=self.include_markdown_var)\n        self.include_markdown_checkbox.pack(pady=5)\n\n        # Include questions checkbox\n        self.include_questions_var = tk.BooleanVar(value=True)\n        self.include_questions_checkbox = tk.Checkbutton(self.left_panel, text=\"Include Questions\", variable=self.include_questions_var)\n        self.include_questions_checkbox.pack(pady=5)\n\n        # Base prompt input\n        self.prompt_label = tk.Label(self.left_panel, text=\"Base Prompt:\")\n        self.prompt_label.pack(pady=5)\n        self.base_prompt_entry = tk.Entry(self.left_panel, width=30)\n        self.base_prompt_entry.insert(0, \"Design a RESTful API for a library management system.\")\n        self.base_prompt_entry.pack(pady=5)\n\n        # GPT model selection\n        self.model_label = tk.Label(self.left_panel, text=\"Select GPT Model:\")\n        self.model_label.pack(pady=5)\n        self.gpt_model_selection = ttk.Combobox(self.left_panel, values=[\"gpt-3.5-turbo\", \"gpt-4\"])\n        self.gpt_model_selection.set(\"gpt-4\")\n        self.gpt_model_selection.pack(pady=5)\n\n        # Generate prompt button\n        self.generate_button = tk.Button(self.left_panel, text=\"Generate Prompt\", command=self.generate_prompt)\n        self.generate_button.pack(pady=5)\n\n        # Resulting prompt display\n        self.resulting_prompt_label = tk.Label(self.left_panel, text=\"Resulting Prompt:\")\n        self.resulting_prompt_label.pack(pady=5)\n        self.resulting_prompt_display = scrolledtext.ScrolledText(self.left_panel, width=30, height=10)\n        self.resulting_prompt_display.pack(pady=5)\n\n        # Call GPT API button\n        self.call_api_button = tk.Button(self.left_panel, text=\"Call GPT API\", command=self.call_gpt_api)\n        self.call_api_button.pack(pady=5)\n\n        # Chat log display\n        self.chat_log = scrolledtext.ScrolledText(self.right_panel, wrap=tk.WORD, bg='lightyellow')\n        self.chat_log.pack(fill=tk.BOTH, expand=True)\n\n    def generate_prompt(self):\n        role = self.role_selection.get()\n        top_p = self.top_p_slider.get()\n        temperature = self.temperature_slider.get()\n        include_markdown = self.include_markdown_var.get()\n        include_questions = self.include_questions_var.get()\n        base_prompt = self.base_prompt_entry.get()\n\n        prompt = f\"Role: {role}\\n\"\n        prompt += f\"Base Prompt: {base_prompt}\\n\"\n        if include_markdown:\n            prompt += \"Please include headings and formatting.\\n\"\n        if include_questions:\n            prompt += \"If you have any clarifying questions about the task, ask now before answering.\\n\"\n        \n        self.resulting_prompt_display.delete(1.0, tk.END)\n        self.resulting_prompt_display.insert(tk.END, prompt)\n\n    def call_gpt_api(self):\n        prompt = self.resulting_prompt_display.get(1.0, tk.END).strip()\n        model = self.gpt_model_selection.get()\n\n        if prompt:\n            response = openai.ChatCompletion.create(\n                model=model,\n                messages=[{\"role\": \"user\", \"content\": prompt}],\n                temperature=self.temperature_slider.get(),\n                top_p=self.top_p_slider.get()\n            )\n            answer = response.choices[0].message['content']\n            self.chat_log.insert(tk.END, f\"User: {prompt}\\n\")\n            self.chat_log.insert(tk.END, f\"GPT: {answer}\\n\\n\")\n            self.chat_log.see(tk.END)  # Scroll to the bottom\n\nif __name__ == \"__main__\":\n    root = tk.Tk()\n    app = PromptEditorApp(root)\n    root.mainloop()\n```\n\n### Instructions to Run the Code:\n1. Replace `'YOUR_API_KEY'` with your actual OpenAI API key.\n2. Save the code in a Python file, for example, `prompt_editor.py`.\n3. Run the script using Python 3.\n\n### Features:\n- The left panel contains all the controls for selecting roles, adjusting sliders, and entering prompts.\n- The right panel displays the chat log, showing the conversation with the GPT model.\n- The application allows you to generate a prompt based on the selected options and call the GPT API to get responses.\n\n### Note:\n- Ensure you have a valid OpenAI API key and that your account has access to the models you are trying to use.\n- The GUI is built using `tkinter`, which is included with Python installations.",
        "Based on your selections, here is the resulting prompt for the GPT model:\n\n---\n\n**Role:** Software Developer  \n**Top P:** 0.9  \n**Temperature:** 0.5  \n**Include Markdown:** No  \n**Include Questions:** Yes  \n\n**Base Prompt:**  \n\"Design a RESTful API for a library management system.\"\n\n---\n\n### Resulting Prompt:\n\"Design a RESTful API for a library management system. What endpoints would you include? How would you handle authentication and authorization? What data models would be necessary?\"\n\n---\n\n### Chat Log:\n- (No previous queries)\n\n---\n\n### Next Steps:\n- You can now call the selected GPT API using the \"gpt-4\" model with the above prompt. Would you like to proceed with that?"
    ]
}