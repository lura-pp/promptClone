{
    "title": "'''code generator'''",
    "original_prompt": "\"Be my code writer\"",
    "split_prompt": "This is a prompt description:```json\n{\n    \"spliting prompt\": {\n        \"role\": [\n            \"code writer\"\n        ],\n        \"action\": [\n            \"be\"\n        ],\n        \"request_type\": [\n            \"request\"\n        ]\n    }\n}\n```",
    "input1": " \"Create a Python function that takes a list of integers and returns a new list containing only the even numbers, while also ensuring that the original list remains unchanged. Additionally, include error handling for non-integer inputs.\"\n\n",
    "input2": " \"Write a JavaScript program that fetches data from a public API, processes the JSON response to extract specific fields, and displays the results in a user-friendly format on a web page. Ensure to handle any potential errors during the fetch operation.\"",
    "input1_ans": [
        "Certainly! Below is a Python function that takes a list of integers, filters out the even numbers, and returns a new list containing only those even numbers. The function also includes error handling to ensure that all elements in the input list are integers.\n\n```python\ndef filter_even_numbers(input_list):\n    # Check if the input is a list\n    if not isinstance(input_list, list):\n        raise ValueError(\"Input must be a list.\")\n    \n    # Initialize an empty list to store even numbers\n    even_numbers = []\n    \n    for item in input_list:\n        # Check if the item is an integer\n        if not isinstance(item, int):\n            raise ValueError(f\"Non-integer value found: {item}\")\n        \n        # Check if the number is even\n        if item % 2 == 0:\n            even_numbers.append(item)\n    \n    return even_numbers\n\n# Example usage:\ntry:\n    original_list = [1, 2, 3, 4, 5, 6]\n    even_list = filter_even_numbers(original_list)\n    print(\"Original list:\", original_list)\n    print(\"Even numbers:\", even_list)\nexcept ValueError as e:\n    print(e)\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if the input is a list. If not, it raises a `ValueError`.\n2. **Iterate through the List**: It then iterates through each item in the list.\n3. **Type Checking**: For each item, it checks if it is an integer. If it encounters a non-integer, it raises a `ValueError` with a message indicating the problematic value.\n4. **Filtering Even Numbers**: If the item is an integer and even, it appends it to the `even_numbers` list.\n5. **Return Value**: Finally, it returns the list of even numbers.\n\nThis function ensures that the original list remains unchanged and handles errors gracefully.",
        "Here is a Python function that meets your requirements. It takes a list of integers, filters out the even numbers, and returns a new list containing only those even numbers. The function also includes error handling to manage non-integer inputs.\n\n```python\ndef filter_even_numbers(input_list):\n    # Check if the input is a list\n    if not isinstance(input_list, list):\n        raise ValueError(\"Input must be a list.\")\n    \n    even_numbers = []\n    \n    for item in input_list:\n        # Check if the item is an integer\n        if not isinstance(item, int):\n            raise ValueError(f\"Non-integer value found: {item}\")\n        \n        # Check if the number is even\n        if item % 2 == 0:\n            even_numbers.append(item)\n    \n    return even_numbers\n\n# Example usage:\ntry:\n    original_list = [1, 2, 3, 4, 5, 6]\n    even_list = filter_even_numbers(original_list)\n    print(\"Original List:\", original_list)  # Should remain unchanged\n    print(\"Even Numbers List:\", even_list)  # Should contain [2, 4, 6]\nexcept ValueError as e:\n    print(e)\n```\n\n### Explanation:\n- The function `filter_even_numbers` takes one parameter, `input_list`.\n- It first checks if the input is a list; if not, it raises a `ValueError`.\n- It then iterates through each item in the list, checking if each item is an integer. If a non-integer is found, it raises a `ValueError` with a message indicating the problematic value.\n- If the item is an integer and even, it is added to the `even_numbers` list.\n- Finally, the function returns the new list of even numbers, leaving the original list unchanged."
    ],
    "input2_ans": [
        "Certainly! Below is a simple JavaScript program that fetches data from a public API, processes the JSON response, and displays the results on a web page. For this example, we'll use the JSONPlaceholder API, which is a free fake online REST API for testing and prototyping.\n\n### HTML Structure\n\nFirst, create an HTML file (`index.html`) to set up the basic structure of the web page:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Fetch Data Example</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        .post {\n            border: 1px solid #ccc;\n            padding: 10px;\n            margin-bottom: 10px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Posts from JSONPlaceholder</h1>\n    <div id=\"posts\"></div>\n    <script src=\"script.js\"></script>\n</body>\n</html>\n```\n\n### JavaScript Code\n\nNext, create a JavaScript file (`script.js`) that will handle the fetching and displaying of the data:\n\n```javascript\n// script.js\n\nasync function fetchPosts() {\n    const url = 'https://jsonplaceholder.typicode.com/posts';\n    const postsContainer = document.getElementById('posts');\n\n    try {\n        const response = await fetch(url);\n        \n        // Check if the response is ok (status in the range 200-299)\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        // Process and display the data\n        data.forEach(post => {\n            const postDiv = document.createElement('div');\n            postDiv.className = 'post';\n            postDiv.innerHTML = `\n                <h2>${post.title}</h2>\n                <p>${post.body}</p>\n            `;\n            postsContainer.appendChild(postDiv);\n        });\n    } catch (error) {\n        // Handle errors\n        console.error('Error fetching data:', error);\n        postsContainer.innerHTML = `<p>Error fetching posts: ${error.message}</p>`;\n    }\n}\n\n// Call the function to fetch posts when the page loads\nwindow.onload = fetchPosts;\n```\n\n### Explanation\n\n1. **HTML Structure**: The HTML file contains a heading and a div with the ID `posts` where the fetched posts will be displayed.\n\n2. **JavaScript Code**:\n   - The `fetchPosts` function is defined as an asynchronous function to handle the fetch operation.\n   - It uses the Fetch API to get data from the JSONPlaceholder API.\n   - It checks if the response is successful (status code 200-299). If not, it throws an error.\n   - The JSON response is processed, and for each post, a new div is created and populated with the post's title and body.\n   - If an error occurs during the fetch operation, it is caught and displayed in the `posts` div.\n\n3. **Error Handling**: The program includes error handling to catch any issues that arise during the fetch operation and display an appropriate message to the user.\n\n### Running the Program\n\nTo run the program, simply open the `index.html` file in a web browser. You should see a list of posts fetched from the JSONPlaceholder API displayed on the page. If there are any errors during the fetch operation, an error message will be shown instead.",
        "Here's a simple JavaScript program that fetches data from a public API, processes the JSON response, and displays the results on a web page. In this example, we'll use the JSONPlaceholder API, which is a free fake online REST API for testing and prototyping.\n\n### HTML Structure\n\nFirst, create a basic HTML structure to display the results:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Fetch Data from API</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        .post {\n            border: 1px solid #ccc;\n            padding: 10px;\n            margin-bottom: 10px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Posts from JSONPlaceholder</h1>\n    <div id=\"posts\"></div>\n    <script src=\"script.js\"></script>\n</body>\n</html>\n```\n\n### JavaScript Code\n\nNext, create a `script.js` file to handle the fetching and processing of the data:\n\n```javascript\n// script.js\n\nasync function fetchPosts() {\n    const url = 'https://jsonplaceholder.typicode.com/posts';\n    const postsContainer = document.getElementById('posts');\n\n    try {\n        const response = await fetch(url);\n        \n        // Check if the response is ok (status in the range 200-299)\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        // Process the data to extract specific fields\n        data.forEach(post => {\n            const postElement = document.createElement('div');\n            postElement.classList.add('post');\n            postElement.innerHTML = `\n                <h2>${post.title}</h2>\n                <p>${post.body}</p>\n            `;\n            postsContainer.appendChild(postElement);\n        });\n    } catch (error) {\n        // Handle any errors that occurred during the fetch operation\n        postsContainer.innerHTML = `<p>Error fetching posts: ${error.message}</p>`;\n    }\n}\n\n// Call the function to fetch posts when the page loads\nwindow.onload = fetchPosts;\n```\n\n### Explanation\n\n1. **HTML Structure**: The HTML file contains a heading and a div with the id `posts` where the fetched data will be displayed.\n\n2. **JavaScript Code**:\n   - The `fetchPosts` function is defined as an asynchronous function to handle the fetch operation.\n   - It uses the Fetch API to get data from the JSONPlaceholder API.\n   - The response is checked for errors. If the response is not OK, an error is thrown.\n   - The JSON data is processed to extract the `title` and `body` of each post.\n   - Each post is displayed in a user-friendly format within the `posts` div.\n   - If an error occurs during the fetch operation, an error message is displayed.\n\n3. **Error Handling**: The program includes error handling to catch any issues that may arise during the fetch operation, ensuring a smooth user experience.\n\n### Running the Program\n\nTo run the program, simply open the HTML file in a web browser. The JavaScript will automatically fetch the posts from the API and display them on the page."
    ]
}