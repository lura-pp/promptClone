{
    "title": "Scene 1: Front-end Code Assistant",
    "original_prompt": "Scene: Front-end code writing\nPosition: Front-end\nLanguage: VUE, Echarts\nRequirement: Need to create a large screen display, want to use a stacked bar chart to show the monthly working hours of the product, development, and testing positions in the project. The graphic should be 500*600.",
    "split_prompt": "This is a prompt description:```json\n{\n    \"spliting prompt\": {\n        \"scene\": [\n            \"Front-end code writing\"\n        ],\n        \"position\": [\n            \"Front-end\"\n        ],\n        \"language\": [\n            \"VUE\",\n            \"Echarts\"\n        ],\n        \"requirement\": [\n            \"Create a large screen display\",\n            \"Use a stacked bar chart\",\n            \"Show monthly working hours of product, development, and testing positions\"\n        ],\n        \"graphic_dimensions\": [\n            \"500*600\"\n        ]\n    }\n}\n```",
    "input1": " Create a large screen display using VUE and Echarts to visualize the monthly working hours of three positions: product, development, and testing. The stacked bar chart should represent the data for each month from January to December, with the chart dimensions set to 500 pixels in width and 600 pixels in height. Ensure that the chart includes a legend, tooltips, and appropriate axis labels for clarity.\n\n",
    "input2": " Develop a VUE component that utilizes Echarts to render a stacked bar chart for a large screen display. The chart should illustrate the monthly working hours for product management, software development, and quality assurance roles over a 12-month period. The dimensions of the chart must be 500 pixels wide and 600 pixels tall, and it should feature interactive elements such as hover effects and a detailed legend to enhance user experience.",
    "input1_ans": [
        "To create a large screen display using Vue and Echarts for visualizing the monthly working hours of product, development, and testing positions, you can follow the steps below. This example assumes you have a Vue project set up and Echarts installed.\n\n### Step 1: Install Echarts\n\nIf you haven't already installed Echarts, you can do so using npm:\n\n```bash\nnpm install echarts --save\n```\n\n### Step 2: Create the Chart Component\n\nCreate a new Vue component, for example, `StackedBarChart.vue`, and add the following code:\n\n```vue\n<template>\n  <div ref=\"chart\" style=\"width: 500px; height: 600px;\"></div>\n</template>\n\n<script>\nimport * as echarts from 'echarts';\n\nexport default {\n  name: 'StackedBarChart',\n  data() {\n    return {\n      chartInstance: null,\n      // Sample data for monthly working hours\n      monthlyData: {\n        product: [120, 132, 101, 134, 90, 230, 210, 150, 200, 180, 220, 250],\n        development: [220, 182, 191, 234, 290, 330, 310, 250, 300, 280, 320, 350],\n        testing: [150, 232, 201, 154, 190, 330, 410, 300, 350, 320, 370, 400],\n      },\n    };\n  },\n  mounted() {\n    this.initChart();\n  },\n  methods: {\n    initChart() {\n      this.chartInstance = echarts.init(this.$refs.chart);\n      this.chartInstance.setOption(this.getChartOptions());\n    },\n    getChartOptions() {\n      return {\n        title: {\n          text: 'Monthly Working Hours',\n          left: 'center',\n        },\n        tooltip: {\n          trigger: 'axis',\n        },\n        legend: {\n          data: ['Product', 'Development', 'Testing'],\n          top: '10%',\n        },\n        xAxis: {\n          type: 'category',\n          data: [\n            'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n            'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n          ],\n          axisLabel: {\n            interval: 0,\n          },\n        },\n        yAxis: {\n          type: 'value',\n          name: 'Hours',\n          nameLocation: 'middle',\n          nameGap: 30,\n        },\n        series: [\n          {\n            name: 'Product',\n            type: 'bar',\n            stack: 'total',\n            data: this.monthlyData.product,\n          },\n          {\n            name: 'Development',\n            type: 'bar',\n            stack: 'total',\n            data: this.monthlyData.development,\n          },\n          {\n            name: 'Testing',\n            type: 'bar',\n            stack: 'total',\n            data: this.monthlyData.testing,\n          },\n        ],\n      };\n    },\n  },\n  beforeDestroy() {\n    if (this.chartInstance) {\n      this.chartInstance.dispose();\n    }\n  },\n};\n</script>\n\n<style scoped>\n</style>\n```\n\n### Step 3: Use the Chart Component\n\nNow, you can use the `StackedBarChart` component in your main application or any other component:\n\n```vue\n<template>\n  <div id=\"app\">\n    <h1>Project Working Hours Overview</h1>\n    <StackedBarChart />\n  </div>\n</template>\n\n<script>\nimport StackedBarChart from './components/StackedBarChart.vue';\n\nexport default {\n  name: 'App',\n  components: {\n    StackedBarChart,\n  },\n};\n</script>\n\n<style>\n#app {\n  text-align: center;\n  margin-top: 50px;\n}\n</style>\n```\n\n### Step 4: Run Your Application\n\nMake sure your Vue application is running. You should see a stacked bar chart displaying the monthly working hours for product, development, and testing positions.\n\n### Additional Notes\n\n- You can customize the `monthlyData` array with actual data as needed.\n- The chart dimensions are set to 500 pixels in width and 600 pixels in height as per your requirement.\n- The chart includes a legend, tooltips, and appropriate axis labels for clarity.",
        "To create a large screen display using Vue and Echarts for visualizing the monthly working hours of product, development, and testing positions in a stacked bar chart, you can follow the steps below. This example assumes you have a Vue project set up and Echarts installed.\n\n### Step 1: Install Echarts\n\nIf you haven't already installed Echarts, you can do so using npm:\n\n```bash\nnpm install echarts --save\n```\n\n### Step 2: Create the Vue Component\n\nCreate a new Vue component, for example, `StackedBarChart.vue`.\n\n```vue\n<template>\n  <div ref=\"chart\" :style=\"{ width: '500px', height: '600px' }\"></div>\n</template>\n\n<script>\nimport * as echarts from 'echarts';\n\nexport default {\n  name: 'StackedBarChart',\n  data() {\n    return {\n      chartInstance: null,\n      chartData: {\n        months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n        product: [120, 132, 101, 134, 90, 230, 210, 150, 160, 180, 200, 220],\n        development: [220, 182, 191, 234, 290, 330, 310, 250, 260, 280, 300, 320],\n        testing: [150, 232, 201, 154, 190, 330, 410, 300, 310, 320, 340, 360]\n      }\n    };\n  },\n  mounted() {\n    this.initChart();\n  },\n  methods: {\n    initChart() {\n      this.chartInstance = echarts.init(this.$refs.chart);\n      this.chartInstance.setOption(this.getChartOptions());\n    },\n    getChartOptions() {\n      return {\n        title: {\n          text: 'Monthly Working Hours',\n          left: 'center'\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'shadow'\n          }\n        },\n        legend: {\n          data: ['Product', 'Development', 'Testing'],\n          top: '10%'\n        },\n        xAxis: {\n          type: 'category',\n          data: this.chartData.months,\n          axisLabel: {\n            rotate: 30\n          }\n        },\n        yAxis: {\n          type: 'value',\n          name: 'Hours',\n          nameLocation: 'middle',\n          nameGap: 30\n        },\n        series: [\n          {\n            name: 'Product',\n            type: 'bar',\n            stack: 'total',\n            data: this.chartData.product,\n            emphasis: {\n              focus: 'series'\n            }\n          },\n          {\n            name: 'Development',\n            type: 'bar',\n            stack: 'total',\n            data: this.chartData.development,\n            emphasis: {\n              focus: 'series'\n            }\n          },\n          {\n            name: 'Testing',\n            type: 'bar',\n            stack: 'total',\n            data: this.chartData.testing,\n            emphasis: {\n              focus: 'series'\n            }\n          }\n        ]\n      };\n    }\n  },\n  beforeDestroy() {\n    if (this.chartInstance) {\n      this.chartInstance.dispose();\n    }\n  }\n};\n</script>\n\n<style scoped>\n</style>\n```\n\n### Step 3: Use the Component\n\nNow, you can use the `StackedBarChart` component in your main application file or any other component.\n\n```vue\n<template>\n  <div id=\"app\">\n    <StackedBarChart />\n  </div>\n</template>\n\n<script>\nimport StackedBarChart from './components/StackedBarChart.vue';\n\nexport default {\n  name: 'App',\n  components: {\n    StackedBarChart\n  }\n};\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n```\n\n### Step 4: Run Your Application\n\nMake sure your Vue application is running. You should see a stacked bar chart displaying the monthly working hours for product, development, and testing positions.\n\n### Additional Notes\n\n- You can customize the data in the `chartData` object to reflect actual working hours.\n- The chart dimensions are set to 500 pixels in width and 600 pixels in height as per your requirement.\n- The chart includes a legend, tooltips, and appropriate axis labels for clarity."
    ],
    "input2_ans": [
        "To create a Vue component that utilizes Echarts to render a stacked bar chart for the specified requirements, you can follow the code example below. This example assumes you have already installed Echarts and Vue in your project.\n\n### Step 1: Install Echarts\n\nIf you haven't installed Echarts yet, you can do so using npm:\n\n```bash\nnpm install echarts --save\n```\n\n### Step 2: Create the Vue Component\n\nCreate a new Vue component named `StackedBarChart.vue`:\n\n```vue\n<template>\n  <div ref=\"chart\" style=\"width: 500px; height: 600px;\"></div>\n</template>\n\n<script>\nimport * as echarts from 'echarts';\n\nexport default {\n  name: 'StackedBarChart',\n  data() {\n    return {\n      chartInstance: null,\n      // Sample data for the chart\n      months: [\n        'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', \n        'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n      ],\n      workingHours: {\n        product: [120, 132, 101, 134, 90, 230, 210, 150, 180, 200, 220, 240],\n        development: [220, 182, 191, 234, 290, 330, 310, 250, 280, 300, 320, 340],\n        testing: [150, 232, 201, 154, 190, 330, 410, 300, 320, 350, 370, 390]\n      }\n    };\n  },\n  mounted() {\n    this.initChart();\n  },\n  methods: {\n    initChart() {\n      this.chartInstance = echarts.init(this.$refs.chart);\n      this.chartInstance.setOption(this.getChartOptions());\n      window.addEventListener('resize', this.resizeChart);\n    },\n    getChartOptions() {\n      return {\n        title: {\n          text: 'Monthly Working Hours',\n          subtext: 'Product Management, Development, and Testing',\n          left: 'center'\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'shadow'\n          }\n        },\n        legend: {\n          data: ['Product Management', 'Development', 'Testing'],\n          bottom: '10%'\n        },\n        xAxis: {\n          type: 'category',\n          data: this.months,\n          axisLabel: {\n            interval: 0\n          }\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: [\n          {\n            name: 'Product Management',\n            type: 'bar',\n            stack: 'total',\n            data: this.workingHours.product,\n            emphasis: {\n              focus: 'series'\n            }\n          },\n          {\n            name: 'Development',\n            type: 'bar',\n            stack: 'total',\n            data: this.workingHours.development,\n            emphasis: {\n              focus: 'series'\n            }\n          },\n          {\n            name: 'Testing',\n            type: 'bar',\n            stack: 'total',\n            data: this.workingHours.testing,\n            emphasis: {\n              focus: 'series'\n            }\n          }\n        ]\n      };\n    },\n    resizeChart() {\n      if (this.chartInstance) {\n        this.chartInstance.resize();\n      }\n    }\n  },\n  beforeDestroy() {\n    window.removeEventListener('resize', this.resizeChart);\n    if (this.chartInstance) {\n      this.chartInstance.dispose();\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Add any additional styles here */\n</style>\n```\n\n### Step 3: Use the Component\n\nYou can now use the `StackedBarChart` component in your main application or any other component:\n\n```vue\n<template>\n  <div>\n    <h1>Project Working Hours Overview</h1>\n    <StackedBarChart />\n  </div>\n</template>\n\n<script>\nimport StackedBarChart from './components/StackedBarChart.vue';\n\nexport default {\n  components: {\n    StackedBarChart\n  }\n};\n</script>\n\n<style>\n/* Add any global styles here */\n</style>\n```\n\n### Explanation:\n\n1. **Chart Initialization**: The chart is initialized in the `mounted` lifecycle hook, and the options are set using the `setOption` method.\n2. **Responsive Design**: The chart resizes when the window is resized, ensuring it remains responsive.\n3. **Data Structure**: The working hours for each role are stored in an object for easy access.\n4. **Interactive Elements**: Tooltips and emphasis on hover are included to enhance user experience.\n5. **Styling**: The chart dimensions are set to 500x600 pixels as required.\n\nThis component can be further customized based on your specific needs, such as adding more data or changing styles.",
        "To create a Vue component that utilizes Echarts to render a stacked bar chart for a large screen display, you can follow the steps below. This example assumes you have already set up a Vue project and installed Echarts.\n\n### Step 1: Install Echarts\n\nIf you haven't already installed Echarts, you can do so using npm:\n\n```bash\nnpm install echarts --save\n```\n\n### Step 2: Create the Vue Component\n\nCreate a new Vue component named `StackedBarChart.vue`. Here\u2019s how you can implement it:\n\n```vue\n<template>\n  <div ref=\"chart\" :style=\"{ width: '500px', height: '600px' }\"></div>\n</template>\n\n<script>\nimport * as echarts from 'echarts';\n\nexport default {\n  name: 'StackedBarChart',\n  data() {\n    return {\n      chartInstance: null,\n      // Sample data for monthly working hours\n      months: [\n        'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', \n        'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n      ],\n      productHours: [120, 132, 101, 134, 90, 230, 210, 150, 180, 200, 220, 240],\n      developmentHours: [220, 182, 191, 234, 290, 330, 310, 250, 280, 300, 320, 340],\n      testingHours: [150, 232, 201, 154, 190, 330, 410, 300, 320, 340, 360, 380],\n    };\n  },\n  mounted() {\n    this.initChart();\n  },\n  methods: {\n    initChart() {\n      this.chartInstance = echarts.init(this.$refs.chart);\n      this.chartInstance.setOption(this.getChartOptions());\n      window.addEventListener('resize', this.resizeChart);\n    },\n    getChartOptions() {\n      return {\n        title: {\n          text: 'Monthly Working Hours',\n          subtext: 'Product Management, Development, and Testing',\n          left: 'center',\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'shadow',\n          },\n        },\n        legend: {\n          data: ['Product Management', 'Development', 'Quality Assurance'],\n          bottom: '10%',\n        },\n        xAxis: {\n          type: 'category',\n          data: this.months,\n        },\n        yAxis: {\n          type: 'value',\n        },\n        series: [\n          {\n            name: 'Product Management',\n            type: 'bar',\n            stack: 'total',\n            data: this.productHours,\n            emphasis: {\n              focus: 'series',\n            },\n          },\n          {\n            name: 'Development',\n            type: 'bar',\n            stack: 'total',\n            data: this.developmentHours,\n            emphasis: {\n              focus: 'series',\n            },\n          },\n          {\n            name: 'Quality Assurance',\n            type: 'bar',\n            stack: 'total',\n            data: this.testingHours,\n            emphasis: {\n              focus: 'series',\n            },\n          },\n        ],\n      };\n    },\n    resizeChart() {\n      if (this.chartInstance) {\n        this.chartInstance.resize();\n      }\n    },\n  },\n  beforeDestroy() {\n    window.removeEventListener('resize', this.resizeChart);\n    if (this.chartInstance) {\n      this.chartInstance.dispose();\n    }\n  },\n};\n</script>\n\n<style scoped>\n/* Add any additional styles here */\n</style>\n```\n\n### Step 3: Use the Component\n\nYou can now use the `StackedBarChart` component in your main application or any other component:\n\n```vue\n<template>\n  <div>\n    <h1>Work Hours Dashboard</h1>\n    <StackedBarChart />\n  </div>\n</template>\n\n<script>\nimport StackedBarChart from './components/StackedBarChart.vue';\n\nexport default {\n  components: {\n    StackedBarChart,\n  },\n};\n</script>\n```\n\n### Explanation\n\n1. **Template**: The template contains a `div` that will hold the Echarts instance. The dimensions are set to 500px by 600px.\n\n2. **Data**: The component has sample data for monthly working hours for product management, development, and testing roles.\n\n3. **Mounted Hook**: The `initChart` method initializes the Echarts instance and sets the options for the chart.\n\n4. **Chart Options**: The `getChartOptions` method defines the configuration for the stacked bar chart, including titles, tooltips, legends, axes, and series data.\n\n5. **Resize Handling**: The chart is responsive to window resizing, ensuring it maintains its dimensions.\n\n6. **Cleanup**: The `beforeDestroy` lifecycle hook removes the event listener and disposes of the Echarts instance to prevent memory leaks.\n\n### Conclusion\n\nThis component will render a stacked bar chart displaying the monthly working hours for the specified roles, complete with interactive tooltips and a legend for better user experience. You can customize the data and styles as needed."
    ]
}