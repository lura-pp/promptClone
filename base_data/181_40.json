{
    "title": "FastAPI controller builder",
    "original_prompt": "You are a fastapi controller builder. Your purpose is to build controllers based on user input.\nFollow this rules when building the code answer:\n1. Share code ONLY\n2. Mock data IO operations\n3. Make google-styled comments\n4. Use pydantic models\n5. Write clean efficient code\n6. Use as many fastapi features as possible\n7. Use less tokens for answer\nAnswer \"FastAPI builder initialised\" if rules are clear",
    "split_prompt": "This is a prompt description:```json\n{\n    \"spliting prompt\": {\n        \"role\": [\n            \"fastapi controller builder\"\n        ],\n        \"purpose\": [\n            \"build controllers based on user input\"\n        ],\n        \"rules\": [\n            \"Share code ONLY\",\n            \"Mock data IO operations\",\n            \"Make google-styled comments\",\n            \"Use pydantic models\",\n            \"Write clean efficient code\",\n            \"Use as many fastapi features as possible\",\n            \"Use less tokens for answer\"\n        ],\n        \"response\": [\n            \"FastAPI builder initialised\"\n        ]\n    }\n}\n```",
    "input1": " {\n    \"endpoint\": \"/items/\",\n    \"methods\": [\"GET\", \"POST\"],\n    \"model\": {\n        \"name\": \"Item\",\n        \"fields\": {\n            \"id\": \"int\",\n            \"name\": \"str\",\n            \"description\": \"str\",\n            \"price\": \"float\"\n        }\n    },\n    \"mock_data\": [\n        {\"id\": 1, \"name\": \"Item A\", \"description\": \"Description A\", \"price\": 10.0},\n        {\"id\": 2, \"name\": \"Item B\", \"description\": \"Description B\", \"price\": 20.0}\n    ]\n}\n\n",
    "input2": " {\n    \"endpoint\": \"/users/{user_id}\",\n    \"methods\": [\"GET\", \"PUT\"],\n    \"model\": {\n        \"name\": \"User\",\n        \"fields\": {\n            \"user_id\": \"int\",\n            \"username\": \"str\",\n            \"email\": \"str\",\n            \"is_active\": \"bool\"\n        }\n    },\n    \"mock_data\": [\n        {\"user_id\": 1, \"username\": \"user1\", \"email\": \"user1@example.com\", \"is_active\": true},\n        {\"user_id\": 2, \"username\": \"user2\", \"email\": \"user2@example.com\", \"is_active\": false}\n    ]\n}",
    "input1_ans": [
        "```python\nfrom fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\nfrom typing import List\n\napp = FastAPI()\n\n# Pydantic model for Item\nclass Item(BaseModel):\n    id: int\n    name: str\n    description: str\n    price: float\n\n# Mock data\nmock_items = [\n    Item(id=1, name=\"Item A\", description=\"Description A\", price=10.0),\n    Item(id=2, name=\"Item B\", description=\"Description B\", price=20.0)\n]\n\n@app.get(\"/items/\", response_model=List[Item])\nasync def get_items():\n    \"\"\"Retrieve all items.\"\"\"\n    return mock_items\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item):\n    \"\"\"Create a new item.\"\"\"\n    mock_items.append(item)\n    return item\n```",
        "```python\nfrom fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\nfrom typing import List\n\napp = FastAPI()\n\n# Pydantic model for Item\nclass Item(BaseModel):\n    id: int\n    name: str\n    description: str\n    price: float\n\n# Mock data\nmock_items = [\n    Item(id=1, name=\"Item A\", description=\"Description A\", price=10.0),\n    Item(id=2, name=\"Item B\", description=\"Description B\", price=20.0)\n]\n\n@app.get(\"/items/\", response_model=List[Item])\nasync def get_items():\n    \"\"\"Retrieve a list of items.\"\"\"\n    return mock_items\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item):\n    \"\"\"Create a new item.\"\"\"\n    mock_items.append(item)\n    return item\n```"
    ],
    "input2_ans": [
        "```python\nfrom fastapi import FastAPI, HTTPException, Path\nfrom pydantic import BaseModel\nfrom typing import List, Optional\n\napp = FastAPI()\n\n# User model\nclass User(BaseModel):\n    user_id: int\n    username: str\n    email: str\n    is_active: bool\n\n# Mock data\nmock_users = [\n    User(user_id=1, username=\"user1\", email=\"user1@example.com\", is_active=True),\n    User(user_id=2, username=\"user2\", email=\"user2@example.com\", is_active=False),\n]\n\n@app.get(\"/users/{user_id}\", response_model=User)\nasync def get_user(user_id: int = Path(..., description=\"The ID of the user to retrieve\")):\n    \"\"\"Retrieve a user by user_id.\"\"\"\n    user = next((user for user in mock_users if user.user_id == user_id), None)\n    if user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return user\n\n@app.put(\"/users/{user_id}\", response_model=User)\nasync def update_user(user_id: int, user: User):\n    \"\"\"Update a user by user_id.\"\"\"\n    for index, existing_user in enumerate(mock_users):\n        if existing_user.user_id == user_id:\n            mock_users[index] = user\n            return user\n    raise HTTPException(status_code=404, detail=\"User not found\")\n```",
        "```python\nfrom fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\nfrom typing import List, Optional\n\napp = FastAPI()\n\n# Pydantic model for User\nclass User(BaseModel):\n    user_id: int\n    username: str\n    email: str\n    is_active: bool\n\n# Mock data\nmock_users = [\n    User(user_id=1, username=\"user1\", email=\"user1@example.com\", is_active=True),\n    User(user_id=2, username=\"user2\", email=\"user2@example.com\", is_active=False)\n]\n\n@app.get(\"/users/{user_id}\", response_model=User)\nasync def get_user(user_id: int):\n    \"\"\"Retrieve a user by user_id.\"\"\"\n    user = next((user for user in mock_users if user.user_id == user_id), None)\n    if user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return user\n\n@app.put(\"/users/{user_id}\", response_model=User)\nasync def update_user(user_id: int, user: User):\n    \"\"\"Update a user's information.\"\"\"\n    for index, existing_user in enumerate(mock_users):\n        if existing_user.user_id == user_id:\n            mock_users[index] = user\n            return user\n    raise HTTPException(status_code=404, detail=\"User not found\")\n```"
    ]
}