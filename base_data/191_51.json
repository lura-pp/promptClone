{
    "title": "Programming Language Teacher Tutorial",
    "original_prompt": "Act as a computer science teacher; Create a detailed tutorial for me to learn the basics of programming; The programming language should be [INSERT THE PROGRAMMING LANGUAGE YOU WANT TO LEARN, such as HTML, JavaScript, Python, Ruby, Swift...]; The topic is [INSERT THE SPECIFIC TOPIC YOU WANT TO LEARN, such as variables, conditional statements, loops, functions, modules, lists...]; Create 3 sample codes each (easy, medium, hard) including the appropriate output for each; Describe the snippets in step-by-step instructions. Address each topic with a detailed explanation.                     \n\nThe output should be presented in markdown format with appropriate headings and bullets for easy reading and comprehension.                                                                                                INPUT 1:\n- PROGRAMMING LANGUAGE I WANT TO LEARN: Python\n- SPECIFIC TOPIC I WANT TO LEARN: conditional statements",
    "split_prompt": "This is a prompt description:```json\n{\n    \"spliting prompt\": {\n        \"role\": [\n            \"computer science teacher\"\n        ],\n        \"tutorial_type\": [\n            \"detailed tutorial\"\n        ],\n        \"programming_language\": [\n            \"Python\"\n        ],\n        \"topic\": [\n            \"conditional statements\"\n        ],\n        \"sample_codes\": [\n            \"easy\",\n            \"medium\",\n            \"hard\"\n        ],\n        \"output_format\": [\n            \"markdown\"\n        ],\n        \"structure\": [\n            \"appropriate headings\",\n            \"bullets for easy reading\",\n            \"step-by-step instructions\",\n            \"detailed explanation\"\n        ]\n    }\n}\n```",
    "input1": " \n- PROGRAMMING LANGUAGE I WANT TO LEARN: Python\n- SPECIFIC TOPIC I WANT TO LEARN: conditional statements\n\n",
    "input2": " \n- PROGRAMMING LANGUAGE I WANT TO LEARN: JavaScript\n- SPECIFIC TOPIC I WANT TO LEARN: loops",
    "input1_ans": [
        "# Python Conditional Statements Tutorial\n\nConditional statements are a fundamental concept in programming that allow you to execute different pieces of code based on certain conditions. In Python, the primary conditional statements are `if`, `elif`, and `else`. This tutorial will guide you through the basics of conditional statements in Python, along with sample codes of varying difficulty levels.\n\n## What are Conditional Statements?\n\nConditional statements enable your program to make decisions. They evaluate a condition (an expression that returns `True` or `False`) and execute a block of code based on the result of that evaluation.\n\n### Basic Syntax\n\n```python\nif condition:\n    # code to execute if condition is True\nelif another_condition:\n    # code to execute if another_condition is True\nelse:\n    # code to execute if none of the above conditions are True\n```\n\n## Sample Codes\n\n### Easy Example\n\n**Code: Check if a number is positive, negative, or zero**\n\n```python\nnumber = 5\n\nif number > 0:\n    print(\"The number is positive.\")\nelif number < 0:\n    print(\"The number is negative.\")\nelse:\n    print(\"The number is zero.\")\n```\n\n**Output:**\n```\nThe number is positive.\n```\n\n**Explanation:**\n1. We define a variable `number` and assign it the value `5`.\n2. The `if` statement checks if `number` is greater than `0`. Since it is, the code inside this block executes, printing \"The number is positive.\"\n3. The `elif` and `else` blocks are not executed because the first condition was `True`.\n\n---\n\n### Medium Example\n\n**Code: Grade Evaluation**\n\n```python\nscore = 85\n\nif score >= 90:\n    print(\"Grade: A\")\nelif score >= 80:\n    print(\"Grade: B\")\nelif score >= 70:\n    print(\"Grade: C\")\nelif score >= 60:\n    print(\"Grade: D\")\nelse:\n    print(\"Grade: F\")\n```\n\n**Output:**\n```\nGrade: B\n```\n\n**Explanation:**\n1. We define a variable `score` and assign it the value `85`.\n2. The `if` statement checks if `score` is greater than or equal to `90`. It is not, so we move to the next condition.\n3. The `elif` statement checks if `score` is greater than or equal to `80`. This condition is `True`, so it prints \"Grade: B.\"\n4. The remaining conditions are not evaluated since one condition has already been satisfied.\n\n---\n\n### Hard Example\n\n**Code: Leap Year Checker**\n\n```python\nyear = 2024\n\nif (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n    print(f\"{year} is a leap year.\")\nelse:\n    print(f\"{year} is not a leap year.\")\n```\n\n**Output:**\n```\n2024 is a leap year.\n```\n\n**Explanation:**\n1. We define a variable `year` and assign it the value `2024`.\n2. The `if` statement checks if the year is divisible by `4` and not divisible by `100`, or if it is divisible by `400`.\n3. Since `2024` is divisible by `4` and not by `100`, the condition evaluates to `True`, and it prints \"2024 is a leap year.\"\n4. The `else` block is not executed because the `if` condition was satisfied.\n\n## Conclusion\n\nConditional statements are essential for controlling the flow of your program based on different conditions. By mastering `if`, `elif`, and `else`, you can create more dynamic and responsive applications. Practice writing your own conditional statements to reinforce your understanding!",
        "# Detailed Tutorial on Conditional Statements in Python\n\nConditional statements are a fundamental concept in programming that allow you to execute different blocks of code based on certain conditions. In Python, the primary conditional statements are `if`, `elif`, and `else`. This tutorial will guide you through the basics of conditional statements, along with sample codes of varying difficulty levels.\n\n## Table of Contents\n- [What are Conditional Statements?](#what-are-conditional-statements)\n- [Basic Syntax](#basic-syntax)\n- [Sample Codes](#sample-codes)\n  - [Easy Example](#easy-example)\n  - [Medium Example](#medium-example)\n  - [Hard Example](#hard-example)\n- [Conclusion](#conclusion)\n\n## What are Conditional Statements?\n\nConditional statements allow you to execute certain pieces of code based on whether a condition is true or false. They are essential for controlling the flow of a program. \n\n### Key Terms:\n- **Condition**: An expression that evaluates to `True` or `False`.\n- **Block of Code**: A group of statements that execute together.\n\n## Basic Syntax\n\nThe basic syntax of conditional statements in Python is as follows:\n\n```python\nif condition:\n    # block of code to execute if condition is true\nelif another_condition:\n    # block of code to execute if another_condition is true\nelse:\n    # block of code to execute if none of the above conditions are true\n```\n\n### Indentation\n- Python uses indentation to define the scope of the code blocks. Make sure to indent the code inside the `if`, `elif`, and `else` statements.\n\n## Sample Codes\n\n### Easy Example\n\nLet's start with a simple example that checks if a number is positive, negative, or zero.\n\n```python\n# Easy Example: Check if a number is positive, negative, or zero\nnumber = float(input(\"Enter a number: \"))\n\nif number > 0:\n    print(\"The number is positive.\")\nelif number < 0:\n    print(\"The number is negative.\")\nelse:\n    print(\"The number is zero.\")\n```\n\n### Medium Example\n\nIn this example, we will check the grade of a student based on their score.\n\n```python\n# Medium Example: Determine the grade based on score\nscore = int(input(\"Enter your score: \"))\n\nif score >= 90:\n    print(\"Grade: A\")\nelif score >= 80:\n    print(\"Grade: B\")\nelif score >= 70:\n    print(\"Grade: C\")\nelif score >= 60:\n    print(\"Grade: D\")\nelse:\n    print(\"Grade: F\")\n```\n\n### Hard Example\n\nNow, let's create a more complex example that checks if a year is a leap year.\n\n```python\n# Hard Example: Check if a year is a leap year\nyear = int(input(\"Enter a year: \"))\n\nif (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n    print(f\"{year} is a leap year.\")\nelse:\n    print(f\"{year} is not a leap year.\")\n```\n\n## Conclusion\n\nConditional statements are a powerful feature in Python that allow you to control the flow of your program based on specific conditions. By mastering these statements, you can create more dynamic and responsive applications. \n\n### Key Takeaways:\n- Use `if`, `elif`, and `else` to create conditional logic.\n- Remember to properly indent your code blocks.\n- Practice with different conditions to strengthen your understanding.\n\nFeel free to experiment with the sample codes provided and modify them to see how changes affect the output! Happy coding!"
    ],
    "input2_ans": [
        "# JavaScript Loops Tutorial\n\nIn this tutorial, we will explore loops in JavaScript. Loops are a fundamental concept in programming that allow you to execute a block of code multiple times. We will cover three types of loops: `for`, `while`, and `do...while`. Additionally, we will provide three sample code snippets of varying difficulty levels to illustrate how loops work.\n\n## What is a Loop?\n\nA loop is a control structure that repeats a block of code as long as a specified condition is true. This is useful for tasks that require repetitive actions, such as iterating over arrays or performing calculations multiple times.\n\n### Types of Loops in JavaScript\n\n1. **For Loop**: Used when the number of iterations is known.\n2. **While Loop**: Used when the number of iterations is not known and depends on a condition.\n3. **Do...While Loop**: Similar to the while loop, but it guarantees that the block of code will execute at least once.\n\n## Sample Code Snippets\n\n### Easy Example: For Loop\n\n```javascript\n// Easy Example: For Loop\nfor (let i = 0; i < 5; i++) {\n    console.log(\"Iteration number: \" + i);\n}\n```\n\n**Output:**\n```\nIteration number: 0\nIteration number: 1\nIteration number: 2\nIteration number: 3\nIteration number: 4\n```\n\n**Explanation:**\n- We declare a `for` loop that initializes `i` to `0`.\n- The loop continues as long as `i` is less than `5`.\n- After each iteration, `i` is incremented by `1`.\n- The `console.log` function prints the current iteration number.\n\n### Medium Example: While Loop\n\n```javascript\n// Medium Example: While Loop\nlet count = 0;\nwhile (count < 5) {\n    console.log(\"Count is: \" + count);\n    count++;\n}\n```\n\n**Output:**\n```\nCount is: 0\nCount is: 1\nCount is: 2\nCount is: 3\nCount is: 4\n```\n\n**Explanation:**\n- We initialize a variable `count` to `0`.\n- The `while` loop checks if `count` is less than `5`.\n- Inside the loop, we print the current value of `count` and then increment it by `1`.\n- The loop continues until `count` reaches `5`.\n\n### Hard Example: Do...While Loop with User Input\n\n```javascript\n// Hard Example: Do...While Loop\nlet userInput;\ndo {\n    userInput = prompt(\"Enter a number (type 'exit' to quit):\");\n    if (userInput !== 'exit') {\n        console.log(\"You entered: \" + userInput);\n    }\n} while (userInput !== 'exit');\n```\n\n**Output:**\n```\nEnter a number (type 'exit' to quit): 10\nYou entered: 10\nEnter a number (type 'exit' to quit): 20\nYou entered: 20\nEnter a number (type 'exit' to quit): exit\n```\n\n**Explanation:**\n- We declare a variable `userInput` to store the user's input.\n- The `do...while` loop executes the block of code at least once.\n- Inside the loop, we use `prompt` to ask the user for input.\n- If the user does not type 'exit', we print the entered number.\n- The loop continues until the user types 'exit'.\n\n## Conclusion\n\nIn this tutorial, we covered the basics of loops in JavaScript, including `for`, `while`, and `do...while` loops. We provided three examples of increasing complexity to illustrate how loops can be used in different scenarios. Understanding loops is essential for writing efficient and effective code, as they allow you to automate repetitive tasks. \n\nFeel free to experiment with the code snippets and modify them to deepen your understanding of loops in JavaScript!",
        "# Detailed Tutorial on Loops in JavaScript\n\nLoops are fundamental programming constructs that allow you to execute a block of code multiple times. In JavaScript, there are several types of loops, each serving different purposes. This tutorial will cover the most common types of loops: `for`, `while`, and `do...while` loops. We will provide easy, medium, and hard sample codes to illustrate their usage.\n\n## Table of Contents\n- [What are Loops?](#what-are-loops)\n- [Types of Loops](#types-of-loops)\n  - [For Loop](#for-loop)\n  - [While Loop](#while-loop)\n  - [Do...While Loop](#do-while-loop)\n- [Sample Codes](#sample-codes)\n  - [Easy Example](#easy-example)\n  - [Medium Example](#medium-example)\n  - [Hard Example](#hard-example)\n- [Conclusion](#conclusion)\n\n## What are Loops?\n- Loops are used to execute a block of code repeatedly.\n- They help in automating repetitive tasks.\n- Loops can iterate over arrays, objects, or any iterable data structure.\n\n## Types of Loops\nJavaScript provides several types of loops:\n\n### For Loop\n- The `for` loop is used when the number of iterations is known beforehand.\n- Syntax:\n  ```javascript\n  for (initialization; condition; increment/decrement) {\n      // code to be executed\n  }\n  ```\n\n### While Loop\n- The `while` loop is used when the number of iterations is not known and depends on a condition.\n- Syntax:\n  ```javascript\n  while (condition) {\n      // code to be executed\n  }\n  ```\n\n### Do...While Loop\n- The `do...while` loop is similar to the `while` loop, but it guarantees that the code block will be executed at least once.\n- Syntax:\n  ```javascript\n  do {\n      // code to be executed\n  } while (condition);\n  ```\n\n## Sample Codes\n\n### Easy Example\n**Using a For Loop to Print Numbers 1 to 5**\n```javascript\nfor (let i = 1; i <= 5; i++) {\n    console.log(i);\n}\n```\n- **Explanation**: This loop initializes `i` to 1, checks if `i` is less than or equal to 5, and increments `i` by 1 after each iteration. It prints numbers from 1 to 5.\n\n### Medium Example\n**Using a While Loop to Sum Numbers Until a Condition is Met**\n```javascript\nlet sum = 0;\nlet number = 1;\n\nwhile (number <= 5) {\n    sum += number; // Add number to sum\n    number++; // Increment number\n}\n\nconsole.log(\"Sum:\", sum);\n```\n- **Explanation**: This loop continues to add `number` to `sum` until `number` exceeds 5. It prints the total sum of numbers from 1 to 5.\n\n### Hard Example\n**Using a Do...While Loop to Validate User Input**\n```javascript\nlet userInput;\ndo {\n    userInput = prompt(\"Enter a number greater than 10:\");\n} while (userInput <= 10);\n\nconsole.log(\"You entered:\", userInput);\n```\n- **Explanation**: This loop prompts the user to enter a number until they provide a number greater than 10. The loop will execute at least once, ensuring the user is prompted.\n\n## Conclusion\nLoops are essential for performing repetitive tasks in JavaScript. Understanding how to use `for`, `while`, and `do...while` loops will enhance your programming skills and allow you to write more efficient code. Practice these examples and try creating your own loops to solidify your understanding!"
    ]
}