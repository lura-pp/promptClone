{
    "title": "\"Writing Assistant, the most powerful AI writing tool; welcome to use and leave a message!\"",
    "original_prompt": "\"I hope you can take on the role of a senior front-end developer. I will describe the details of a project, and you will use these tools to code the project. Create React App, yarn, Ant Design, List, Redux Toolkit, createSlice, thunk, axios. You should merge the files into a single index.js file, instead of others. Do not write explanations.\"",
    "split_prompt": "This is a prompt description:```json\n{\n    \"spliting prompt\": {\n        \"role\": [\n            \"senior front-end developer\"\n        ],\n        \"project_details\": [\n            \"details of a project\"\n        ],\n        \"tools\": [\n            \"Create React App\",\n            \"yarn\",\n            \"Ant Design\",\n            \"List\",\n            \"Redux Toolkit\",\n            \"createSlice\",\n            \"thunk\",\n            \"axios\"\n        ],\n        \"file_structure\": [\n            \"merge the files into a single index.js file\"\n        ],\n        \"instructions\": [\n            \"do not write explanations\"\n        ]\n    }\n}\n```",
    "input1": " \"Create a task management application where users can add, edit, and delete tasks. The application should have a responsive design using Ant Design components. Implement state management with Redux Toolkit, utilizing createSlice for task actions and thunk for asynchronous operations. Use axios to fetch initial task data from a mock API. All code should be merged into a single index.js file.\"\n\n",
    "input2": " \"Develop a weather forecasting app that allows users to search for cities and view current weather conditions and a 5-day forecast. Use Ant Design for the UI components and manage the application state with Redux Toolkit, employing createSlice for weather data and thunk for API calls. Fetch weather data using axios from a public weather API. Ensure all code is consolidated into a single index.js file.\"",
    "input1_ans": [
        "```javascript\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, createSlice, configureStore } from '@reduxjs/toolkit';\nimport { Provider, useDispatch, useSelector } from 'react-redux';\nimport axios from 'axios';\nimport { Layout, List, Button, Input, Modal } from 'antd';\nimport 'antd/dist/antd.css';\n\nconst { Header, Content } = Layout;\n\nconst taskSlice = createSlice({\n  name: 'tasks',\n  initialState: [],\n  reducers: {\n    setTasks: (state, action) => action.payload,\n    addTask: (state, action) => {\n      state.push(action.payload);\n    },\n    editTask: (state, action) => {\n      const index = state.findIndex(task => task.id === action.payload.id);\n      if (index !== -1) {\n        state[index] = action.payload;\n      }\n    },\n    deleteTask: (state, action) => {\n      return state.filter(task => task.id !== action.payload);\n    }\n  }\n});\n\nconst { setTasks, addTask, editTask, deleteTask } = taskSlice.actions;\n\nconst fetchTasks = () => async dispatch => {\n  const response = await axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10');\n  dispatch(setTasks(response.data));\n};\n\nconst store = configureStore({\n  reducer: {\n    tasks: taskSlice.reducer\n  }\n});\n\nconst TaskApp = () => {\n  const dispatch = useDispatch();\n  const tasks = useSelector(state => state.tasks);\n  const [taskInput, setTaskInput] = React.useState('');\n  const [editingTask, setEditingTask] = React.useState(null);\n\n  useEffect(() => {\n    dispatch(fetchTasks());\n  }, [dispatch]);\n\n  const handleAddTask = () => {\n    if (taskInput) {\n      dispatch(addTask({ id: Date.now(), title: taskInput, completed: false }));\n      setTaskInput('');\n    }\n  };\n\n  const handleEditTask = (task) => {\n    setTaskInput(task.title);\n    setEditingTask(task);\n  };\n\n  const handleUpdateTask = () => {\n    if (editingTask) {\n      dispatch(editTask({ ...editingTask, title: taskInput }));\n      setTaskInput('');\n      setEditingTask(null);\n    }\n  };\n\n  const handleDeleteTask = (id) => {\n    dispatch(deleteTask(id));\n  };\n\n  return (\n    <Layout>\n      <Header style={{ color: 'white' }}>Task Management</Header>\n      <Content style={{ padding: '20px' }}>\n        <Input\n          value={taskInput}\n          onChange={(e) => setTaskInput(e.target.value)}\n          placeholder=\"Add a new task\"\n          style={{ width: '300px', marginRight: '10px' }}\n        />\n        <Button type=\"primary\" onClick={editingTask ? handleUpdateTask : handleAddTask}>\n          {editingTask ? 'Update Task' : 'Add Task'}\n        </Button>\n        <List\n          bordered\n          dataSource={tasks}\n          renderItem={task => (\n            <List.Item\n              actions={[\n                <Button onClick={() => handleEditTask(task)}>Edit</Button>,\n                <Button type=\"danger\" onClick={() => handleDeleteTask(task.id)}>Delete</Button>\n              ]}\n            >\n              {task.title}\n            </List.Item>\n          )}\n          style={{ marginTop: '20px' }}\n        />\n      </Content>\n    </Layout>\n  );\n};\n\nReactDOM.render(\n  <Provider store={store}>\n    <TaskApp />\n  </Provider>,\n  document.getElementById('root')\n);\n```",
        "```javascript\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider, useDispatch, useSelector } from 'react-redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\nimport thunk from 'redux-thunk';\nimport axios from 'axios';\nimport { Button, List, Input } from 'antd';\n\nconst taskSlice = createSlice({\n  name: 'tasks',\n  initialState: [],\n  reducers: {\n    setTasks: (state, action) => action.payload,\n    addTask: (state, action) => [...state, action.payload],\n    editTask: (state, action) => state.map(task => task.id === action.payload.id ? action.payload : task),\n    deleteTask: (state, action) => state.filter(task => task.id !== action.payload),\n  },\n});\n\nconst { setTasks, addTask, editTask, deleteTask } = taskSlice.actions;\n\nconst fetchTasks = () => async (dispatch) => {\n  const response = await axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10');\n  dispatch(setTasks(response.data));\n};\n\nconst store = configureStore({\n  reducer: {\n    tasks: taskSlice.reducer,\n  },\n  middleware: [thunk],\n});\n\nconst TaskApp = () => {\n  const dispatch = useDispatch();\n  const tasks = useSelector((state) => state.tasks);\n  const [taskInput, setTaskInput] = React.useState('');\n\n  useEffect(() => {\n    dispatch(fetchTasks());\n  }, [dispatch]);\n\n  const handleAddTask = () => {\n    const newTask = { id: Date.now(), title: taskInput };\n    dispatch(addTask(newTask));\n    setTaskInput('');\n  };\n\n  const handleEditTask = (task) => {\n    const updatedTask = { ...task, title: prompt('Edit task:', task.title) };\n    dispatch(editTask(updatedTask));\n  };\n\n  const handleDeleteTask = (id) => {\n    dispatch(deleteTask(id));\n  };\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <Input\n        value={taskInput}\n        onChange={(e) => setTaskInput(e.target.value)}\n        placeholder=\"Add a new task\"\n        style={{ width: '300px', marginRight: '10px' }}\n      />\n      <Button type=\"primary\" onClick={handleAddTask}>Add Task</Button>\n      <List\n        bordered\n        dataSource={tasks}\n        renderItem={task => (\n          <List.Item\n            actions={[\n              <Button onClick={() => handleEditTask(task)}>Edit</Button>,\n              <Button onClick={() => handleDeleteTask(task.id)} type=\"danger\">Delete</Button>,\n            ]}\n          >\n            {task.title}\n          </List.Item>\n        )}\n        style={{ marginTop: '20px' }}\n      />\n    </div>\n  );\n};\n\nReactDOM.render(\n  <Provider store={store}>\n    <TaskApp />\n  </Provider>,\n  document.getElementById('root')\n);\n```"
    ],
    "input2_ans": [
        "```javascript\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider, useDispatch, useSelector } from 'react-redux';\nimport { createStore, createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { Input, Button, List, Typography, Card } from 'antd';\nimport 'antd/dist/antd.css';\n\nconst { Title } = Typography;\n\nconst fetchWeather = createAsyncThunk('weather/fetchWeather', async (city) => {\n  const response = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=YOUR_API_KEY&units=metric`);\n  return response.data;\n});\n\nconst fetchForecast = createAsyncThunk('weather/fetchForecast', async (city) => {\n  const response = await axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=YOUR_API_KEY&units=metric`);\n  return response.data;\n});\n\nconst weatherSlice = createSlice({\n  name: 'weather',\n  initialState: { current: {}, forecast: [], loading: false, error: null },\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchWeather.pending, (state) => { state.loading = true; })\n      .addCase(fetchWeather.fulfilled, (state, action) => { state.current = action.payload; state.loading = false; })\n      .addCase(fetchWeather.rejected, (state, action) => { state.loading = false; state.error = action.error.message; })\n      .addCase(fetchForecast.pending, (state) => { state.loading = true; })\n      .addCase(fetchForecast.fulfilled, (state, action) => { state.forecast = action.payload.list; state.loading = false; })\n      .addCase(fetchForecast.rejected, (state, action) => { state.loading = false; state.error = action.error.message; });\n  },\n});\n\nconst store = createStore(weatherSlice.reducer);\n\nconst WeatherApp = () => {\n  const dispatch = useDispatch();\n  const { current, forecast, loading, error } = useSelector((state) => state);\n  const [city, setCity] = React.useState('');\n\n  const handleSearch = () => {\n    dispatch(fetchWeather(city));\n    dispatch(fetchForecast(city));\n  };\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <Title level={2}>Weather Forecast App</Title>\n      <Input.Search\n        placeholder=\"Enter city\"\n        enterButton=\"Search\"\n        onSearch={handleSearch}\n        onChange={(e) => setCity(e.target.value)}\n      />\n      {loading && <p>Loading...</p>}\n      {error && <p style={{ color: 'red' }}>{error}</p>}\n      {current.main && (\n        <Card title={`Current Weather in ${current.name}`}>\n          <p>Temperature: {current.main.temp} \u00b0C</p>\n          <p>Weather: {current.weather[0].description}</p>\n        </Card>\n      )}\n      <List\n        header={<div>5-Day Forecast</div>}\n        bordered\n        dataSource={forecast}\n        renderItem={(item) => (\n          <List.Item>\n            <div>{new Date(item.dt * 1000).toLocaleString()}</div>\n            <div>Temp: {item.main.temp} \u00b0C</div>\n            <div>Weather: {item.weather[0].description}</div>\n          </List.Item>\n        )}\n      />\n    </div>\n  );\n};\n\nconst App = () => (\n  <Provider store={store}>\n    <WeatherApp />\n  </Provider>\n);\n\nReactDOM.render(<App />, document.getElementById('root'));\n```",
        "```javascript\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider, createStore, createSlice, configureStore } from '@reduxjs/toolkit';\nimport { useDispatch, useSelector } from 'react-redux';\nimport axios from 'axios';\nimport { Input, Button, List, Typography, Spin } from 'antd';\n\nconst { Title } = Typography;\n\nconst weatherSlice = createSlice({\n  name: 'weather',\n  initialState: {\n    data: null,\n    loading: false,\n    error: null,\n  },\n  reducers: {\n    fetchWeatherStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchWeatherSuccess: (state, action) => {\n      state.loading = false;\n      state.data = action.payload;\n    },\n    fetchWeatherFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n  },\n});\n\nconst { fetchWeatherStart, fetchWeatherSuccess, fetchWeatherFailure } = weatherSlice.actions;\n\nconst fetchWeather = (city) => async (dispatch) => {\n  dispatch(fetchWeatherStart());\n  try {\n    const response = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=YOUR_API_KEY&units=metric`);\n    dispatch(fetchWeatherSuccess(response.data));\n  } catch (error) {\n    dispatch(fetchWeatherFailure(error.message));\n  }\n};\n\nconst store = configureStore({\n  reducer: {\n    weather: weatherSlice.reducer,\n  },\n});\n\nconst WeatherApp = () => {\n  const dispatch = useDispatch();\n  const { data, loading, error } = useSelector((state) => state.weather);\n  const [city, setCity] = React.useState('');\n\n  const handleSearch = () => {\n    dispatch(fetchWeather(city));\n  };\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <Title level={2}>Weather Forecast</Title>\n      <Input\n        placeholder=\"Enter city\"\n        value={city}\n        onChange={(e) => setCity(e.target.value)}\n        style={{ width: '200px', marginRight: '10px' }}\n      />\n      <Button type=\"primary\" onClick={handleSearch}>Search</Button>\n      {loading && <Spin />}\n      {error && <div style={{ color: 'red' }}>{error}</div>}\n      {data && (\n        <List\n          header={<div>Current Weather in {data.name}</div>}\n          bordered\n          dataSource={[`Temperature: ${data.main.temp} \u00b0C`, `Weather: ${data.weather[0].description}`]}\n          renderItem={item => <List.Item>{item}</List.Item>}\n        />\n      )}\n    </div>\n  );\n};\n\nReactDOM.render(\n  <Provider store={store}>\n    <WeatherApp />\n  </Provider>,\n  document.getElementById('root')\n);\n```"
    ]
}