{
    "title": "Write any component of any size in React step-by-step",
    "original_prompt": "I've created a component called [component or task] you'll write detailed step-by-step micro prompts, as comments, for each block of code to be exchanged for real syntax code later:\n\nThe comments should look more or less like as follows, but with info and content related to each [component or task] and in the correct order necessary for its development:\n\n// Briefly explain the purpose and functionality of the [component or task].\n// Import libraries and other components IF necessary.\n// Define the types/interface for the component IF in Typescript.\n// Declare any constants or hooks holding data necessary for the functionality of the [component or task].\n// Write the main logic for the [component or task], including any conditionals or loops IF necessary.\n// Write any sub-functions if necessary for the main logic, including parameters and return values of the [component or task].\n// Return the final JSX for the [component or task] IF there is one.\n// Export the [component or task] for use in other parts of the application.\n\nMake sure each comment is concise and serves as a short prompt for code to be added later. \n\nRemember, you are ONLY providing comments DO NOT write actual code in the comments, HOWEVER since you'll be dealing with logic keep in mind DRY, KISS & YAGNI principles and best practices in React.",
    "split_prompt": "This is a prompt description:```json\n{\n    \"spliting prompt\": {\n        \"component_or_task\": [\n            \"[component or task] name\",\n            \"[component or task] description\",\n            \"[component or task] functionality overview\"\n        ],\n        \"import_statements\": [\n            \"Import necessary libraries\",\n            \"Import other components if required\"\n        ],\n        \"typescript_definitions\": [\n            \"Define types/interfaces for the component\"\n        ],\n        \"constants_and_hooks\": [\n            \"Declare constants for static data\",\n            \"Declare hooks for state management\"\n        ],\n        \"main_logic\": [\n            \"Implement main logic for the component\",\n            \"Include conditionals or loops if needed\"\n        ],\n        \"sub_functions\": [\n            \"Define any sub-functions required\",\n            \"Specify parameters and return values for sub-functions\"\n        ],\n        \"jsx_return\": [\n            \"Return final JSX structure for the component\"\n        ],\n        \"export_statement\": [\n            \"Export the component for use in other parts of the application\"\n        ]\n    }\n}\n```",
    "input1": " // Briefly explain the purpose and functionality of the UserProfile component, which displays user information and allows editing of user details.\n// Import necessary libraries such as React and any state management tools like Redux or Context API.\n// Define the types/interface for the UserProfile component in Typescript, including props for user data and any callback functions.\n// Declare any constants or hooks to manage user data, such as useState for local state and useEffect for fetching user data from an API.\n// Write the main logic for rendering the user profile, including conditionals to handle loading states and error messages if data fetching fails.\n// Write any sub-functions necessary for handling user input changes and form submission, including parameters for the updated user data and return values for success or error handling.\n// Return the final JSX for the UserProfile component, including form elements for editing user details and a button to submit changes.\n// Export the UserProfile component for use in other parts of the application, ensuring it can be easily imported where needed.\n\n",
    "input2": " // Briefly explain the purpose and functionality of the TodoList component, which manages and displays a list of tasks for the user.\n// Import necessary libraries such as React and any state management tools like Redux or Context API.\n// Define the types/interface for the TodoList component in Typescript, including props for the list of tasks and any callback functions for task actions.\n// Declare any constants or hooks to manage the list of tasks, such as useState for local state and useEffect for fetching tasks from an API or local storage.\n// Write the main logic for rendering the todo list, including conditionals to handle empty states and filtering tasks based on their completion status.\n// Write any sub-functions necessary for adding, removing, or toggling tasks, including parameters for task details and return values for updated task lists.\n// Return the final JSX for the TodoList component, including a form for adding new tasks and a list displaying existing tasks with options to edit or delete.\n// Export the TodoList component for use in other parts of the application, ensuring it can be easily imported where needed.",
    "input1_ans": [
        "```\n// Briefly explain the purpose and functionality of the UserProfile component, which displays user information and allows editing of user details.\n// Import necessary libraries such as React and any state management tools like Redux or Context API.\n// Define the types/interface for the UserProfile component in Typescript, including props for user data and any callback functions.\n// Declare any constants or hooks to manage user data, such as useState for local state and useEffect for fetching user data from an API.\n// Write the main logic for rendering the user profile, including conditionals to handle loading states and error messages if data fetching fails.\n// Write any sub-functions necessary for handling user input changes and form submission, including parameters for the updated user data and return values for success or error handling.\n// Return the final JSX for the UserProfile component, including form elements for editing user details and a button to submit changes.\n// Export the UserProfile component for use in other parts of the application, ensuring it can be easily imported where needed.\n```",
        "Here's a structured implementation of the `UserProfile` component based on your requirements:\n\n```typescript\n// UserProfile.tsx\n\n// Import necessary libraries\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchUserData, updateUserData } from './userActions'; // Assuming these actions are defined in userActions\n\n// Define types/interfaces for the UserProfile component\ninterface UserProfileProps {\n    userId: string;\n}\n\ninterface User {\n    id: string;\n    name: string;\n    email: string;\n    // Add other user fields as necessary\n}\n\n// Declare constants and hooks for state management\nconst UserProfile: React.FC<UserProfileProps> = ({ userId }) => {\n    const dispatch = useDispatch();\n    const user = useSelector((state: any) => state.user); // Adjust according to your state structure\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState<string | null>(null);\n    const [formData, setFormData] = useState<User | null>(null);\n\n    // Fetch user data from an API\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                await dispatch(fetchUserData(userId));\n                setFormData(user);\n                setLoading(false);\n            } catch (err) {\n                setError('Failed to fetch user data');\n                setLoading(false);\n            }\n        };\n        fetchData();\n    }, [userId, dispatch]);\n\n    // Main logic for rendering the user profile\n    if (loading) return <div>Loading...</div>;\n    if (error) return <div>{error}</div>;\n\n    // Sub-function to handle input changes\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const { name, value } = e.target;\n        setFormData((prevData) => ({ ...prevData!, [name]: value }));\n    };\n\n    // Sub-function to handle form submission\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        try {\n            await dispatch(updateUserData(formData!));\n            alert('User data updated successfully!');\n        } catch (err) {\n            alert('Failed to update user data');\n        }\n    };\n\n    // Return final JSX structure for the UserProfile component\n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n                <label>Name:</label>\n                <input\n                    type=\"text\"\n                    name=\"name\"\n                    value={formData?.name || ''}\n                    onChange={handleInputChange}\n                />\n            </div>\n            <div>\n                <label>Email:</label>\n                <input\n                    type=\"email\"\n                    name=\"email\"\n                    value={formData?.email || ''}\n                    onChange={handleInputChange}\n                />\n            </div>\n            {/* Add more fields as necessary */}\n            <button type=\"submit\">Update Profile</button>\n        </form>\n    );\n};\n\n// Export the UserProfile component for use in other parts of the application\nexport default UserProfile;\n```\n\n### Explanation:\n1. **Purpose and Functionality**: The `UserProfile` component displays user information and allows users to edit their details.\n2. **Imports**: React and Redux hooks are imported for state management.\n3. **Types/Interfaces**: Types for user data and props are defined.\n4. **State Management**: `useState` is used for local state management, and `useEffect` is used to fetch user data.\n5. **Main Logic**: The component handles loading and error states while rendering user data.\n6. **Sub-functions**: Functions for handling input changes and form submission are defined.\n7. **JSX Structure**: The component returns a form for editing user details.\n8. **Export Statement**: The component is exported for use in other parts of the application."
    ],
    "input2_ans": [
        "```\n// Briefly explain the purpose and functionality of the TodoList component, which manages and displays a list of tasks for the user.\n// Import necessary libraries such as React and any state management tools like Redux or Context API.\n// Define the types/interface for the TodoList component in Typescript, including props for the list of tasks and any callback functions for task actions.\n// Declare any constants or hooks to manage the list of tasks, such as useState for local state and useEffect for fetching tasks from an API or local storage.\n// Write the main logic for rendering the todo list, including conditionals to handle empty states and filtering tasks based on their completion status.\n// Write any sub-functions necessary for adding, removing, or toggling tasks, including parameters for task details and return values for updated task lists.\n// Return the final JSX for the TodoList component, including a form for adding new tasks and a list displaying existing tasks with options to edit or delete.\n// Export the TodoList component for use in other parts of the application, ensuring it can be easily imported where needed.\n```",
        "Here's a structured breakdown of the TodoList component based on your requirements:\n\n### 1. Component or Task\n- **TodoList Name**: TodoList\n- **TodoList Description**: A component that manages and displays a list of tasks for the user, allowing them to add, remove, and toggle the completion status of tasks.\n- **Functionality Overview**: The TodoList component provides an interface for users to manage their tasks, including adding new tasks, viewing existing tasks, and marking tasks as complete or incomplete.\n\n### 2. Import Statements\n```typescript\nimport React, { useState, useEffect } from 'react';\n// Import any state management tools if needed, e.g., Redux or Context API\n```\n\n### 3. TypeScript Definitions\n```typescript\ninterface Task {\n    id: number;\n    title: string;\n    completed: boolean;\n}\n\ninterface TodoListProps {\n    tasks: Task[];\n    onAddTask: (task: Task) => void;\n    onRemoveTask: (id: number) => void;\n    onToggleTask: (id: number) => void;\n}\n```\n\n### 4. Constants and Hooks\n```typescript\nconst TodoList: React.FC<TodoListProps> = ({ tasks, onAddTask, onRemoveTask, onToggleTask }) => {\n    const [newTaskTitle, setNewTaskTitle] = useState<string>('');\n    \n    useEffect(() => {\n        // Fetch tasks from an API or local storage if needed\n    }, []);\n```\n\n### 5. Main Logic\n```typescript\n    const handleAddTask = () => {\n        if (newTaskTitle.trim()) {\n            const newTask: Task = {\n                id: Date.now(), // Simple ID generation\n                title: newTaskTitle,\n                completed: false,\n            };\n            onAddTask(newTask);\n            setNewTaskTitle('');\n        }\n    };\n\n    const filteredTasks = tasks.filter(task => !task.completed); // Example of filtering tasks\n```\n\n### 6. Sub Functions\n```typescript\n    const handleRemoveTask = (id: number) => {\n        onRemoveTask(id);\n    };\n\n    const handleToggleTask = (id: number) => {\n        onToggleTask(id);\n    };\n```\n\n### 7. JSX Return\n```typescript\n    return (\n        <div>\n            <h1>Todo List</h1>\n            <form onSubmit={(e) => { e.preventDefault(); handleAddTask(); }}>\n                <input \n                    type=\"text\" \n                    value={newTaskTitle} \n                    onChange={(e) => setNewTaskTitle(e.target.value)} \n                    placeholder=\"Add a new task\" \n                />\n                <button type=\"submit\">Add Task</button>\n            </form>\n            <ul>\n                {tasks.length === 0 ? (\n                    <li>No tasks available</li>\n                ) : (\n                    tasks.map(task => (\n                        <li key={task.id}>\n                            <span \n                                style={{ textDecoration: task.completed ? 'line-through' : 'none' }} \n                                onClick={() => handleToggleTask(task.id)}\n                            >\n                                {task.title}\n                            </span>\n                            <button onClick={() => handleRemoveTask(task.id)}>Delete</button>\n                        </li>\n                    ))\n                )}\n            </ul>\n        </div>\n    );\n};\n```\n\n### 8. Export Statement\n```typescript\nexport default TodoList;\n```\n\nThis structure provides a comprehensive overview of the TodoList component, detailing its purpose, functionality, and implementation in a clear and organized manner."
    ]
}