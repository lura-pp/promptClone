{
    "title": "golang productivity learning tool",
    "original_prompt": "golang programming",
    "split_prompt": "This is a prompt description:```json\n{\n    \"spliting prompt\": {\n        \"language\": [\n            \"golang\"\n        ],\n        \"topic\": [\n            \"programming\"\n        ],\n        \"focus\": [\n            \"syntax\",\n            \"best practices\",\n            \"libraries\",\n            \"performance\",\n            \"concurrency\",\n            \"error handling\"\n        ],\n        \"audience\": [\n            \"beginners\",\n            \"intermediate\",\n            \"advanced\"\n        ],\n        \"format\": [\n            \"tutorial\",\n            \"reference\",\n            \"example\",\n            \"project\"\n        ]\n    }\n}\n```",
    "input1": " \"Write a Go program that implements a simple web server, handling GET and POST requests, and serves static files from a specified directory while logging the requests to a file.\"\n\n",
    "input2": " \"Create a Go application that connects to a PostgreSQL database, performs CRUD operations on a user table, and includes error handling, connection pooling, and a command-line interface for user interaction.\"",
    "input1_ans": [
        "Certainly! Below is a simple Go program that implements a web server capable of handling GET and POST requests, serving static files from a specified directory, and logging the requests to a file.\n\n### Go Web Server Example\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\nconst (\n\tstaticDir = \"./static\" // Directory to serve static files\n\tlogFile   = \"server.log\" // Log file for requests\n)\n\nfunc main() {\n\t// Create or open the log file\n\tfile, err := os.OpenFile(logFile, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)\n\tif err != nil {\n\t\tlog.Fatalf(\"error opening log file: %v\", err)\n\t}\n\tdefer file.Close()\n\n\t// Set up logging to the file\n\tlog.SetOutput(file)\n\n\t// Handle static files\n\thttp.Handle(\"/static/\", http.StripPrefix(\"/static/\", http.FileServer(http.Dir(staticDir))))\n\n\t// Handle GET requests\n\thttp.HandleFunc(\"/\", handleGet)\n\n\t// Handle POST requests\n\thttp.HandleFunc(\"/submit\", handlePost)\n\n\t// Start the server\n\tfmt.Println(\"Starting server on :8080...\")\n\tif err := http.ListenAndServe(\":8080\", nil); err != nil {\n\t\tlog.Fatalf(\"error starting server: %v\", err)\n\t}\n}\n\n// handleGet handles GET requests\nfunc handleGet(w http.ResponseWriter, r *http.Request) {\n\tlogRequest(r)\n\tfmt.Fprintf(w, \"Welcome to the Go Web Server!\\n\")\n\tfmt.Fprintf(w, \"Use /static/ to access static files.\\n\")\n\tfmt.Fprintf(w, \"Use POST /submit to submit data.\\n\")\n}\n\n// handlePost handles POST requests\nfunc handlePost(w http.ResponseWriter, r *http.Request) {\n\tlogRequest(r)\n\n\tif r.Method != http.MethodPost {\n\t\thttp.Error(w, \"Invalid request method\", http.StatusMethodNotAllowed)\n\t\treturn\n\t}\n\n\tbody, err := ioutil.ReadAll(r.Body)\n\tif err != nil {\n\t\thttp.Error(w, \"Unable to read request body\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\tdefer r.Body.Close()\n\n\tfmt.Fprintf(w, \"Received POST request with data: %s\\n\", body)\n}\n\n// logRequest logs the incoming request to the log file\nfunc logRequest(r *http.Request) {\n\tlog.Printf(\"Method: %s, URL: %s, RemoteAddr: %s\\n\", r.Method, r.URL, r.RemoteAddr)\n}\n```\n\n### Explanation\n\n1. **Static File Serving**: The server serves static files from the `./static` directory. You can place your static files (like HTML, CSS, JS) in this directory. The files can be accessed via the `/static/` URL path.\n\n2. **GET and POST Handlers**: \n   - The root path `/` responds to GET requests with a welcome message and instructions.\n   - The `/submit` path handles POST requests, reading the body of the request and responding with the received data.\n\n3. **Logging**: All requests are logged to a file named `server.log`. The log includes the HTTP method, URL, and the remote address of the client.\n\n4. **Starting the Server**: The server listens on port `8080`. You can change this port if needed.\n\n### Running the Server\n\n1. Save the code to a file named `main.go`.\n2. Create a directory named `static` in the same location as `main.go` and add some static files (e.g., `index.html`).\n3. Run the server using the command:\n   ```bash\n   go run main.go\n   ```\n4. Access the server in your web browser at `http://localhost:8080/` or `http://localhost:8080/static/yourfile.html`.\n\n5. To test the POST request, you can use tools like `curl` or Postman to send data to `http://localhost:8080/submit`.\n\n### Example of Sending a POST Request with `curl`\n\n```bash\ncurl -X POST -d \"name=John&age=30\" http://localhost:8080/submit\n```\n\nThis will send a POST request with the data `name=John&age=30` to the server. The server will log this request and respond with the received data.",
        "Here's a simple Go program that implements a web server capable of handling GET and POST requests, serving static files from a specified directory, and logging the requests to a file.\n\n### Go Web Server Example\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\nconst (\n\tstaticDir = \"./static\" // Directory to serve static files\n\tlogFile   = \"server.log\" // Log file for requests\n)\n\nfunc main() {\n\t// Set up logging to a file\n\tfile, err := os.OpenFile(logFile, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)\n\tif err != nil {\n\t\tlog.Fatalf(\"error opening log file: %v\", err)\n\t}\n\tdefer file.Close()\n\tlog.SetOutput(file)\n\n\t// Handle routes\n\thttp.HandleFunc(\"/\", requestHandler)\n\n\t// Serve static files\n\tfs := http.FileServer(http.Dir(staticDir))\n\thttp.Handle(\"/static/\", http.StripPrefix(\"/static/\", fs))\n\n\t// Start the server\n\tfmt.Println(\"Starting server on :8080\")\n\tif err := http.ListenAndServe(\":8080\", nil); err != nil {\n\t\tlog.Fatalf(\"error starting server: %v\", err)\n\t}\n}\n\n// requestHandler handles GET and POST requests\nfunc requestHandler(w http.ResponseWriter, r *http.Request) {\n\t// Log the request\n\tlog.Printf(\"Received %s request for %s\", r.Method, r.URL.Path)\n\n\tswitch r.Method {\n\tcase http.MethodGet:\n\t\tfmt.Fprintf(w, \"Hello! You've made a GET request to %s\", r.URL.Path)\n\tcase http.MethodPost:\n\t\tbody, err := ioutil.ReadAll(r.Body)\n\t\tif err != nil {\n\t\t\thttp.Error(w, \"Unable to read request body\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\t\tdefer r.Body.Close()\n\t\tfmt.Fprintf(w, \"Hello! You've made a POST request to %s with body: %s\", r.URL.Path, body)\n\tdefault:\n\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t}\n}\n```\n\n### Explanation\n\n1. **Logging Setup**: The program opens a log file (`server.log`) to log incoming requests. It uses `log.SetOutput` to direct log output to this file.\n\n2. **Static File Serving**: The program serves static files from a directory named `static`. You can place your static files (like HTML, CSS, JS) in this directory. The `http.FileServer` is used to serve these files.\n\n3. **Request Handling**: The `requestHandler` function handles both GET and POST requests:\n   - For GET requests, it responds with a simple message.\n   - For POST requests, it reads the body of the request and responds with the received data.\n\n4. **Starting the Server**: The server listens on port `8080`. You can access it by navigating to `http://localhost:8080` in your web browser.\n\n### Running the Program\n\n1. Create a directory named `static` in the same location as your Go program.\n2. Place any static files you want to serve in the `static` directory.\n3. Run the program using the command:\n   ```bash\n   go run main.go\n   ```\n4. Access the server in your web browser or use tools like `curl` to test GET and POST requests.\n\n### Example Usage\n\n- **GET Request**: Open your browser and go to `http://localhost:8080/`.\n- **POST Request**: Use `curl` to send a POST request:\n  ```bash\n  curl -X POST -d \"Hello, World!\" http://localhost:8080/\n  ```\n\nThis simple web server demonstrates basic web server functionality in Go, including request handling, static file serving, and logging."
    ],
    "input2_ans": [
        "Creating a Go application that connects to a PostgreSQL database and performs CRUD operations involves several steps. Below is a simple example that demonstrates how to set up such an application, including error handling, connection pooling, and a command-line interface (CLI) for user interaction.\n\n### Prerequisites\n\n1. **Go installed**: Make sure you have Go installed on your machine. You can download it from [golang.org](https://golang.org/dl/).\n2. **PostgreSQL installed**: Ensure you have PostgreSQL installed and running. You can download it from [postgresql.org](https://www.postgresql.org/download/).\n3. **Database and User Table**: Create a database and a user table in PostgreSQL.\n\n### Step 1: Set Up PostgreSQL\n\nFirst, create a database and a user table. You can use the following SQL commands:\n\n```sql\nCREATE DATABASE testdb;\n\n\\c testdb\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL UNIQUE\n);\n```\n\n### Step 2: Create a Go Application\n\n1. **Initialize a Go module**:\n\n```bash\nmkdir go-postgres-crud\ncd go-postgres-crud\ngo mod init go-postgres-crud\n```\n\n2. **Install the necessary packages**:\n\n```bash\ngo get github.com/lib/pq\ngo get github.com/jmoiron/sqlx\n```\n\n3. **Create the main application file**: Create a file named `main.go` and add the following code:\n\n```go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/jmoiron/sqlx\"\n\t_ \"github.com/lib/pq\"\n)\n\ntype User struct {\n\tID    int    `db:\"id\"`\n\tName  string `db:\"name\"`\n\tEmail string `db:\"email\"`\n}\n\nvar db *sqlx.DB\n\nfunc initDB() {\n\tvar err error\n\tconnStr := \"user=yourusername dbname=testdb sslmode=disable\" // Update with your username\n\tdb, err = sqlx.Connect(\"postgres\", connStr)\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n}\n\nfunc createUser(name, email string) error {\n\t_, err := db.Exec(\"INSERT INTO users (name, email) VALUES ($1, $2)\", name, email)\n\treturn err\n}\n\nfunc readUser(id int) (User, error) {\n\tvar user User\n\terr := db.Get(&user, \"SELECT * FROM users WHERE id=$1\", id)\n\treturn user, err\n}\n\nfunc updateUser(id int, name, email string) error {\n\t_, err := db.Exec(\"UPDATE users SET name=$1, email=$2 WHERE id=$3\", name, email, id)\n\treturn err\n}\n\nfunc deleteUser(id int) error {\n\t_, err := db.Exec(\"DELETE FROM users WHERE id=$1\", id)\n\treturn err\n}\n\nfunc main() {\n\tinitDB()\n\tdefer db.Close()\n\n\tfor {\n\t\tfmt.Println(\"1. Create User\")\n\t\tfmt.Println(\"2. Read User\")\n\t\tfmt.Println(\"3. Update User\")\n\t\tfmt.Println(\"4. Delete User\")\n\t\tfmt.Println(\"5. Exit\")\n\t\tfmt.Print(\"Choose an option: \")\n\n\t\tvar choice int\n\t\tfmt.Scan(&choice)\n\n\t\tswitch choice {\n\t\tcase 1:\n\t\t\tvar name, email string\n\t\t\tfmt.Print(\"Enter name: \")\n\t\t\tfmt.Scan(&name)\n\t\t\tfmt.Print(\"Enter email: \")\n\t\t\tfmt.Scan(&email)\n\t\t\tif err := createUser(name, email); err != nil {\n\t\t\t\tlog.Println(\"Error creating user:\", err)\n\t\t\t} else {\n\t\t\t\tfmt.Println(\"User created successfully.\")\n\t\t\t}\n\t\tcase 2:\n\t\t\tvar id int\n\t\t\tfmt.Print(\"Enter user ID: \")\n\t\t\tfmt.Scan(&id)\n\t\t\tuser, err := readUser(id)\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"Error reading user:\", err)\n\t\t\t} else {\n\t\t\t\tfmt.Printf(\"User: %+v\\n\", user)\n\t\t\t}\n\t\tcase 3:\n\t\t\tvar id int\n\t\t\tvar name, email string\n\t\t\tfmt.Print(\"Enter user ID: \")\n\t\t\tfmt.Scan(&id)\n\t\t\tfmt.Print(\"Enter new name: \")\n\t\t\tfmt.Scan(&name)\n\t\t\tfmt.Print(\"Enter new email: \")\n\t\t\tfmt.Scan(&email)\n\t\t\tif err := updateUser(id, name, email); err != nil {\n\t\t\t\tlog.Println(\"Error updating user:\", err)\n\t\t\t} else {\n\t\t\t\tfmt.Println(\"User updated successfully.\")\n\t\t\t}\n\t\tcase 4:\n\t\t\tvar id int\n\t\t\tfmt.Print(\"Enter user ID: \")\n\t\t\tfmt.Scan(&id)\n\t\t\tif err := deleteUser(id); err != nil {\n\t\t\t\tlog.Println(\"Error deleting user:\", err)\n\t\t\t} else {\n\t\t\t\tfmt.Println(\"User deleted successfully.\")\n\t\t\t}\n\t\tcase 5:\n\t\t\tfmt.Println(\"Exiting...\")\n\t\t\treturn\n\t\tdefault:\n\t\t\tfmt.Println(\"Invalid choice. Please try again.\")\n\t\t}\n\t}\n}\n```\n\n### Step 3: Run the Application\n\n1. **Update the connection string**: Make sure to replace `yourusername` in the connection string with your actual PostgreSQL username.\n\n2. **Run the application**:\n\n```bash\ngo run main.go\n```\n\n### Step 4: Interact with the CLI\n\nYou can now interact with the application through the command line. You can create, read, update, and delete users in the PostgreSQL database.\n\n### Error Handling and Connection Pooling\n\n- The `sqlx` package provides a simple way to handle database operations and includes built-in support for connection pooling.\n- Error handling is done using the `log.Println` function to log any errors that occur during database operations.\n\n### Conclusion\n\nThis is a basic example of a Go application that performs CRUD operations on a PostgreSQL database. You can expand this application by adding more features, such as input validation, more complex queries, or a web interface.",
        "Creating a Go application that connects to a PostgreSQL database and performs CRUD operations involves several steps. Below is a tutorial that covers the necessary components, including error handling, connection pooling, and a command-line interface (CLI) for user interaction.\n\n### Prerequisites\n\n1. **Go installed**: Make sure you have Go installed on your machine. You can download it from [golang.org](https://golang.org/dl/).\n2. **PostgreSQL installed**: Ensure you have PostgreSQL installed and running. You can download it from [postgresql.org](https://www.postgresql.org/download/).\n3. **Database setup**: Create a database and a user table.\n\n### Step 1: Set Up the Database\n\n1. Open your PostgreSQL command line or a GUI tool like pgAdmin.\n2. Create a new database:\n\n   ```sql\n   CREATE DATABASE userdb;\n   ```\n\n3. Connect to the database and create a user table:\n\n   ```sql\n   \\c userdb;\n\n   CREATE TABLE users (\n       id SERIAL PRIMARY KEY,\n       name VARCHAR(100) NOT NULL,\n       email VARCHAR(100) UNIQUE NOT NULL\n   );\n   ```\n\n### Step 2: Create a Go Module\n\n1. Create a new directory for your project and navigate into it:\n\n   ```bash\n   mkdir go-postgres-crud\n   cd go-postgres-crud\n   ```\n\n2. Initialize a new Go module:\n\n   ```bash\n   go mod init go-postgres-crud\n   ```\n\n### Step 3: Install Required Packages\n\nYou will need the `pgx` package for PostgreSQL and `cobra` for the CLI.\n\n```bash\ngo get github.com/jackc/pgx/v4\ngo get github.com/spf13/cobra\n```\n\n### Step 4: Create the Main Application\n\nCreate a file named `main.go` and add the following code:\n\n```go\npackage main\n\nimport (\n    \"context\"\n    \"database/sql\"\n    \"fmt\"\n    \"log\"\n    \"os\"\n\n    \"github.com/jackc/pgx/v4\"\n    \"github.com/spf13/cobra\"\n    _ \"github.com/lib/pq\"\n)\n\nvar db *pgx.Conn\n\nfunc main() {\n    var rootCmd = &cobra.Command{Use: \"app\"}\n    \n    rootCmd.AddCommand(createUserCmd)\n    rootCmd.AddCommand(getUserCmd)\n    rootCmd.AddCommand(updateUserCmd)\n    rootCmd.AddCommand(deleteUserCmd)\n\n    // Connect to the database\n    var err error\n    db, err = pgx.Connect(context.Background(), \"postgres://username:password@localhost:5432/userdb\")\n    if err != nil {\n        log.Fatalf(\"Unable to connect to database: %v\\n\", err)\n    }\n    defer db.Close(context.Background())\n\n    if err := rootCmd.Execute(); err != nil {\n        fmt.Println(err)\n        os.Exit(1)\n    }\n}\n\nvar createUserCmd = &cobra.Command{\n    Use:   \"create [name] [email]\",\n    Short: \"Create a new user\",\n    Args:  cobra.ExactArgs(2),\n    Run: func(cmd *cobra.Command, args []string) {\n        name := args[0]\n        email := args[1]\n        _, err := db.Exec(context.Background(), \"INSERT INTO users (name, email) VALUES ($1, $2)\", name, email)\n        if err != nil {\n            log.Fatalf(\"Failed to create user: %v\\n\", err)\n        }\n        fmt.Println(\"User created successfully\")\n    },\n}\n\nvar getUserCmd = &cobra.Command{\n    Use:   \"get [id]\",\n    Short: \"Get a user by ID\",\n    Args:  cobra.ExactArgs(1),\n    Run: func(cmd *cobra.Command, args []string) {\n        id := args[0]\n        var name, email string\n        err := db.QueryRow(context.Background(), \"SELECT name, email FROM users WHERE id=$1\", id).Scan(&name, &email)\n        if err != nil {\n            log.Fatalf(\"Failed to get user: %v\\n\", err)\n        }\n        fmt.Printf(\"User: %s, Email: %s\\n\", name, email)\n    },\n}\n\nvar updateUserCmd = &cobra.Command{\n    Use:   \"update [id] [name] [email]\",\n    Short: \"Update a user\",\n    Args:  cobra.ExactArgs(3),\n    Run: func(cmd *cobra.Command, args []string) {\n        id := args[0]\n        name := args[1]\n        email := args[2]\n        _, err := db.Exec(context.Background(), \"UPDATE users SET name=$1, email=$2 WHERE id=$3\", name, email, id)\n        if err != nil {\n            log.Fatalf(\"Failed to update user: %v\\n\", err)\n        }\n        fmt.Println(\"User updated successfully\")\n    },\n}\n\nvar deleteUserCmd = &cobra.Command{\n    Use:   \"delete [id]\",\n    Short: \"Delete a user by ID\",\n    Args:  cobra.ExactArgs(1),\n    Run: func(cmd *cobra.Command, args []string) {\n        id := args[0]\n        _, err := db.Exec(context.Background(), \"DELETE FROM users WHERE id=$1\", id)\n        if err != nil {\n            log.Fatalf(\"Failed to delete user: %v\\n\", err)\n        }\n        fmt.Println(\"User deleted successfully\")\n    },\n}\n```\n\n### Step 5: Run the Application\n\n1. Replace `username` and `password` in the connection string with your PostgreSQL credentials.\n2. Build and run your application:\n\n   ```bash\n   go run main.go create \"John Doe\" \"john@example.com\"\n   go run main.go get 1\n   go run main.go update 1 \"John Smith\" \"johnsmith@example.com\"\n   go run main.go delete 1\n   ```\n\n### Conclusion\n\nYou have now created a simple Go application that connects to a PostgreSQL database and performs CRUD operations on a user table. The application includes error handling and a command-line interface for user interaction. You can expand this application by adding more features, such as input validation, logging, or a web interface."
    ]
}