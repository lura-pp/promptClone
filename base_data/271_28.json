{
    "title": "Talent Coach",
    "original_prompt": "I want you to act as a Talent Coach for interviews. I will give you a job title and you'll suggest what should appear in a curriculum related to that title, as well as some questions the candidate should be able to answer. My first job title is \"\"Software Engineer\"\".",
    "split_prompt": "This is a prompt description:```json\n{\n    \"spliting prompt\": {\n        \"job_title\": [\n            \"Software Engineer\"\n        ],\n        \"curriculum_elements\": [\n            \"Programming languages (e.g., Python, Java, C++)\",\n            \"Data structures and algorithms\",\n            \"Software development methodologies (e.g., Agile, Scrum)\",\n            \"Version control systems (e.g., Git)\",\n            \"Database management (e.g., SQL, NoSQL)\",\n            \"System design principles\",\n            \"Testing and debugging techniques\",\n            \"Cloud computing basics\",\n            \"Collaboration tools and practices\"\n        ],\n        \"interview_questions\": [\n            \"Can you explain the difference between object-oriented and functional programming?\",\n            \"How do you approach debugging a piece of code?\",\n            \"What is your experience with version control systems?\",\n            \"Describe a challenging project you worked on and how you overcame obstacles.\",\n            \"How do you ensure code quality and maintainability?\",\n            \"What are the key principles of software design?\",\n            \"Can you explain the concept of RESTful APIs?\",\n            \"How do you stay updated with the latest technologies in software development?\"\n        ]\n    }\n}\n```",
    "input1": " Job Title: Software Engineer - Curriculum should include topics such as data structures, algorithms, system design, software development methodologies (Agile, Scrum), programming languages (Java, Python, C++), version control systems (Git), and database management (SQL, NoSQL). Candidate should be able to answer questions like: \"Can you explain the difference between a stack and a queue?\", \"How do you approach debugging a complex issue?\", and \"Describe a challenging project you worked on and how you overcame obstacles.\"\n\n",
    "input2": " Job Title: Software Engineer - Curriculum should cover areas such as cloud computing (AWS, Azure), web development frameworks (React, Angular), mobile app development (iOS, Android), API design and integration, testing methodologies (unit testing, integration testing), and security best practices. Candidate should be prepared to answer questions such as: \"What is your experience with microservices architecture?\", \"How do you ensure code quality and maintainability?\", and \"Can you discuss a time when you had to learn a new technology quickly for a project?\"",
    "input1_ans": [
        "### Curriculum for Software Engineer\n\n1. **Data Structures**\n   - Arrays, Linked Lists, Stacks, Queues, Trees, Graphs, Hash Tables\n   - Time and Space Complexity Analysis\n   - Use cases and implementation in various programming languages\n\n2. **Algorithms**\n   - Sorting Algorithms (Quick Sort, Merge Sort, etc.)\n   - Searching Algorithms (Binary Search, Depth-First Search, Breadth-First Search)\n   - Dynamic Programming and Greedy Algorithms\n   - Algorithmic Complexity (Big O Notation)\n\n3. **System Design**\n   - Principles of System Design\n   - Designing Scalable Systems\n   - Microservices Architecture\n   - Load Balancing, Caching, and Database Sharding\n   - API Design and RESTful Services\n\n4. **Software Development Methodologies**\n   - Agile Methodology and Scrum Framework\n   - Waterfall vs. Agile\n   - Continuous Integration/Continuous Deployment (CI/CD)\n   - Test-Driven Development (TDD) and Behavior-Driven Development (BDD)\n\n5. **Programming Languages**\n   - Proficiency in Java, Python, and C++\n   - Understanding of Object-Oriented Programming (OOP) principles\n   - Functional Programming concepts\n\n6. **Version Control Systems**\n   - Git Basics (commits, branches, merges)\n   - Collaboration using Git (pull requests, code reviews)\n   - Best practices for version control\n\n7. **Database Management**\n   - SQL (Structured Query Language) and NoSQL databases\n   - Database Design and Normalization\n   - Understanding of Transactions and ACID properties\n   - Query Optimization Techniques\n\n8. **Software Testing**\n   - Unit Testing, Integration Testing, and System Testing\n   - Automated Testing Frameworks\n   - Performance Testing and Load Testing\n\n9. **DevOps Practices**\n   - Understanding of DevOps culture and practices\n   - Tools for Continuous Integration and Deployment (Jenkins, Docker, Kubernetes)\n   - Monitoring and Logging\n\n### Interview Questions for Software Engineer Candidates\n\n1. **Technical Questions:**\n   - Can you explain the difference between a stack and a queue?\n   - How would you implement a binary search tree? What are its advantages?\n   - Describe the time complexity of different sorting algorithms. When would you use each?\n   - What is the difference between SQL and NoSQL databases? When would you choose one over the other?\n\n2. **Problem-Solving Questions:**\n   - How do you approach debugging a complex issue? Can you provide a specific example?\n   - Describe a challenging project you worked on and how you overcame obstacles.\n   - If you were tasked with designing a URL shortening service, what considerations would you take into account?\n\n3. **Behavioral Questions:**\n   - How do you prioritize tasks when working on multiple projects?\n   - Can you describe a time when you had to work with a difficult team member? How did you handle it?\n   - What motivates you to write clean and maintainable code?\n\n4. **System Design Questions:**\n   - How would you design a system to handle millions of requests per second?\n   - What factors would you consider when designing a database schema for an e-commerce application?\n   - Can you walk us through the design of a chat application? What components would you include?\n\n5. **Methodology Questions:**\n   - What is your experience with Agile methodologies? How do you think it improves software development?\n   - How do you ensure that your code is testable and maintainable?\n   - Describe your experience with version control systems, particularly Git. How do you manage branches and merges?\n\nBy preparing in these areas, candidates can demonstrate their technical knowledge, problem-solving abilities, and interpersonal skills, which are crucial for a successful career as a Software Engineer.",
        "### Job Title: Software Engineer\n\n#### Curriculum Elements:\n1. **Programming Languages**\n   - Java\n   - Python\n   - C++\n\n2. **Data Structures and Algorithms**\n   - Understanding of basic data structures (arrays, linked lists, stacks, queues, trees, graphs)\n   - Algorithm design and analysis (sorting, searching, recursion, dynamic programming)\n\n3. **Software Development Methodologies**\n   - Agile\n   - Scrum\n\n4. **Version Control Systems**\n   - Git (branching, merging, pull requests)\n\n5. **Database Management**\n   - SQL (relational databases)\n   - NoSQL (document stores, key-value stores)\n\n6. **System Design Principles**\n   - Scalability\n   - Reliability\n   - Maintainability\n\n7. **Testing and Debugging Techniques**\n   - Unit testing\n   - Integration testing\n   - Debugging strategies\n\n8. **Cloud Computing Basics**\n   - Understanding of cloud services (IaaS, PaaS, SaaS)\n   - Familiarity with cloud providers (AWS, Azure, Google Cloud)\n\n9. **Collaboration Tools and Practices**\n   - Use of tools like JIRA, Trello, or Asana for project management\n   - Communication tools (Slack, Microsoft Teams)\n\n#### Interview Questions:\n1. Can you explain the difference between a stack and a queue?\n2. How do you approach debugging a complex issue?\n3. Describe a challenging project you worked on and how you overcame obstacles.\n4. Can you explain the difference between object-oriented and functional programming?\n5. What is your experience with version control systems?\n6. How do you ensure code quality and maintainability?\n7. What are the key principles of software design?\n8. Can you explain the concept of RESTful APIs?\n9. How do you stay updated with the latest technologies in software development?"
    ],
    "input2_ans": [
        "### Software Engineer Curriculum\n\n#### 1. **Cloud Computing**\n   - **Overview of Cloud Computing Concepts**\n     - Understanding IaaS, PaaS, SaaS\n     - Benefits and challenges of cloud computing\n   - **AWS (Amazon Web Services)**\n     - Core services (EC2, S3, RDS, Lambda)\n     - Deployment and management of applications\n     - Security and compliance in AWS\n   - **Azure**\n     - Core services (Azure Functions, Azure App Service, Azure SQL Database)\n     - Integration with on-premises systems\n     - Monitoring and diagnostics in Azure\n\n#### 2. **Web Development Frameworks**\n   - **React**\n     - Component-based architecture\n     - State management (Redux, Context API)\n     - Hooks and lifecycle methods\n   - **Angular**\n     - MVC architecture\n     - Dependency injection\n     - Routing and services\n\n#### 3. **Mobile App Development**\n   - **iOS Development**\n     - Swift programming language\n     - UIKit and SwiftUI frameworks\n     - App lifecycle and architecture (MVC, MVVM)\n   - **Android Development**\n     - Kotlin programming language\n     - Android SDK and Jetpack components\n     - Activity and Fragment lifecycle\n\n#### 4. **API Design and Integration**\n   - **RESTful API Design**\n     - Principles of REST\n     - Versioning and documentation (OpenAPI/Swagger)\n   - **GraphQL**\n     - Query language for APIs\n     - Advantages over REST\n   - **Authentication and Authorization**\n     - OAuth, JWT, and API keys\n\n#### 5. **Testing Methodologies**\n   - **Unit Testing**\n     - Writing and running unit tests (JUnit, Mocha, Jest)\n     - Test-driven development (TDD)\n   - **Integration Testing**\n     - Strategies for integration testing\n     - Tools and frameworks (Postman, Cypress)\n   - **End-to-End Testing**\n     - Automation tools (Selenium, Puppeteer)\n\n#### 6. **Security Best Practices**\n   - **Secure Coding Practices**\n     - Input validation and sanitization\n     - Error handling and logging\n   - **Common Vulnerabilities**\n     - OWASP Top Ten (SQL Injection, XSS, CSRF)\n   - **Data Protection**\n     - Encryption (at rest and in transit)\n     - Secure API design\n\n### Interview Questions\n\n1. **Technical Questions**\n   - What is your experience with microservices architecture? Can you explain its advantages and disadvantages?\n   - How do you ensure code quality and maintainability in your projects?\n   - Can you discuss a time when you had to learn a new technology quickly for a project? What was your approach?\n   - Describe your experience with cloud services like AWS or Azure. Which services have you used, and for what purposes?\n   - How do you approach API design? What considerations do you take into account when designing a RESTful API?\n\n2. **Problem-Solving Questions**\n   - Describe a challenging bug you encountered in a project. How did you diagnose and resolve it?\n   - Can you provide an example of a project where you implemented testing methodologies? What types of tests did you use, and what was the outcome?\n\n3. **Behavioral Questions**\n   - Tell me about a time when you had to work in a team to complete a project. What role did you play, and what was the result?\n   - How do you prioritize tasks when working on multiple projects or features simultaneously?\n   - Describe a situation where you received constructive criticism. How did you respond, and what changes did you make as a result?\n\n4. **Future-Oriented Questions**\n   - What emerging technologies or trends in software engineering are you most excited about, and why?\n   - How do you stay updated with the latest developments in software engineering and technology?\n\nThis curriculum and set of questions will help prepare candidates for a Software Engineer role, ensuring they have the necessary skills and knowledge to succeed in interviews and in their future positions.",
        "```json\n{\n    \"spliting prompt\": {\n        \"job_title\": [\n            \"Software Engineer\"\n        ],\n        \"curriculum_elements\": [\n            \"Cloud computing (e.g., AWS, Azure)\",\n            \"Web development frameworks (e.g., React, Angular)\",\n            \"Mobile app development (e.g., iOS, Android)\",\n            \"API design and integration\",\n            \"Testing methodologies (e.g., unit testing, integration testing)\",\n            \"Security best practices\",\n            \"Version control systems (e.g., Git)\",\n            \"Data structures and algorithms\",\n            \"Software development methodologies (e.g., Agile, Scrum)\",\n            \"Collaboration tools and practices\"\n        ],\n        \"interview_questions\": [\n            \"What is your experience with microservices architecture?\",\n            \"How do you ensure code quality and maintainability?\",\n            \"Can you discuss a time when you had to learn a new technology quickly for a project?\",\n            \"Can you explain the difference between object-oriented and functional programming?\",\n            \"How do you approach debugging a piece of code?\",\n            \"What is your experience with version control systems?\",\n            \"Describe a challenging project you worked on and how you overcame obstacles.\",\n            \"What are the key principles of software design?\",\n            \"Can you explain the concept of RESTful APIs?\",\n            \"How do you stay updated with the latest technologies in software development?\"\n        ]\n    }\n}\n```"
    ]
}