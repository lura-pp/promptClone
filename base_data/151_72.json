{
    "title": "Random programming code snippets",
    "original_prompt": "Act a python code snippet generator. You role is to show me cleave python code snippets. When I type new generate a new snippet.",
    "split_prompt": "This is a prompt description:```json\n{\n    \"spliting prompt\": {\n        \"action\": [\n            \"generate\"\n        ],\n        \"language\": [\n            \"python\"\n        ],\n        \"type\": [\n            \"code snippet\"\n        ],\n        \"context\": [\n            \"cleave\"\n        ]\n    }\n}\n```",
    "input1": " Generate a Python function that takes a list of integers and returns a new list containing only the even numbers from the original list, while also printing the count of even numbers found.\n\n",
    "input2": " Create a Python class named `Book` that has attributes for title, author, and publication year. Include a method to display the book's details in a formatted string and another method to check if the book is a classic (published more than 50 years ago).",
    "input1_ans": [
        "Here's a Python function that accomplishes that:\n\n```python\ndef filter_even_numbers(numbers):\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    print(f\"Count of even numbers found: {len(even_numbers)}\")\n    return even_numbers\n\n# Example usage:\noriginal_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_list = filter_even_numbers(original_list)\nprint(even_list)\n```\n\nThis function filters the even numbers from the input list and prints the count of even numbers found.",
        "Here is a Python function that accomplishes the task of filtering even numbers from a list of integers and printing the count of even numbers found:\n\n```python\ndef filter_even_numbers(numbers):\n    # Create a new list to hold even numbers\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    \n    # Print the count of even numbers\n    print(f\"Count of even numbers: {len(even_numbers)}\")\n    \n    # Return the list of even numbers\n    return even_numbers\n\n# Example usage\noriginal_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_list = filter_even_numbers(original_list)\nprint(\"Even numbers:\", even_list)\n```\n\nIn this function:\n- We use a list comprehension to create a new list `even_numbers` that includes only the even integers from the input list `numbers`.\n- We then print the count of even numbers using `len(even_numbers)`.\n- Finally, the function returns the list of even numbers."
    ],
    "input2_ans": [
        "Here's a Python code snippet for the `Book` class as you described:\n\n```python\nclass Book:\n    def __init__(self, title, author, publication_year):\n        self.title = title\n        self.author = author\n        self.publication_year = publication_year\n\n    def display_details(self):\n        return f\"Title: {self.title}, Author: {self.author}, Year: {self.publication_year}\"\n\n    def is_classic(self):\n        current_year = 2023\n        return (current_year - self.publication_year) > 50\n\n# Example usage\nbook1 = Book(\"Pride and Prejudice\", \"Jane Austen\", 1813)\nprint(book1.display_details())\nprint(\"Is classic:\", book1.is_classic())\n```\n\nThis code defines the `Book` class with the specified attributes and methods. You can create instances of the class and use the methods to display details and check if the book is a classic.",
        "Here is a Python class named `Book` that meets your requirements:\n\n```python\nclass Book:\n    def __init__(self, title, author, publication_year):\n        self.title = title\n        self.author = author\n        self.publication_year = publication_year\n\n    def display_details(self):\n        return f\"Title: {self.title}, Author: {self.author}, Published: {self.publication_year}\"\n\n    def is_classic(self):\n        current_year = 2023  # You can also use datetime.datetime.now().year for the current year\n        return (current_year - self.publication_year) > 50\n\n# Example usage:\nbook1 = Book(\"Pride and Prejudice\", \"Jane Austen\", 1813)\nprint(book1.display_details())\nprint(\"Is classic:\", book1.is_classic())\n```\n\n### Explanation:\n- The `Book` class has an `__init__` method that initializes the attributes `title`, `author`, and `publication_year`.\n- The `display_details` method returns a formatted string with the book's details.\n- The `is_classic` method checks if the book was published more than 50 years ago compared to the current year (2023 in this case)."
    ]
}