{
    "title": "Conversion of Google Sheets Formulas Using MAP, LAMBDA, and IF Functions\"",
    "original_prompt": "Hello, I would like help to convert some Google Sheets formulas to my specific standard, using the MAP, LAMBDA and IF functions. Please follow these steps when adapting the formulas:\n\nIdentify the columns that you need to use in your formula and include them in the MAP function as ranges separated by semicolon.\nWrite a LAMBDA function that accepts as variable arguments for each column included in the previous step.\nInside the LAMBDA function, use the IF function to test if the value in a specific column is an empty string (\"\"), and return an empty string if it is true.\nAdapt the logic of the original formula within the LAMBDA function, keeping its structure and purpose, syntax with \";\" and backslash \"\" when present, but using the column variables provided as arguments.\nNote that the standard =MAP(A2:A;B2:B;LAMBDA(ColA;ColB;IF(ColA=\"\"; \"\"; always precedes.\nHere are four examples of formulas that I would like you to adapt to my standard, along with the solutions already converted:\nExample 1: Original formula: =IF(A2=\"\";\"\";D2&\" \"&A2) Converted formula: =MAP(A2:A; D2:D; LAMBDA(ColA; ColD; IF(ColA=\"\"; \"\"; ColD&\" \"&ColA)))\nExample 2: Original formula: =IF(L2=\"\";\"\";IF(REGEXMATCH(M2;\"-DP\")=TRUE;FILTER({'offer of the period pm'!E:F'offer of the period pm'!J:J'offer of the period pm'!H:I}; 'offer of the period pm'!C:C=SUBSTITUTE(M2;\"-DP\";\"\")); FILTER('offer of the period pm'!E:I; 'offer of the period pm'!C:C=SUBSTITUTE(M2;\"-DP\";\"\")))) Converted formula: =MAP(L2:L; M2:M; LAMBDA(ColL; ColM; IF(ColL=\"\"; \"\"; IF(REGEXMATCH(ColM; \"-DP\")=TRUE; FILTER({'offer of the period pm'!E:F'offer of the period pm'!J:J'offer of the period pm'!H:I}; 'offer of the period pm'!C:C=SUBSTITUTE(ColM; \"-DP\"; \"\")); FILTER('offer of the period pm'!E:I; 'offer of the period pm'!C:C=SUBSTITUTE(ColM; \"-DP\"; \"\"))))))\nExample 3: Original formula: =if(A2=\"\";\"\";AND(F2=N2;G2=O2;H2=P2;I2=Q2;J2=R2)) Converted formula: =MAP(A2:A; F2:F; G2:G; H2:H; I2:I; J2:J; N2:N; O2:O; P2:P; Q2:Q; R2:R; LAMBDA(ColA; ColF; ColG; ColH; ColI; ColJ; ColN; ColO; ColP; ColQ; ColR; IF(ColA=\" \"; \"\"; AND(ColF=ColN; ColG=ColO; ColH=ColP; ColI=ColQ; ColJ=ColR)))))\nExample 4: Original formula: =UNIQUE(FILTER('current ava subjects'!C:C;REGEXMATCH('current ava subjects'!C:C;B2))) Converted formula: =MAP(B2:B; LAMBDA(ColB; IF(ColB=\"\"; \"\"; UNIQUE(FILTER('current ava subjects'!C:C; REGEXMATCH('current ava subjects'!C:C; ColB))))))\nNow that you understand the pattern, I'm going to send you some formulas to convert, your response should contain only the final formula.",
    "split_prompt": "This is a prompt description:```json\n{\n    \"spliting prompt\": {\n        \"formulas\": [\n            \"=MAP(A2:A; B2:B; LAMBDA(ColA; ColB; IF(ColA=\\\"\\\"; \\\"\\\"; ColB * ColA)))\",\n            \"=MAP(D2:D; E2:E; LAMBDA(ColD; ColE; IF(ColD=\\\"\\\"; \\\"\\\"; IF(ColE > 10; ColD + 5; ColD - 5))))\",\n            \"=MAP(F2:F; G2:G; H2:H; LAMBDA(ColF; ColG; ColH; IF(ColF=\\\"\\\"; \\\"\\\"; IF(ColG=\\\"Yes\\\"; ColH * 2; ColH / 2)))\",\n            \"=MAP(I2:I; J2:J; LAMBDA(ColI; ColJ; IF(ColI=\\\"\\\"; \\\"\\\"; CONCATENATE(ColI; \\\" - \\\"; ColJ)))\"\n        ]\n    }\n}\n```",
    "input1": " Original formula: =IF(A2=\"\";\"\";SUM(B2:B)) Converted formula: =MAP(A2:A; B2:B; LAMBDA(ColA; ColB; IF(ColA=\"\"; \"\"; SUM(ColB))))\n\n",
    "input2": " Original formula: =IF(C2=\"\";\"\";VLOOKUP(D2;E:F;2;FALSE)) Converted formula: =MAP(C2:C; D2:D; E:E; F:F; LAMBDA(ColC; ColD; ColE; ColF; IF(ColC=\"\"; \"\"; VLOOKUP(ColD; ColE:ColF; 2; FALSE))))",
    "input1_ans": [
        "=MAP(A2:A; B2:B; LAMBDA(ColA; ColB; IF(ColA=\"\"; \"\"; SUM(ColB))))",
        "The original formula `=IF(A2=\"\";\"\";SUM(B2:B))` checks if cell A2 is empty. If it is, it returns an empty string; otherwise, it sums the values in the range B2:B.\n\nThe converted formula `=MAP(A2:A; B2:B; LAMBDA(ColA; ColB; IF(ColA=\"\"; \"\"; SUM(ColB))))` uses the `MAP` function to apply a lambda function across the ranges A2:A and B2:B. However, there is a logical issue in the converted formula. The `SUM(ColB)` will sum all values in the range B2:B for each row in A2:A, which is not the intended behavior.\n\nTo correct the converted formula while maintaining the original logic, it should look like this:\n\n```excel\n=MAP(A2:A; B2:B; LAMBDA(ColA; ColB; IF(ColA=\"\"; \"\"; ColB)))\n```\n\nThis way, if ColA (corresponding to A2) is empty, it returns an empty string; otherwise, it returns the value from ColB (corresponding to B2). If you want to sum the values in B2:B only when A2 is not empty, you would need to handle that differently, possibly outside of the `MAP` function."
    ],
    "input2_ans": [
        "=MAP(C2:C; D2:D; E:E; F:F; LAMBDA(ColC; ColD; ColE; ColF; IF(ColC=\"\"; \"\"; VLOOKUP(ColD; ColE:ColF; 2; FALSE))))",
        "The original formula you provided uses the `IF` and `VLOOKUP` functions to check if a cell in column C is empty and, if not, to look up a value from column D in a specified range (columns E and F). The converted formula uses the `MAP` function along with `LAMBDA` to apply the same logic across multiple rows.\n\nHere's a breakdown of the converted formula:\n\n- `MAP(C2:C; D2:D; E:E; F:F; ...)`: This applies the function to each corresponding row in the specified columns (C, D, E, and F).\n- `LAMBDA(ColC; ColD; ColE; ColF; ...)`: This defines a function that takes four parameters, representing the values from each column for the current row.\n- `IF(ColC=\"\"; \"\"; ...)`: This checks if the value in column C is empty. If it is, it returns an empty string.\n- `VLOOKUP(ColD; ColE:ColF; 2; FALSE)`: If column C is not empty, it performs a VLOOKUP using the value from column D to find a match in the range defined by columns E and F.\n\nThe converted formula effectively replicates the behavior of the original formula but allows for processing multiple rows at once, making it more efficient in a spreadsheet context."
    ]
}