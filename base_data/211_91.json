{
    "title": "Senior Frontend Developer",
    "original_prompt": "I want you to act as a Senior Frontend developer. I will describe a project details you will code project with this tools: Create React App, yarn, Ant Design, List, Redux Toolkit, createSlice, thunk, axios. You should merge files in single index.js file and nothing else. Do not write explanations. My first request is Create Pokemon App that lists pokemons with images that come from PokeAPI sprites endpoint",
    "split_prompt": "This is a prompt description:```json\n{\n    \"spliting prompt\": {\n        \"role\": [\n            \"Senior Frontend developer\"\n        ],\n        \"project_details\": [\n            \"Create Pokemon App\",\n            \"lists pokemons with images\",\n            \"images come from PokeAPI sprites endpoint\"\n        ],\n        \"tools\": [\n            \"Create React App\",\n            \"yarn\",\n            \"Ant Design\",\n            \"List\",\n            \"Redux Toolkit\",\n            \"createSlice\",\n            \"thunk\",\n            \"axios\"\n        ],\n        \"file_structure\": [\n            \"merge files in single index.js file\",\n            \"do not write explanations\"\n        ]\n    }\n}\n```",
    "input1": " Create a Pokemon App that fetches a list of Pokemon from the PokeAPI, displaying their names and images using the sprites endpoint. The app should utilize Create React App, yarn for package management, Ant Design for UI components, and manage state with Redux Toolkit, including createSlice and thunk for asynchronous actions. All code should be merged into a single index.js file.\n\n",
    "input2": " Develop a Pokemon App that retrieves and displays a paginated list of Pokemon, including their names and images sourced from the PokeAPI sprites endpoint. The application should be built using Create React App, with yarn for dependency management, Ant Design for styling, and Redux Toolkit for state management, employing createSlice and thunk for handling API calls. Ensure all code is consolidated into a single index.js file.",
    "input1_ans": [
        "```javascript\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider, createStore, createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { List, Spin } from 'antd';\nimport axios from 'axios';\nimport 'antd/dist/antd.css';\n\nconst fetchPokemons = createAsyncThunk('pokemons/fetchPokemons', async () => {\n  const response = await axios.get('https://pokeapi.co/api/v2/pokemon?limit=20');\n  return response.data.results;\n});\n\nconst pokemonSlice = createSlice({\n  name: 'pokemons',\n  initialState: { list: [], loading: false },\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchPokemons.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(fetchPokemons.fulfilled, (state, action) => {\n        state.loading = false;\n        state.list = action.payload;\n      })\n      .addCase(fetchPokemons.rejected, (state) => {\n        state.loading = false;\n      });\n  },\n});\n\nconst store = createStore(pokemonSlice.reducer);\n\nconst PokemonList = () => {\n  const dispatch = store.dispatch;\n  const pokemons = store.getState().list;\n  const loading = store.getState().loading;\n\n  useEffect(() => {\n    dispatch(fetchPokemons());\n  }, [dispatch]);\n\n  return (\n    <div style={{ padding: '20px' }}>\n      {loading ? (\n        <Spin />\n      ) : (\n        <List\n          itemLayout=\"horizontal\"\n          dataSource={pokemons}\n          renderItem={(pokemon) => (\n            <List.Item>\n              <List.Item.Meta\n                title={pokemon.name}\n                avatar={<img src={`https://img.pokemondb.net/sprites/home/normal/${pokemon.name}.png`} alt={pokemon.name} style={{ width: 50, height: 50 }} />}\n              />\n            </List.Item>\n          )}\n        />\n      )}\n    </div>\n  );\n};\n\nconst App = () => (\n  <Provider store={store}>\n    <PokemonList />\n  </Provider>\n);\n\nReactDOM.render(<App />, document.getElementById('root'));\n```",
        "```javascript\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider, createStore, createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { configureStore } from '@reduxjs/toolkit';\nimport { List, Spin } from 'antd';\nimport axios from 'axios';\nimport 'antd/dist/antd.css';\n\nconst fetchPokemons = createAsyncThunk('pokemons/fetchPokemons', async () => {\n    const response = await axios.get('https://pokeapi.co/api/v2/pokemon?limit=20');\n    return response.data.results;\n});\n\nconst pokemonSlice = createSlice({\n    name: 'pokemons',\n    initialState: {\n        pokemons: [],\n        loading: false,\n    },\n    reducers: {},\n    extraReducers: (builder) => {\n        builder\n            .addCase(fetchPokemons.pending, (state) => {\n                state.loading = true;\n            })\n            .addCase(fetchPokemons.fulfilled, (state, action) => {\n                state.loading = false;\n                state.pokemons = action.payload;\n            })\n            .addCase(fetchPokemons.rejected, (state) => {\n                state.loading = false;\n            });\n    },\n});\n\nconst store = configureStore({\n    reducer: {\n        pokemons: pokemonSlice.reducer,\n    },\n});\n\nconst App = () => {\n    const pokemons = store.getState().pokemons.pokemons;\n    const loading = store.getState().pokemons.loading;\n\n    useEffect(() => {\n        store.dispatch(fetchPokemons());\n    }, []);\n\n    return (\n        <div style={{ padding: '20px' }}>\n            <h1>Pokemon List</h1>\n            {loading ? (\n                <Spin />\n            ) : (\n                <List\n                    itemLayout=\"horizontal\"\n                    dataSource={pokemons}\n                    renderItem={(pokemon) => (\n                        <List.Item>\n                            <List.Item.Meta\n                                title={pokemon.name}\n                                avatar={<img src={`https://pokeapi.co/media/sprites/pokemon/${pokemon.url.split('/')[6]}.png`} alt={pokemon.name} />}\n                            />\n                        </List.Item>\n                    )}\n                />\n            )}\n        </div>\n    );\n};\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n```"
    ],
    "input2_ans": [
        "```javascript\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider, createStore, createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { List, Pagination, Spin } from 'antd';\nimport axios from 'axios';\nimport 'antd/dist/antd.css';\n\nconst fetchPokemons = createAsyncThunk('pokemons/fetchPokemons', async (page) => {\n  const response = await axios.get(`https://pokeapi.co/api/v2/pokemon?limit=10&offset=${(page - 1) * 10}`);\n  return response.data.results;\n});\n\nconst pokemonSlice = createSlice({\n  name: 'pokemons',\n  initialState: { pokemons: [], loading: false },\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchPokemons.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(fetchPokemons.fulfilled, (state, action) => {\n        state.loading = false;\n        state.pokemons = action.payload;\n      })\n      .addCase(fetchPokemons.rejected, (state) => {\n        state.loading = false;\n      });\n  },\n});\n\nconst store = createStore(pokemonSlice.reducer);\n\nconst PokemonList = () => {\n  const [page, setPage] = React.useState(1);\n  const pokemons = store.getState().pokemons.pokemons;\n  const loading = store.getState().pokemons.loading;\n\n  useEffect(() => {\n    store.dispatch(fetchPokemons(page));\n  }, [page]);\n\n  return (\n    <div style={{ padding: '20px' }}>\n      {loading ? (\n        <Spin />\n      ) : (\n        <List\n          grid={{ gutter: 16, column: 3 }}\n          dataSource={pokemons}\n          renderItem={(pokemon) => (\n            <List.Item>\n              <div style={{ textAlign: 'center' }}>\n                <img\n                  src={`https://pokeapi.co/media/sprites/pokemon/${pokemon.url.split('/')[6]}.png`}\n                  alt={pokemon.name}\n                  style={{ width: '100px', height: '100px' }}\n                />\n                <h3>{pokemon.name}</h3>\n              </div>\n            </List.Item>\n          )}\n        />\n      )}\n      <Pagination\n        current={page}\n        pageSize={10}\n        total={100} // Assuming there are at least 100 pokemons\n        onChange={(page) => setPage(page)}\n        style={{ marginTop: '20px', textAlign: 'center' }}\n      />\n    </div>\n  );\n};\n\nconst App = () => (\n  <Provider store={store}>\n    <PokemonList />\n  </Provider>\n);\n\nReactDOM.render(<App />, document.getElementById('root'));\n```",
        "```javascript\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider, createStore, createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { Layout, List, Pagination, Spin } from 'antd';\nimport axios from 'axios';\n\nconst { Header, Content } = Layout;\n\nconst fetchPokemons = createAsyncThunk('pokemons/fetchPokemons', async (page) => {\n  const response = await axios.get(`https://pokeapi.co/api/v2/pokemon?limit=20&offset=${(page - 1) * 20}`);\n  return response.data.results;\n});\n\nconst pokemonSlice = createSlice({\n  name: 'pokemons',\n  initialState: { pokemons: [], loading: false },\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchPokemons.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(fetchPokemons.fulfilled, (state, action) => {\n        state.loading = false;\n        state.pokemons = action.payload;\n      })\n      .addCase(fetchPokemons.rejected, (state) => {\n        state.loading = false;\n      });\n  },\n});\n\nconst store = createStore(pokemonSlice.reducer);\n\nconst PokemonApp = () => {\n  const [page, setPage] = React.useState(1);\n  const pokemons = store.getState().pokemons.pokemons;\n  const loading = store.getState().pokemons.loading;\n\n  useEffect(() => {\n    store.dispatch(fetchPokemons(page));\n  }, [page]);\n\n  return (\n    <Layout>\n      <Header style={{ color: 'white', textAlign: 'center', fontSize: '24px' }}>Pokemon App</Header>\n      <Content style={{ padding: '20px' }}>\n        {loading ? (\n          <Spin />\n        ) : (\n          <List\n            grid={{ gutter: 16, column: 4 }}\n            dataSource={pokemons}\n            renderItem={(pokemon) => (\n              <List.Item>\n                <div style={{ textAlign: 'center' }}>\n                  <img src={`https://pokeapi.co/media/sprites/pokemon/${pokemon.url.split('/')[6]}.png`} alt={pokemon.name} />\n                  <div>{pokemon.name}</div>\n                </div>\n              </List.Item>\n            )}\n          />\n        )}\n        <Pagination\n          current={page}\n          pageSize={20}\n          total={1000}\n          onChange={(page) => setPage(page)}\n          style={{ textAlign: 'center', marginTop: '20px' }}\n        />\n      </Content>\n    </Layout>\n  );\n};\n\nReactDOM.render(\n  <Provider store={store}>\n    <PokemonApp />\n  </Provider>,\n  document.getElementById('root')\n);\n```"
    ]
}