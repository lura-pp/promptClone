{
    "title": "Development - Adding Comments through Code",
    "original_prompt": "As a software engineer, I will provide a piece of code. You will add comments in the appropriate places in the code as necessary. The comments should follow the following rules:\n\nRule 1: Comments should not duplicate the code.\nRule 2: Good comments should not be an excuse for unclear code.\nRule 3: If you cannot write clear comments, please indicate it to me as a [warning].\nRule 4: Only comment on function-level or complex logic.\nRule 5: Explain non-standard code in comments.\nRule 6: Use comments to mark incomplete implementations.\nRule 7: Do not comment on clear code.\n\nNow request the code from me.",
    "split_prompt": "This is a prompt description:```json\n{\n    \"spliting prompt\": {\n        \"dimension1\": [\n            \"As a software engineer, I will provide a piece of code.\"\n        ],\n        \"dimension2\": [\n            \"You will add comments in the appropriate places in the code as necessary.\"\n        ],\n        \"dimension3\": [\n            \"The comments should follow the following rules:\"\n        ],\n        \"dimension4\": [\n            \"Rule 1: Comments should not duplicate the code.\",\n            \"Rule 2: Good comments should not be an excuse for unclear code.\",\n            \"Rule 3: If you cannot write clear comments, please indicate it to me as a [warning].\",\n            \"Rule 4: Only comment on function-level or complex logic.\",\n            \"Rule 5: Explain non-standard code in comments.\",\n            \"Rule 6: Use comments to mark incomplete implementations.\",\n            \"Rule 7: Do not comment on clear code.\"\n        ],\n        \"dimension5\": [\n            \"Now request the code from me.\"\n        ]\n    }\n}\n```",
    "input1": " def calculate_factorial(n):  # Function to calculate the factorial of a number\n    if n < 0:  # Check for negative input\n        return \"Invalid input\"  # Factorial is not defined for negative numbers\n    elif n == 0:  # Base case for recursion\n        return 1  # Factorial of 0 is 1\n    else:\n        result = 1  # Initialize result variable\n        for i in range(1, n + 1):  # Loop through numbers from 1 to n\n            result *= i  # Multiply result by current number\n        return result  # Return the final factorial value\n\n",
    "input2": " def merge_sort(arr):  # Function to perform merge sort on an array\n    if len(arr) > 1:  # Check if the array has more than one element\n        mid = len(arr) // 2  # Find the middle index\n        left_half = arr[:mid]  # Split the array into left half\n        right_half = arr[mid:]  # Split the array into right half\n\n        merge_sort(left_half)  # Recursively sort the left half\n        merge_sort(right_half)  # Recursively sort the right half\n\n        i = j = k = 0  # Initialize indices for left, right, and merged arrays\n\n        # Merge the sorted halves\n        while i < len(left_half) and j < len(right_half):  # Compare elements\n            if left_half[i] < right_half[j]:  # If left element is smaller\n                arr[k] = left_half[i]  # Place it in the merged array\n                i += 1  # Move to the next element in left half\n            else:\n                arr[k] = right_half[j]  # Place right element in merged array\n                j += 1  # Move to the next element in right half\n            k += 1  # Move to the next position in merged array\n\n        # Copy remaining elements of left_half, if any\n        while i < len(left_half):  # Check if there are remaining elements\n            arr[k] = left_half[i]  # Place remaining elements in merged array\n            i += 1  # Move to the next element in left half\n            k += 1  # Move to the next position in merged array\n\n        # Copy remaining elements of right_half, if any\n        while j < len(right_half):  # Check if there are remaining elements\n            arr[k] = right_half[j]  # Place remaining elements in merged array\n            j += 1  # Move to the next element in right half\n            k += 1  # Move to the next position in merged array",
    "input1_ans": [
        "```python\ndef calculate_factorial(n):  # Function to calculate the factorial of a number\n    if n < 0:  # Check for negative input\n        return \"Invalid input\"  # Factorial is not defined for negative numbers\n    elif n == 0:  # Base case for recursion\n        return 1  # Factorial of 0 is 1\n    else:\n        result = 1  # Initialize result variable\n        for i in range(1, n + 1):  # Loop through numbers from 1 to n\n            result *= i  # Multiply result by current number\n        return result  # Return the final factorial value\n```",
        "```python\ndef calculate_factorial(n):  # Function to calculate the factorial of a number\n    if n < 0:  # Check for negative input\n        return \"Invalid input\"  # Factorial is not defined for negative numbers\n    elif n == 0:  # Base case for recursion\n        return 1  # Factorial of 0 is 1\n    else:\n        result = 1  # Initialize result variable\n        for i in range(1, n + 1):  # Loop through numbers from 1 to n\n            result *= i  # Multiply result by current number\n        return result  # Return the final factorial value\n``` \n\n[warning]: The code is clear, but if you need further clarification on any part, please let me know!"
    ],
    "input2_ans": [
        "```python\ndef merge_sort(arr):  # Function to perform merge sort on an array\n    if len(arr) > 1:  # Check if the array has more than one element\n        mid = len(arr) // 2  # Find the middle index\n        left_half = arr[:mid]  # Split the array into left half\n        right_half = arr[mid:]  # Split the array into right half\n\n        merge_sort(left_half)  # Recursively sort the left half\n        merge_sort(right_half)  # Recursively sort the right half\n\n        i = j = k = 0  # Initialize indices for left, right, and merged arrays\n\n        # Merge the sorted halves\n        while i < len(left_half) and j < len(right_half):  # Compare elements\n            if left_half[i] < right_half[j]:  # If left element is smaller\n                arr[k] = left_half[i]  # Place it in the merged array\n                i += 1  # Move to the next element in left half\n            else:\n                arr[k] = right_half[j]  # Place right element in merged array\n                j += 1  # Move to the next element in right half\n            k += 1  # Move to the next position in merged array\n\n        # Copy remaining elements of left_half, if any\n        while i < len(left_half):  # Check if there are remaining elements\n            arr[k] = left_half[i]  # Place remaining elements in merged array\n            i += 1  # Move to the next element in left half\n            k += 1  # Move to the next position in merged array\n\n        # Copy remaining elements of right_half, if any\n        while j < len(right_half):  # Check if there are remaining elements\n            arr[k] = right_half[j]  # Place remaining elements in merged array\n            j += 1  # Move to the next element in right half\n            k += 1  # Move to the next position in merged array\n```",
        "```python\ndef merge_sort(arr):  # Function to perform merge sort on an array\n    if len(arr) > 1:  # Check if the array has more than one element\n        mid = len(arr) // 2  # Find the middle index\n        left_half = arr[:mid]  # Split the array into left half\n        right_half = arr[mid:]  # Split the array into right half\n\n        merge_sort(left_half)  # Recursively sort the left half\n        merge_sort(right_half)  # Recursively sort the right half\n\n        i = j = k = 0  # Initialize indices for left, right, and merged arrays\n\n        # Merge the sorted halves\n        while i < len(left_half) and j < len(right_half):  # Compare elements\n            if left_half[i] < right_half[j]:  # If left element is smaller\n                arr[k] = left_half[i]  # Place it in the merged array\n                i += 1  # Move to the next element in left half\n            else:\n                arr[k] = right_half[j]  # Place right element in merged array\n                j += 1  # Move to the next element in right half\n            k += 1  # Move to the next position in merged array\n\n        # Copy remaining elements of left_half, if any\n        while i < len(left_half):  # Check if there are remaining elements\n            arr[k] = left_half[i]  # Place remaining elements in merged array\n            i += 1  # Move to the next element in left half\n            k += 1  # Move to the next position in merged array\n\n        # Copy remaining elements of right_half, if any\n        while j < len(right_half):  # Check if there are remaining elements\n            arr[k] = right_half[j]  # Place remaining elements in merged array\n            j += 1  # Move to the next element in right half\n            k += 1  # Move to the next position in merged array\n``` \n\n[warning]: The code is clear and well-structured, but if you need further clarification on any specific part, please let me know!"
    ]
}