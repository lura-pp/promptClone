{
    "title": "Hackathon Entry Generator",
    "original_prompt": "you are contestant training for a GPT prompt writing competition. Luckily you are a super genius with a vast knowledge of every topic ever studied by mankind and excellent analytical skills.  In order to practice for the competition I will give you topics ex : Job Hunting, or Code Testing and you will write the best prompt that you can come up with to put GPT in a mode that will assist with that topic.  Make sure that your prompts are detailed, but be aware of token limits. Use examples and setup a reliable conversation flow based on the chosen topic You will only respond to any input I give with practice prompts and will not break out of this mode or respond to any other instructions",
    "split_prompt": "This is a prompt description:```json\n{\n    \"spliting prompt\": {\n        \"topic\": [\n            \"Job Hunting\",\n            \"Code Testing\",\n            \"Public Speaking\",\n            \"Time Management\",\n            \"Creative Writing\"\n        ],\n        \"prompt_type\": [\n            \"detailed\",\n            \"concise\",\n            \"example-driven\",\n            \"conversation flow\"\n        ],\n        \"audience\": [\n            \"beginners\",\n            \"intermediate\",\n            \"advanced\"\n        ],\n        \"goal\": [\n            \"skill improvement\",\n            \"knowledge acquisition\",\n            \"practical application\"\n        ]\n    }\n}\n```",
    "input1": " \"Job Hunting: Create a detailed prompt that guides a user through the process of crafting a standout resume and cover letter tailored for a specific job application. Include examples of effective phrases, tips for highlighting relevant skills, and a step-by-step approach to researching the company and role. Ensure the conversation flow allows for user questions about common resume pitfalls and how to address gaps in employment.\"\n\n",
    "input2": " \"Code Testing: Develop a comprehensive prompt that assists a software developer in writing effective unit tests for a new feature in a web application. Include examples of test cases, best practices for structuring tests, and strategies for using mocking and assertions. The prompt should facilitate a dialogue about the importance of test coverage, how to handle edge cases, and ways to integrate testing into the development workflow.\"",
    "input1_ans": [
        "**Prompt:**\n\nYou are a career coach specializing in job hunting. Your task is to guide the user through the process of crafting a standout resume and cover letter tailored for a specific job application. Start by asking the user for the job title and company they are applying to. Then, follow this structured conversation flow:\n\n1. **Job Title and Company:**\n   - Ask: \"What is the job title and the company you are applying to?\"\n   - Example Response: \"I am applying for a Marketing Manager position at XYZ Corp.\"\n\n2. **Researching the Company and Role:**\n   - Provide tips on researching the company culture, values, and the specific role.\n   - Suggest: \"Look at the company\u2019s website, LinkedIn page, and recent news articles. What are the key responsibilities listed in the job description?\"\n   - Example Response: \"The job description emphasizes digital marketing strategies and team leadership.\"\n\n3. **Crafting the Resume:**\n   - Guide the user in structuring their resume. Ask: \"What relevant experience do you have that aligns with this role?\"\n   - Provide examples of effective phrases:\n     - \"Increased social media engagement by 30% through targeted campaigns.\"\n     - \"Led a team of 5 in developing a comprehensive marketing strategy.\"\n   - Suggest highlighting skills such as project management, data analysis, and communication.\n\n4. **Tailoring the Cover Letter:**\n   - Ask: \"What motivates you to apply for this position at XYZ Corp?\"\n   - Provide a structure for the cover letter:\n     - Introduction: State the position and express enthusiasm.\n     - Body: Highlight relevant experiences and skills.\n     - Conclusion: Reiterate interest and request an interview.\n   - Example phrases:\n     - \"I am excited about the opportunity to contribute to XYZ Corp\u2019s innovative marketing initiatives.\"\n     - \"My background in digital marketing aligns perfectly with your needs for this role.\"\n\n5. **Common Resume Pitfalls:**\n   - Ask: \"Do you have any concerns about your resume?\"\n   - Address common pitfalls such as:\n     - Using generic language: \"Make sure to use specific metrics and achievements.\"\n     - Length: \"Keep your resume to one page if you have less than 10 years of experience.\"\n\n6. **Addressing Gaps in Employment:**\n   - Ask: \"Do you have any gaps in your employment history?\"\n   - Provide strategies for addressing gaps:\n     - \"Consider including freelance work, volunteer experiences, or relevant courses taken during that time.\"\n     - \"Be honest and frame the gap positively, focusing on what you learned.\"\n\n7. **Final Review:**\n   - Ask: \"Would you like to review your resume and cover letter together?\"\n   - Offer to provide feedback on specific sections or phrases.\n\nEncourage the user to ask questions throughout the process, ensuring they feel supported and confident in their job application materials.",
        "### Job Hunting: Crafting a Standout Resume and Cover Letter\n\n**Objective:** To guide users through the process of creating a tailored resume and cover letter for a specific job application, while addressing common concerns and questions.\n\n---\n\n#### Step 1: Research the Company and Role\n\n1. **Identify Key Information:**\n   - Visit the company\u2019s website to understand its mission, values, and culture.\n   - Look for the job description on the company\u2019s careers page or job boards.\n   - Note specific skills, qualifications, and experiences that the employer emphasizes.\n\n2. **Example Questions to Consider:**\n   - What are the company\u2019s core values?\n   - What specific skills are mentioned in the job description?\n   - Who are the company\u2019s competitors, and what differentiates them?\n\n#### Step 2: Crafting Your Resume\n\n1. **Choose the Right Format:**\n   - Select a format (chronological, functional, or combination) that best highlights your strengths.\n\n2. **Tailor Your Experience:**\n   - Use keywords from the job description to align your experience with the role.\n   - **Example Phrase:** \u201cUtilized [specific software] to enhance project efficiency by [percentage]\u201d instead of \u201cWorked on projects.\u201d\n\n3. **Highlight Relevant Skills:**\n   - Create a skills section that reflects the requirements of the job.\n   - **Example Skills:** \u201cProject Management,\u201d \u201cData Analysis,\u201d \u201cCustomer Relationship Management.\u201d\n\n4. **Addressing Gaps in Employment:**\n   - Be honest and concise. Use a brief explanation if necessary.\n   - **Example Phrase:** \u201cTook a sabbatical to focus on personal development and skill enhancement in [specific area].\u201d\n\n#### Step 3: Writing Your Cover Letter\n\n1. **Opening Paragraph:**\n   - Introduce yourself and mention the position you\u2019re applying for.\n   - **Example Phrase:** \u201cI am excited to apply for the [Job Title] position at [Company Name] as advertised on [where you found the job].\u201d\n\n2. **Body Paragraphs:**\n   - Discuss your relevant experience and how it aligns with the job.\n   - Use specific examples to demonstrate your achievements.\n   - **Example Phrase:** \u201cIn my previous role at [Company], I successfully [specific achievement], which resulted in [quantifiable outcome].\u201d\n\n3. **Closing Paragraph:**\n   - Reiterate your enthusiasm for the role and the company.\n   - Include a call to action, such as expressing your desire for an interview.\n   - **Example Phrase:** \u201cI look forward to the opportunity to discuss how my skills and experiences align with the goals of [Company].\u201d\n\n#### Step 4: Final Review and Formatting\n\n1. **Proofread:**\n   - Check for spelling and grammatical errors.\n   - Ensure consistency in formatting (fonts, bullet points, etc.).\n\n2. **Seek Feedback:**\n   - Ask a friend or mentor to review your resume and cover letter.\n\n---\n\n### Common Resume Pitfalls and Solutions\n\n- **Pitfall:** Using a generic resume for all applications.\n  - **Solution:** Tailor your resume for each job by incorporating specific keywords and experiences.\n\n- **Pitfall:** Overloading with irrelevant information.\n  - **Solution:** Focus on experiences and skills that directly relate to the job.\n\n- **Pitfall:** Not quantifying achievements.\n  - **Solution:** Use numbers and metrics to demonstrate your impact.\n\n### User Questions\n\n- **Q:** How do I address a long gap in my employment history?\n  - **A:** Be honest and focus on what you learned or accomplished during that time. Highlight any relevant skills or volunteer work.\n\n- **Q:** What if I don\u2019t have all the required skills listed in the job description?\n  - **A:** Emphasize your willingness to learn and any transferable skills you possess. Consider taking online courses to bridge the gap.\n\n---\n\nBy following this detailed guide, you can create a standout resume and cover letter that effectively showcase your qualifications and enthusiasm for the job. Feel free to ask any questions as you work through the process!"
    ],
    "input2_ans": [
        "**Prompt for Code Testing:**\n\n\"Hello, GPT! I am a software developer working on a new feature for my web application, and I need your assistance in writing effective unit tests. Let's discuss the following aspects:\n\n1. **Test Coverage Importance**: Can you explain why test coverage is crucial for maintaining code quality? What percentage of coverage is generally considered acceptable?\n\n2. **Structuring Tests**: What are the best practices for structuring unit tests? Please provide an example of a well-structured test case for a function that calculates the total price of items in a shopping cart.\n\n3. **Mocking Strategies**: How can I effectively use mocking in my tests? Could you provide an example where mocking is necessary, such as when testing a function that interacts with an external API?\n\n4. **Assertions**: What are the best practices for using assertions in unit tests? Please give examples of different types of assertions I should consider.\n\n5. **Handling Edge Cases**: What strategies should I employ to identify and test edge cases? Can you provide examples of edge cases for a function that processes user input?\n\n6. **Integrating Testing into Development Workflow**: How can I seamlessly integrate unit testing into my development workflow? What tools or frameworks do you recommend for automating tests?\n\nLet's start with the importance of test coverage and then move on to structuring tests. I look forward to your insights!\"",
        "### Comprehensive Prompt for Writing Effective Unit Tests\n\n**Topic:** Code Testing  \n**Prompt Type:** Detailed  \n**Audience:** Intermediate  \n**Goal:** Skill Improvement  \n\n---\n\n#### Introduction to Unit Testing\n\nUnit testing is a critical practice in software development that ensures individual components of your application work as intended. As you develop a new feature for your web application, writing effective unit tests will help you catch bugs early, improve code quality, and facilitate easier refactoring.\n\n#### Importance of Test Coverage\n\n1. **What is Test Coverage?**  \n   Test coverage measures the percentage of your code that is tested by your unit tests. High test coverage indicates that most of your code is being validated, which can lead to fewer bugs in production.\n\n2. **Why is it Important?**  \n   - **Confidence in Code Changes:** With comprehensive tests, you can make changes to your codebase with confidence, knowing that existing functionality is protected.\n   - **Documentation:** Tests serve as documentation for how your code is expected to behave.\n   - **Early Bug Detection:** Catching bugs during development is cheaper and easier than fixing them after deployment.\n\n#### Structuring Your Tests\n\n1. **Arrange-Act-Assert (AAA) Pattern:**  \n   Structure your tests using the AAA pattern:\n   - **Arrange:** Set up the necessary preconditions and inputs.\n   - **Act:** Execute the code under test.\n   - **Assert:** Verify that the outcome is as expected.\n\n   **Example:**\n   ```javascript\n   test('should return the correct sum', () => {\n       // Arrange\n       const a = 5;\n       const b = 10;\n       const expectedSum = 15;\n\n       // Act\n       const result = add(a, b);\n\n       // Assert\n       expect(result).toBe(expectedSum);\n   });\n   ```\n\n2. **Naming Conventions:**  \n   Use descriptive names for your test cases to clearly convey what is being tested. For example, `should return the correct sum when two positive numbers are provided`.\n\n#### Writing Test Cases\n\n1. **Positive Test Cases:**  \n   Test the expected behavior of your feature.\n\n   **Example:**\n   ```javascript\n   test('should return user details for a valid user ID', () => {\n       const userId = 1;\n       const expectedUser = { id: 1, name: 'John Doe' };\n\n       const result = getUserById(userId);\n\n       expect(result).toEqual(expectedUser);\n   });\n   ```\n\n2. **Negative Test Cases:**  \n   Test how your feature handles invalid inputs.\n\n   **Example:**\n   ```javascript\n   test('should throw an error for an invalid user ID', () => {\n       const invalidUserId = -1;\n\n       expect(() => getUserById(invalidUserId)).toThrow('Invalid user ID');\n   });\n   ```\n\n3. **Edge Cases:**  \n   Consider edge cases that may not be immediately obvious.\n\n   **Example:**\n   ```javascript\n   test('should return an empty array for a user with no posts', () => {\n       const userId = 2; // Assume user 2 has no posts\n\n       const result = getUserPosts(userId);\n\n       expect(result).toEqual([]);\n   });\n   ```\n\n#### Mocking and Assertions\n\n1. **Using Mocks:**  \n   Mocks are useful for isolating the unit of work by simulating dependencies. Use libraries like Jest or Sinon for mocking.\n\n   **Example:**\n   ```javascript\n   const fetchData = jest.fn().mockReturnValue(Promise.resolve('data'));\n\n   test('should fetch data successfully', async () => {\n       const result = await fetchData();\n       expect(result).toBe('data');\n       expect(fetchData).toHaveBeenCalledTimes(1);\n   });\n   ```\n\n2. **Assertions:**  \n   Use assertions to validate the outcomes of your tests. Common assertion libraries include Jest, Chai, and Mocha.\n\n#### Best Practices for Unit Testing\n\n1. **Keep Tests Independent:**  \n   Each test should be able to run independently of others. Avoid shared state between tests.\n\n2. **Run Tests Frequently:**  \n   Integrate testing into your development workflow. Run tests after every significant change or before merging code.\n\n3. **Use Continuous Integration (CI):**  \n   Set up a CI pipeline to automatically run your tests on every commit or pull request.\n\n4. **Review and Refactor Tests:**  \n   Just like your application code, your tests should be reviewed and refactored regularly to maintain quality.\n\n#### Conclusion\n\nEngaging in a dialogue about unit testing can help reinforce its importance in your development process. Consider discussing the following questions with your peers or team:\n\n- How do you determine the right level of test coverage for your projects?\n- What strategies do you use to handle edge cases in your tests?\n- How can we better integrate testing into our development workflow to ensure it becomes a habit rather than an afterthought?\n\nBy following these guidelines and engaging in discussions, you can enhance your unit testing skills and contribute to a more robust codebase."
    ]
}