{
    "H1_split_prompt": "{\n    \"analysis\": {\n        \"Initial behavior\": {\n            \"description\": \"Specifies what must be done at the beginning of a conversation. Information here should not appear in other dimensions to prevent interfering with descriptions of other dimensions.\",\n            \"exists\": \"true\",\n            \"contents\": [\n                \"If you understand what I mean, you can start asking me what requirements I need to implement.\"\n            ]\n        },\n        \"role\": {\n            \"description\": \"Defines the identity or function of an entity (e.g., user, AI, character in a game, job position). This determines how interactions, behaviors, and responsibilities should be shaped in a given scenario.\",\n            \"exists\": \"true\",\n            \"contents\": [\n                \"Position: Front-end\"\n            ]\n        },\n        \"task/goal\": {\n            \"description\": \"Represents the purpose, objective, or activity that needs to be achieved. This includes both high-level goals (e.g., business objectives) and specific tasks (e.g., completing a form).\",\n            \"exists\": \"true\",\n            \"contents\": [\n                \"You only need to output the code implementation, no need for other explanations.\"\n            ]\n        },\n        \"topic\": {\n            \"description\": \"Indicates the subject matter of the prompt, defining the area of focus or discussion. It helps narrow down relevant information and ensures content relevance.\",\n            \"exists\": \"true\",\n            \"contents\": [\n                \"Language: VUE, Echarts\"\n            ]\n        },\n        \"target_audience\": {\n            \"description\": \"Identifies the intended recipients of the content, considering factors like engagement level, knowledge background, and expected reactions. This helps tailor tone, complexity, and presentation style.\",\n            \"exists\": \"false\",\n            \"contents\": []\n        },\n        \"context\": {\n            \"description\": \"Provides background information to make responses more relevant and meaningful. This includes situational details, prior discussions, professional settings, and specific constraints affecting the response.\",\n            \"exists\": \"false\",\n            \"contents\": []\n        },\n        \"requirements\": {\n            \"description\": \"Defines specific conditions, constraints, workflow, expectations, or procedural steps that must be met for the response to be valid. This includes content, research, technological, and explanatory requirements.\",\n            \"exists\": \"false\",\n            \"contents\": []\n        },\n        \"knowledge\": {\n            \"description\": \"Defines the expertise level or domain-specific information required to generate an informed response. It includes technical knowledge, general facts, and specialized insights.\",\n            \"exists\": \"false\",\n            \"contents\": []\n        },\n        \"guidance\": {\n            \"description\": \"Provides structured instructions or recommendations to help the user achieve a goal, such as guidelines, workflows, or procedural steps.\",\n            \"exists\": \"false\",\n            \"contents\": []\n        },\n        \"features\": {\n            \"description\": \"Highlights unique characteristics or functionalities of a product, service, or concept that differentiate it from others.\",\n            \"exists\": \"false\",\n            \"contents\": []\n        },\n        \"constraints\": {\n            \"description\": \"Specifies limitations that must be considered, such as legal, ethical, technical, or practical restrictions affecting content generation or task execution.\",\n            \"exists\": \"false\",\n            \"contents\": []\n        },\n        \"input\": {\n            \"description\": \"Describes the information provided by the user, such as text, examples, language preferences, or specific parameters required for generating an appropriate response.\",\n            \"exists\": \"false\",\n            \"contents\": []\n        },\n        \"output_format\": {\n            \"description\": \"Specifies how the response should be structured, including document type, style, language, length, formatting, and presentation style.\",\n            \"exists\": \"false\",\n            \"contents\": []\n        },\n        \"action\": {\n            \"description\": \"Refers to specific activities or steps that should be taken, whether by the AI or the user. It can also include calls to action in persuasive contexts.\",\n            \"exists\": \"false\",\n            \"contents\": []\n        },\n        \"tone\": {\n            \"description\": \"Determines the emotional and stylistic approach used in communication, such as professional, formal, friendly, persuasive, or humorous.\",\n            \"exists\": \"false\",\n            \"contents\": []\n        }\n    }\n}",
    "H1_split_answer1": "```vue\n<template>\n  <div>\n    <div ref=\"lineChart\" style=\"width: 100%; height: 400px;\"></div>\n  </div>\n</template>\n\n<script>\nimport * as echarts from 'echarts';\n\nexport default {\n  data() {\n    return {\n      chartInstance: null,\n      chartData: {\n        xAxisData: [],\n        seriesData: []\n      },\n      apiEndpoint: 'https://api.example.com/data', // Replace with your API endpoint\n    };\n  },\n  mounted() {\n    this.initChart();\n    this.fetchData();\n    setInterval(this.fetchData, 5000); // Fetch new data every 5 seconds\n  },\n  methods: {\n    initChart() {\n      this.chartInstance = echarts.init(this.$refs.lineChart);\n      this.updateChart();\n    },\n    async fetchData() {\n      try {\n        const response = await fetch(this.apiEndpoint);\n        const data = await response.json();\n        \n        // Assuming the API returns an array of objects with 'time' and 'value' properties\n        this.chartData.xAxisData.push(data.time);\n        this.chartData.seriesData.push(data.value);\n        \n        // Limit the number of data points displayed\n        if (this.chartData.xAxisData.length > 20) {\n          this.chartData.xAxisData.shift();\n          this.chartData.seriesData.shift();\n        }\n\n        this.updateChart();\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    updateChart() {\n      const option = {\n        tooltip: {\n          trigger: 'axis',\n          formatter: (params) => {\n            let tooltipHtml = '';\n            params.forEach(param => {\n              tooltipHtml += `${param.seriesName}: ${param.data}<br/>`;\n            });\n            return tooltipHtml;\n          }\n        },\n        xAxis: {\n          type: 'category',\n          data: this.chartData.xAxisData,\n        },\n        yAxis: {\n          type: 'value',\n        },\n        series: [\n          {\n            name: 'Data Series 1',\n            type: 'line',\n            data: this.chartData.seriesData,\n            smooth: true,\n          },\n          // Add more series as needed\n        ]\n      };\n\n      this.chartInstance.setOption(option);\n    }\n  },\n  beforeDestroy() {\n    if (this.chartInstance) {\n      this.chartInstance.dispose();\n    }\n  }\n};\n</script>\n\n<style scoped>\n</style>\n```\n\nThis Vue component implements a dynamic line chart using Echarts. It fetches data from a specified API endpoint and updates the chart in real-time. The chart displays multiple lines representing different data series and includes tooltips that show detailed information on hover. Adjust the API endpoint and data processing logic as needed based on your specific data structure.",
    "H1_split_answer2": "```vue\n<template>\n  <div ref=\"chartContainer\" class=\"chart-container\"></div>\n</template>\n\n<script>\nimport * as echarts from 'echarts';\n\nexport default {\n  data() {\n    return {\n      chartInstance: null,\n      chartData: {\n        categories: [],\n        series: []\n      }\n    };\n  },\n  mounted() {\n    this.fetchData();\n    this.initChart();\n    window.addEventListener('resize', this.resizeChart);\n  },\n  beforeDestroy() {\n    window.removeEventListener('resize', this.resizeChart);\n  },\n  methods: {\n    async fetchData() {\n      try {\n        const response = await fetch('path/to/your/data.json');\n        const data = await response.json();\n        this.chartData.categories = data.categories;\n        this.chartData.series = data.series;\n        this.updateChart();\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    initChart() {\n      this.chartInstance = echarts.init(this.$refs.chartContainer);\n      this.updateChart();\n    },\n    updateChart() {\n      const option = {\n        title: {\n          text: 'Bar Chart Example'\n        },\n        tooltip: {},\n        legend: {\n          data: this.chartData.categories,\n          selected: this.chartData.categories.reduce((acc, category) => {\n            acc[category] = true; // Initially show all categories\n            return acc;\n          }, {})\n        },\n        xAxis: {\n          type: 'category',\n          data: this.chartData.categories\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: this.chartData.series.map((item, index) => ({\n          name: this.chartData.categories[index],\n          type: 'bar',\n          data: item,\n          itemStyle: {\n            // Customize bar color if needed\n          }\n        }))\n      };\n      this.chartInstance.setOption(option);\n    },\n    resizeChart() {\n      if (this.chartInstance) {\n        this.chartInstance.resize();\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.chart-container {\n  width: 100%;\n  height: 400px; /* Adjust height as needed */\n}\n</style>\n```\n\n### JSON Structure Example\nMake sure your JSON file is structured like this:\n```json\n{\n  \"categories\": [\"Category 1\", \"Category 2\", \"Category 3\"],\n  \"series\": [\n    [120, 200, 150],\n    [180, 250, 220],\n    [90, 130, 170]\n  ]\n}\n```\n\n### Notes\n- Replace `'path/to/your/data.json'` with the actual path to your JSON file.\n- The chart will automatically resize when the window size changes, and the legend allows users to toggle the visibility of each category.",
    "H1_input1_similarities": 0.9987248778343201,
    "H1_input2_similarities": 0.9392514228820801
}